
RTC_3231-display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000736  00800100  00001c26  00001cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800836  00800836  000023f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d03  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fee  00000000  00000000  00006447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cd8  00000000  00000000  00007435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf8  00000000  00000000  0000a110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012728  00000000  00000000  0000ad08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000044ed  00000000  00000000  0001d430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0002191d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000140a  00000000  00000000  00021b75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c0       	rjmp	.+136    	; 0xa2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	42 c0       	rjmp	.+132    	; 0xa2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c0       	rjmp	.+116    	; 0xa2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c0       	rjmp	.+108    	; 0xa2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c0       	rjmp	.+88     	; 0xa2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2a c0       	rjmp	.+84     	; 0xa2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c0       	rjmp	.+72     	; 0xa2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c0       	rjmp	.+68     	; 0xa2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	20 c0       	rjmp	.+64     	; 0xa2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c0       	rjmp	.+60     	; 0xa2 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	18 e0       	ldi	r17, 0x08	; 8
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e2       	ldi	r30, 0x26	; 38
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 33       	cpi	r26, 0x36	; 54
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	a6 e3       	ldi	r26, 0x36	; 54
      8e:	b8 e0       	ldi	r27, 0x08	; 8
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 34       	cpi	r26, 0x45	; 69
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b8 09 	call	0x1370	; 0x1370 <main>
      9e:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <a_ds3231_iic_write>:
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
}
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	1f 92       	push	r1
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	49 83       	std	Y+1, r20	; 0x01
      b0:	dc 01       	movw	r26, r24
      b2:	14 96       	adiw	r26, 0x04	; 4
      b4:	ed 91       	ld	r30, X+
      b6:	fc 91       	ld	r31, X
      b8:	15 97       	sbiw	r26, 0x05	; 5
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	30 e0       	ldi	r19, 0x00	; 0
      be:	ae 01       	movw	r20, r28
      c0:	4f 5f       	subi	r20, 0xFF	; 255
      c2:	5f 4f       	sbci	r21, 0xFF	; 255
      c4:	88 e6       	ldi	r24, 0x68	; 104
      c6:	09 95       	icall
      c8:	91 e0       	ldi	r25, 0x01	; 1
      ca:	81 11       	cpse	r24, r1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <a_ds3231_iic_write+0x2c>
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	89 2f       	mov	r24, r25
      d2:	0f 90       	pop	r0
      d4:	df 91       	pop	r29
      d6:	cf 91       	pop	r28
      d8:	08 95       	ret

000000da <a_ds3231_iic_multiple_read>:
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	dc 01       	movw	r26, r24
      de:	16 96       	adiw	r26, 0x06	; 6
      e0:	ed 91       	ld	r30, X+
      e2:	fc 91       	ld	r31, X
      e4:	17 97       	sbiw	r26, 0x07	; 7
      e6:	88 e6       	ldi	r24, 0x68	; 104
      e8:	09 95       	icall
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	81 11       	cpse	r24, r1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <a_ds3231_iic_multiple_read+0x18>
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	89 2f       	mov	r24, r25
      f4:	08 95       	ret

000000f6 <a_ds3231_hex2bcd>:
      f6:	9d ec       	ldi	r25, 0xCD	; 205
      f8:	89 9f       	mul	r24, r25
      fa:	91 2d       	mov	r25, r1
      fc:	11 24       	eor	r1, r1
      fe:	96 95       	lsr	r25
     100:	96 95       	lsr	r25
     102:	96 95       	lsr	r25
     104:	39 2f       	mov	r19, r25
     106:	33 0f       	add	r19, r19
     108:	23 2f       	mov	r18, r19
     10a:	22 0f       	add	r18, r18
     10c:	22 0f       	add	r18, r18
     10e:	23 0f       	add	r18, r19
     110:	82 1b       	sub	r24, r18
     112:	20 e1       	ldi	r18, 0x10	; 16
     114:	92 9f       	mul	r25, r18
     116:	80 0d       	add	r24, r0
     118:	11 24       	eor	r1, r1
     11a:	08 95       	ret

0000011c <a_ds3231_bcd2hex>:
     11c:	38 2f       	mov	r19, r24
     11e:	3f 70       	andi	r19, 0x0F	; 15
     120:	98 2f       	mov	r25, r24
     122:	92 95       	swap	r25
     124:	9f 70       	andi	r25, 0x0F	; 15
     126:	99 0f       	add	r25, r25
     128:	29 2f       	mov	r18, r25
     12a:	22 0f       	add	r18, r18
     12c:	22 0f       	add	r18, r18
     12e:	89 2f       	mov	r24, r25
     130:	82 0f       	add	r24, r18
     132:	83 0f       	add	r24, r19
     134:	08 95       	ret

00000136 <ds3231_set_time>:
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	09 f4       	brne	.+2      	; 0x14c <ds3231_set_time+0x16>
     14a:	eb c1       	rjmp	.+982    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     14c:	dc 01       	movw	r26, r24
     14e:	1e 96       	adiw	r26, 0x0e	; 14
     150:	cc 91       	ld	r28, X
     152:	1e 97       	sbiw	r26, 0x0e	; 14
     154:	c1 30       	cpi	r28, 0x01	; 1
     156:	09 f0       	breq	.+2      	; 0x15a <ds3231_set_time+0x24>
     158:	e6 c1       	rjmp	.+972    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	61 15       	cp	r22, r1
     160:	71 05       	cpc	r23, r1
     162:	69 f4       	brne	.+26     	; 0x17e <ds3231_set_time+0x48>
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	9f 93       	push	r25
     16a:	8f 93       	push	r24
     16c:	18 96       	adiw	r26, 0x08	; 8
     16e:	ed 91       	ld	r30, X+
     170:	fc 91       	ld	r31, X
     172:	19 97       	sbiw	r26, 0x09	; 9
     174:	09 95       	icall
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	c2 e0       	ldi	r28, 0x02	; 2
     17c:	d7 c1       	rjmp	.+942    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     17e:	fb 01       	movw	r30, r22
     180:	80 85       	ldd	r24, Z+8	; 0x08
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	09 f0       	breq	.+2      	; 0x188 <ds3231_set_time+0x52>
     186:	7f c0       	rjmp	.+254    	; 0x286 <ds3231_set_time+0x150>
     188:	80 81       	ld	r24, Z
     18a:	91 81       	ldd	r25, Z+1	; 0x01
     18c:	86 5c       	subi	r24, 0xC6	; 198
     18e:	97 40       	sbci	r25, 0x07	; 7
     190:	89 3c       	cpi	r24, 0xC9	; 201
     192:	91 05       	cpc	r25, r1
     194:	68 f0       	brcs	.+26     	; 0x1b0 <ds3231_set_time+0x7a>
     196:	87 e1       	ldi	r24, 0x17	; 23
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	9f 93       	push	r25
     19c:	8f 93       	push	r24
     19e:	18 96       	adiw	r26, 0x08	; 8
     1a0:	ed 91       	ld	r30, X+
     1a2:	fc 91       	ld	r31, X
     1a4:	19 97       	sbiw	r26, 0x09	; 9
     1a6:	09 95       	icall
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	c4 e0       	ldi	r28, 0x04	; 4
     1ae:	be c1       	rjmp	.+892    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     1b0:	fb 01       	movw	r30, r22
     1b2:	82 81       	ldd	r24, Z+2	; 0x02
     1b4:	81 50       	subi	r24, 0x01	; 1
     1b6:	8c 30       	cpi	r24, 0x0C	; 12
     1b8:	68 f0       	brcs	.+26     	; 0x1d4 <ds3231_set_time+0x9e>
     1ba:	8b e4       	ldi	r24, 0x4B	; 75
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	9f 93       	push	r25
     1c0:	8f 93       	push	r24
     1c2:	18 96       	adiw	r26, 0x08	; 8
     1c4:	ed 91       	ld	r30, X+
     1c6:	fc 91       	ld	r31, X
     1c8:	19 97       	sbiw	r26, 0x09	; 9
     1ca:	09 95       	icall
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	c4 e0       	ldi	r28, 0x04	; 4
     1d2:	ac c1       	rjmp	.+856    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     1d4:	fb 01       	movw	r30, r22
     1d6:	83 81       	ldd	r24, Z+3	; 0x03
     1d8:	81 50       	subi	r24, 0x01	; 1
     1da:	87 30       	cpi	r24, 0x07	; 7
     1dc:	68 f0       	brcs	.+26     	; 0x1f8 <ds3231_set_time+0xc2>
     1de:	89 e7       	ldi	r24, 0x79	; 121
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	9f 93       	push	r25
     1e4:	8f 93       	push	r24
     1e6:	18 96       	adiw	r26, 0x08	; 8
     1e8:	ed 91       	ld	r30, X+
     1ea:	fc 91       	ld	r31, X
     1ec:	19 97       	sbiw	r26, 0x09	; 9
     1ee:	09 95       	icall
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	c4 e0       	ldi	r28, 0x04	; 4
     1f6:	9a c1       	rjmp	.+820    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     1f8:	fb 01       	movw	r30, r22
     1fa:	84 81       	ldd	r24, Z+4	; 0x04
     1fc:	81 50       	subi	r24, 0x01	; 1
     1fe:	8f 31       	cpi	r24, 0x1F	; 31
     200:	68 f0       	brcs	.+26     	; 0x21c <ds3231_set_time+0xe6>
     202:	85 ea       	ldi	r24, 0xA5	; 165
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	9f 93       	push	r25
     208:	8f 93       	push	r24
     20a:	18 96       	adiw	r26, 0x08	; 8
     20c:	ed 91       	ld	r30, X+
     20e:	fc 91       	ld	r31, X
     210:	19 97       	sbiw	r26, 0x09	; 9
     212:	09 95       	icall
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	c4 e0       	ldi	r28, 0x04	; 4
     21a:	88 c1       	rjmp	.+784    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     21c:	fb 01       	movw	r30, r22
     21e:	85 81       	ldd	r24, Z+5	; 0x05
     220:	81 50       	subi	r24, 0x01	; 1
     222:	8c 30       	cpi	r24, 0x0C	; 12
     224:	68 f0       	brcs	.+26     	; 0x240 <ds3231_set_time+0x10a>
     226:	82 ed       	ldi	r24, 0xD2	; 210
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	18 96       	adiw	r26, 0x08	; 8
     230:	ed 91       	ld	r30, X+
     232:	fc 91       	ld	r31, X
     234:	19 97       	sbiw	r26, 0x09	; 9
     236:	09 95       	icall
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	c4 e0       	ldi	r28, 0x04	; 4
     23e:	76 c1       	rjmp	.+748    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     240:	fb 01       	movw	r30, r22
     242:	86 81       	ldd	r24, Z+6	; 0x06
     244:	8c 33       	cpi	r24, 0x3C	; 60
     246:	68 f0       	brcs	.+26     	; 0x262 <ds3231_set_time+0x12c>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	9f 93       	push	r25
     24e:	8f 93       	push	r24
     250:	18 96       	adiw	r26, 0x08	; 8
     252:	ed 91       	ld	r30, X+
     254:	fc 91       	ld	r31, X
     256:	19 97       	sbiw	r26, 0x09	; 9
     258:	09 95       	icall
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	c4 e0       	ldi	r28, 0x04	; 4
     260:	65 c1       	rjmp	.+714    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     262:	fb 01       	movw	r30, r22
     264:	87 81       	ldd	r24, Z+7	; 0x07
     266:	8c 33       	cpi	r24, 0x3C	; 60
     268:	08 f4       	brcc	.+2      	; 0x26c <ds3231_set_time+0x136>
     26a:	9a c0       	rjmp	.+308    	; 0x3a0 <ds3231_set_time+0x26a>
     26c:	88 e2       	ldi	r24, 0x28	; 40
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	9f 93       	push	r25
     272:	8f 93       	push	r24
     274:	18 96       	adiw	r26, 0x08	; 8
     276:	ed 91       	ld	r30, X+
     278:	fc 91       	ld	r31, X
     27a:	19 97       	sbiw	r26, 0x09	; 9
     27c:	09 95       	icall
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	c4 e0       	ldi	r28, 0x04	; 4
     284:	53 c1       	rjmp	.+678    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     286:	81 11       	cpse	r24, r1
     288:	7e c0       	rjmp	.+252    	; 0x386 <ds3231_set_time+0x250>
     28a:	fb 01       	movw	r30, r22
     28c:	80 81       	ld	r24, Z
     28e:	91 81       	ldd	r25, Z+1	; 0x01
     290:	86 5c       	subi	r24, 0xC6	; 198
     292:	97 40       	sbci	r25, 0x07	; 7
     294:	89 3c       	cpi	r24, 0xC9	; 201
     296:	91 05       	cpc	r25, r1
     298:	68 f0       	brcs	.+26     	; 0x2b4 <ds3231_set_time+0x17e>
     29a:	87 e1       	ldi	r24, 0x17	; 23
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	9f 93       	push	r25
     2a0:	8f 93       	push	r24
     2a2:	18 96       	adiw	r26, 0x08	; 8
     2a4:	ed 91       	ld	r30, X+
     2a6:	fc 91       	ld	r31, X
     2a8:	19 97       	sbiw	r26, 0x09	; 9
     2aa:	09 95       	icall
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	c4 e0       	ldi	r28, 0x04	; 4
     2b2:	3c c1       	rjmp	.+632    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     2b4:	fb 01       	movw	r30, r22
     2b6:	82 81       	ldd	r24, Z+2	; 0x02
     2b8:	81 50       	subi	r24, 0x01	; 1
     2ba:	8c 30       	cpi	r24, 0x0C	; 12
     2bc:	68 f0       	brcs	.+26     	; 0x2d8 <ds3231_set_time+0x1a2>
     2be:	8b e4       	ldi	r24, 0x4B	; 75
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
     2c6:	18 96       	adiw	r26, 0x08	; 8
     2c8:	ed 91       	ld	r30, X+
     2ca:	fc 91       	ld	r31, X
     2cc:	19 97       	sbiw	r26, 0x09	; 9
     2ce:	09 95       	icall
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	c4 e0       	ldi	r28, 0x04	; 4
     2d6:	2a c1       	rjmp	.+596    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     2d8:	fb 01       	movw	r30, r22
     2da:	83 81       	ldd	r24, Z+3	; 0x03
     2dc:	81 50       	subi	r24, 0x01	; 1
     2de:	87 30       	cpi	r24, 0x07	; 7
     2e0:	68 f0       	brcs	.+26     	; 0x2fc <ds3231_set_time+0x1c6>
     2e2:	89 e7       	ldi	r24, 0x79	; 121
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	9f 93       	push	r25
     2e8:	8f 93       	push	r24
     2ea:	18 96       	adiw	r26, 0x08	; 8
     2ec:	ed 91       	ld	r30, X+
     2ee:	fc 91       	ld	r31, X
     2f0:	19 97       	sbiw	r26, 0x09	; 9
     2f2:	09 95       	icall
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	c4 e0       	ldi	r28, 0x04	; 4
     2fa:	18 c1       	rjmp	.+560    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     2fc:	fb 01       	movw	r30, r22
     2fe:	84 81       	ldd	r24, Z+4	; 0x04
     300:	81 50       	subi	r24, 0x01	; 1
     302:	8f 31       	cpi	r24, 0x1F	; 31
     304:	68 f0       	brcs	.+26     	; 0x320 <ds3231_set_time+0x1ea>
     306:	85 ea       	ldi	r24, 0xA5	; 165
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	9f 93       	push	r25
     30c:	8f 93       	push	r24
     30e:	18 96       	adiw	r26, 0x08	; 8
     310:	ed 91       	ld	r30, X+
     312:	fc 91       	ld	r31, X
     314:	19 97       	sbiw	r26, 0x09	; 9
     316:	09 95       	icall
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	c4 e0       	ldi	r28, 0x04	; 4
     31e:	06 c1       	rjmp	.+524    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     320:	fb 01       	movw	r30, r22
     322:	85 81       	ldd	r24, Z+5	; 0x05
     324:	88 31       	cpi	r24, 0x18	; 24
     326:	68 f0       	brcs	.+26     	; 0x342 <ds3231_set_time+0x20c>
     328:	8f e4       	ldi	r24, 0x4F	; 79
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	18 96       	adiw	r26, 0x08	; 8
     332:	ed 91       	ld	r30, X+
     334:	fc 91       	ld	r31, X
     336:	19 97       	sbiw	r26, 0x09	; 9
     338:	09 95       	icall
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	c4 e0       	ldi	r28, 0x04	; 4
     340:	f5 c0       	rjmp	.+490    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     342:	fb 01       	movw	r30, r22
     344:	86 81       	ldd	r24, Z+6	; 0x06
     346:	8c 33       	cpi	r24, 0x3C	; 60
     348:	68 f0       	brcs	.+26     	; 0x364 <ds3231_set_time+0x22e>
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	9f 93       	push	r25
     350:	8f 93       	push	r24
     352:	18 96       	adiw	r26, 0x08	; 8
     354:	ed 91       	ld	r30, X+
     356:	fc 91       	ld	r31, X
     358:	19 97       	sbiw	r26, 0x09	; 9
     35a:	09 95       	icall
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	c4 e0       	ldi	r28, 0x04	; 4
     362:	e4 c0       	rjmp	.+456    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     364:	fb 01       	movw	r30, r22
     366:	87 81       	ldd	r24, Z+7	; 0x07
     368:	8c 33       	cpi	r24, 0x3C	; 60
     36a:	d0 f0       	brcs	.+52     	; 0x3a0 <ds3231_set_time+0x26a>
     36c:	88 e2       	ldi	r24, 0x28	; 40
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	18 96       	adiw	r26, 0x08	; 8
     376:	ed 91       	ld	r30, X+
     378:	fc 91       	ld	r31, X
     37a:	19 97       	sbiw	r26, 0x09	; 9
     37c:	09 95       	icall
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	c4 e0       	ldi	r28, 0x04	; 4
     384:	d3 c0       	rjmp	.+422    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     386:	84 e7       	ldi	r24, 0x74	; 116
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	9f 93       	push	r25
     38c:	8f 93       	push	r24
     38e:	18 96       	adiw	r26, 0x08	; 8
     390:	ed 91       	ld	r30, X+
     392:	fc 91       	ld	r31, X
     394:	19 97       	sbiw	r26, 0x09	; 9
     396:	09 95       	icall
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	c4 e0       	ldi	r28, 0x04	; 4
     39e:	c6 c0       	rjmp	.+396    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     3a0:	f7 01       	movw	r30, r14
     3a2:	87 81       	ldd	r24, Z+7	; 0x07
     3a4:	a8 de       	rcall	.-688    	; 0xf6 <a_ds3231_hex2bcd>
     3a6:	48 2f       	mov	r20, r24
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	c8 01       	movw	r24, r16
     3ac:	7b de       	rcall	.-778    	; 0xa4 <a_ds3231_iic_write>
     3ae:	88 23       	and	r24, r24
     3b0:	69 f0       	breq	.+26     	; 0x3cc <ds3231_set_time+0x296>
     3b2:	80 e9       	ldi	r24, 0x90	; 144
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	9f 93       	push	r25
     3b8:	8f 93       	push	r24
     3ba:	d8 01       	movw	r26, r16
     3bc:	18 96       	adiw	r26, 0x08	; 8
     3be:	ed 91       	ld	r30, X+
     3c0:	fc 91       	ld	r31, X
     3c2:	19 97       	sbiw	r26, 0x09	; 9
     3c4:	09 95       	icall
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	b0 c0       	rjmp	.+352    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     3cc:	f7 01       	movw	r30, r14
     3ce:	86 81       	ldd	r24, Z+6	; 0x06
     3d0:	92 de       	rcall	.-732    	; 0xf6 <a_ds3231_hex2bcd>
     3d2:	48 2f       	mov	r20, r24
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	c8 01       	movw	r24, r16
     3d8:	65 de       	rcall	.-822    	; 0xa4 <a_ds3231_iic_write>
     3da:	88 23       	and	r24, r24
     3dc:	69 f0       	breq	.+26     	; 0x3f8 <ds3231_set_time+0x2c2>
     3de:	8e ea       	ldi	r24, 0xAE	; 174
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	d8 01       	movw	r26, r16
     3e8:	18 96       	adiw	r26, 0x08	; 8
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	19 97       	sbiw	r26, 0x09	; 9
     3f0:	09 95       	icall
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	9a c0       	rjmp	.+308    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     3f8:	f7 01       	movw	r30, r14
     3fa:	80 85       	ldd	r24, Z+8	; 0x08
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	61 f4       	brne	.+24     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     400:	85 81       	ldd	r24, Z+5	; 0x05
     402:	79 de       	rcall	.-782    	; 0xf6 <a_ds3231_hex2bcd>
     404:	d7 01       	movw	r26, r14
     406:	19 96       	adiw	r26, 0x09	; 9
     408:	2c 91       	ld	r18, X
     40a:	b0 e2       	ldi	r27, 0x20	; 32
     40c:	2b 9f       	mul	r18, r27
     40e:	90 01       	movw	r18, r0
     410:	11 24       	eor	r1, r1
     412:	20 64       	ori	r18, 0x40	; 64
     414:	82 2b       	or	r24, r18
     416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     418:	f7 01       	movw	r30, r14
     41a:	85 81       	ldd	r24, Z+5	; 0x05
     41c:	6c de       	rcall	.-808    	; 0xf6 <a_ds3231_hex2bcd>
     41e:	48 2f       	mov	r20, r24
     420:	62 e0       	ldi	r22, 0x02	; 2
     422:	c8 01       	movw	r24, r16
     424:	3f de       	rcall	.-898    	; 0xa4 <a_ds3231_iic_write>
     426:	88 23       	and	r24, r24
     428:	69 f0       	breq	.+26     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     42a:	8c ec       	ldi	r24, 0xCC	; 204
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	d8 01       	movw	r26, r16
     434:	18 96       	adiw	r26, 0x08	; 8
     436:	ed 91       	ld	r30, X+
     438:	fc 91       	ld	r31, X
     43a:	19 97       	sbiw	r26, 0x09	; 9
     43c:	09 95       	icall
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	74 c0       	rjmp	.+232    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     444:	f7 01       	movw	r30, r14
     446:	83 81       	ldd	r24, Z+3	; 0x03
     448:	56 de       	rcall	.-852    	; 0xf6 <a_ds3231_hex2bcd>
     44a:	48 2f       	mov	r20, r24
     44c:	63 e0       	ldi	r22, 0x03	; 3
     44e:	c8 01       	movw	r24, r16
     450:	29 de       	rcall	.-942    	; 0xa4 <a_ds3231_iic_write>
     452:	88 23       	and	r24, r24
     454:	69 f0       	breq	.+26     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     456:	88 ee       	ldi	r24, 0xE8	; 232
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	9f 93       	push	r25
     45c:	8f 93       	push	r24
     45e:	d8 01       	movw	r26, r16
     460:	18 96       	adiw	r26, 0x08	; 8
     462:	ed 91       	ld	r30, X+
     464:	fc 91       	ld	r31, X
     466:	19 97       	sbiw	r26, 0x09	; 9
     468:	09 95       	icall
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	5e c0       	rjmp	.+188    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     470:	f7 01       	movw	r30, r14
     472:	84 81       	ldd	r24, Z+4	; 0x04
     474:	40 de       	rcall	.-896    	; 0xf6 <a_ds3231_hex2bcd>
     476:	48 2f       	mov	r20, r24
     478:	64 e0       	ldi	r22, 0x04	; 4
     47a:	c8 01       	movw	r24, r16
     47c:	13 de       	rcall	.-986    	; 0xa4 <a_ds3231_iic_write>
     47e:	88 23       	and	r24, r24
     480:	69 f0       	breq	.+26     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	d8 01       	movw	r26, r16
     48c:	18 96       	adiw	r26, 0x08	; 8
     48e:	ed 91       	ld	r30, X+
     490:	fc 91       	ld	r31, X
     492:	19 97       	sbiw	r26, 0x09	; 9
     494:	09 95       	icall
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	48 c0       	rjmp	.+144    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     49c:	f7 01       	movw	r30, r14
     49e:	80 81       	ld	r24, Z
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	6c 01       	movw	r12, r24
     4a4:	f6 ec       	ldi	r31, 0xC6	; 198
     4a6:	cf 1a       	sub	r12, r31
     4a8:	f7 e0       	ldi	r31, 0x07	; 7
     4aa:	df 0a       	sbc	r13, r31
     4ac:	24 e6       	ldi	r18, 0x64	; 100
     4ae:	c2 16       	cp	r12, r18
     4b0:	d1 04       	cpc	r13, r1
     4b2:	38 f0       	brcs	.+14     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4b4:	6c 01       	movw	r12, r24
     4b6:	aa e2       	ldi	r26, 0x2A	; 42
     4b8:	ca 1a       	sub	r12, r26
     4ba:	a8 e0       	ldi	r26, 0x08	; 8
     4bc:	da 0a       	sbc	r13, r26
     4be:	d1 e0       	ldi	r29, 0x01	; 1
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c2:	d0 e0       	ldi	r29, 0x00	; 0
     4c4:	f7 01       	movw	r30, r14
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	16 de       	rcall	.-980    	; 0xf6 <a_ds3231_hex2bcd>
     4ca:	d7 95       	ror	r29
     4cc:	dd 27       	eor	r29, r29
     4ce:	d7 95       	ror	r29
     4d0:	4d 2f       	mov	r20, r29
     4d2:	48 2b       	or	r20, r24
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	c8 01       	movw	r24, r16
     4d8:	e5 dd       	rcall	.-1078   	; 0xa4 <a_ds3231_iic_write>
     4da:	88 23       	and	r24, r24
     4dc:	69 f0       	breq	.+26     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4de:	80 e2       	ldi	r24, 0x20	; 32
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	d8 01       	movw	r26, r16
     4e8:	18 96       	adiw	r26, 0x08	; 8
     4ea:	ed 91       	ld	r30, X+
     4ec:	fc 91       	ld	r31, X
     4ee:	19 97       	sbiw	r26, 0x09	; 9
     4f0:	09 95       	icall
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	1a c0       	rjmp	.+52     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     4f8:	8c 2d       	mov	r24, r12
     4fa:	fd dd       	rcall	.-1030   	; 0xf6 <a_ds3231_hex2bcd>
     4fc:	48 2f       	mov	r20, r24
     4fe:	66 e0       	ldi	r22, 0x06	; 6
     500:	c8 01       	movw	r24, r16
     502:	d0 dd       	rcall	.-1120   	; 0xa4 <a_ds3231_iic_write>
     504:	88 23       	and	r24, r24
     506:	89 f0       	breq	.+34     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     508:	89 e4       	ldi	r24, 0x49	; 73
     50a:	93 e0       	ldi	r25, 0x03	; 3
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	d8 01       	movw	r26, r16
     512:	18 96       	adiw	r26, 0x08	; 8
     514:	ed 91       	ld	r30, X+
     516:	fc 91       	ld	r31, X
     518:	19 97       	sbiw	r26, 0x09	; 9
     51a:	09 95       	icall
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	05 c0       	rjmp	.+10     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     522:	c2 e0       	ldi	r28, 0x02	; 2
     524:	03 c0       	rjmp	.+6      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     526:	c3 e0       	ldi	r28, 0x03	; 3
     528:	01 c0       	rjmp	.+2      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     52a:	c0 e0       	ldi	r28, 0x00	; 0
     52c:	8c 2f       	mov	r24, r28
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	08 95       	ret

00000540 <ds3231_get_time>:
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	27 97       	sbiw	r28, 0x07	; 7
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	09 f4       	brne	.+2      	; 0x564 <ds3231_get_time+0x24>
     562:	79 c0       	rjmp	.+242    	; 0x656 <ds3231_get_time+0x116>
     564:	dc 01       	movw	r26, r24
     566:	1e 96       	adiw	r26, 0x0e	; 14
     568:	1c 91       	ld	r17, X
     56a:	1e 97       	sbiw	r26, 0x0e	; 14
     56c:	11 30       	cpi	r17, 0x01	; 1
     56e:	09 f0       	breq	.+2      	; 0x572 <ds3231_get_time+0x32>
     570:	74 c0       	rjmp	.+232    	; 0x65a <ds3231_get_time+0x11a>
     572:	6b 01       	movw	r12, r22
     574:	7c 01       	movw	r14, r24
     576:	67 2b       	or	r22, r23
     578:	69 f4       	brne	.+26     	; 0x594 <ds3231_get_time+0x54>
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	9f 93       	push	r25
     580:	8f 93       	push	r24
     582:	18 96       	adiw	r26, 0x08	; 8
     584:	ed 91       	ld	r30, X+
     586:	fc 91       	ld	r31, X
     588:	19 97       	sbiw	r26, 0x09	; 9
     58a:	09 95       	icall
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	12 e0       	ldi	r17, 0x02	; 2
     592:	64 c0       	rjmp	.+200    	; 0x65c <ds3231_get_time+0x11c>
     594:	ae 01       	movw	r20, r28
     596:	4f 5f       	subi	r20, 0xFF	; 255
     598:	5f 4f       	sbci	r21, 0xFF	; 255
     59a:	87 e0       	ldi	r24, 0x07	; 7
     59c:	fa 01       	movw	r30, r20
     59e:	11 92       	st	Z+, r1
     5a0:	8a 95       	dec	r24
     5a2:	e9 f7       	brne	.-6      	; 0x59e <ds3231_get_time+0x5e>
     5a4:	27 e0       	ldi	r18, 0x07	; 7
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	cd 01       	movw	r24, r26
     5aa:	97 dd       	rcall	.-1234   	; 0xda <a_ds3231_iic_multiple_read>
     5ac:	88 23       	and	r24, r24
     5ae:	69 f0       	breq	.+26     	; 0x5ca <ds3231_get_time+0x8a>
     5b0:	85 e6       	ldi	r24, 0x65	; 101
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	d7 01       	movw	r26, r14
     5ba:	18 96       	adiw	r26, 0x08	; 8
     5bc:	ed 91       	ld	r30, X+
     5be:	fc 91       	ld	r31, X
     5c0:	19 97       	sbiw	r26, 0x09	; 9
     5c2:	09 95       	icall
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	49 c0       	rjmp	.+146    	; 0x65c <ds3231_get_time+0x11c>
     5ca:	8f 81       	ldd	r24, Y+7	; 0x07
     5cc:	a7 dd       	rcall	.-1202   	; 0x11c <a_ds3231_bcd2hex>
     5ce:	9e 81       	ldd	r25, Y+6	; 0x06
     5d0:	49 2f       	mov	r20, r25
     5d2:	44 1f       	adc	r20, r20
     5d4:	44 27       	eor	r20, r20
     5d6:	44 1f       	adc	r20, r20
     5d8:	28 2f       	mov	r18, r24
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	2a 53       	subi	r18, 0x3A	; 58
     5de:	38 4f       	sbci	r19, 0xF8	; 248
     5e0:	b4 e6       	ldi	r27, 0x64	; 100
     5e2:	4b 9f       	mul	r20, r27
     5e4:	20 0d       	add	r18, r0
     5e6:	31 1d       	adc	r19, r1
     5e8:	11 24       	eor	r1, r1
     5ea:	f6 01       	movw	r30, r12
     5ec:	31 83       	std	Z+1, r19	; 0x01
     5ee:	20 83       	st	Z, r18
     5f0:	89 2f       	mov	r24, r25
     5f2:	8f 71       	andi	r24, 0x1F	; 31
     5f4:	93 dd       	rcall	.-1242   	; 0x11c <a_ds3231_bcd2hex>
     5f6:	d6 01       	movw	r26, r12
     5f8:	12 96       	adiw	r26, 0x02	; 2
     5fa:	8c 93       	st	X, r24
     5fc:	8c 81       	ldd	r24, Y+4	; 0x04
     5fe:	8e dd       	rcall	.-1252   	; 0x11c <a_ds3231_bcd2hex>
     600:	f6 01       	movw	r30, r12
     602:	83 83       	std	Z+3, r24	; 0x03
     604:	8d 81       	ldd	r24, Y+5	; 0x05
     606:	8a dd       	rcall	.-1260   	; 0x11c <a_ds3231_bcd2hex>
     608:	d6 01       	movw	r26, r12
     60a:	14 96       	adiw	r26, 0x04	; 4
     60c:	8c 93       	st	X, r24
     60e:	14 97       	sbiw	r26, 0x04	; 4
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	85 fb       	bst	r24, 5
     614:	99 27       	eor	r25, r25
     616:	90 f9       	bld	r25, 0
     618:	19 96       	adiw	r26, 0x09	; 9
     61a:	9c 93       	st	X, r25
     61c:	19 97       	sbiw	r26, 0x09	; 9
     61e:	86 fb       	bst	r24, 6
     620:	99 27       	eor	r25, r25
     622:	90 f9       	bld	r25, 0
     624:	18 96       	adiw	r26, 0x08	; 8
     626:	9c 93       	st	X, r25
     628:	91 30       	cpi	r25, 0x01	; 1
     62a:	29 f4       	brne	.+10     	; 0x636 <ds3231_get_time+0xf6>
     62c:	8f 71       	andi	r24, 0x1F	; 31
     62e:	76 dd       	rcall	.-1300   	; 0x11c <a_ds3231_bcd2hex>
     630:	f6 01       	movw	r30, r12
     632:	85 83       	std	Z+5, r24	; 0x05
     634:	05 c0       	rjmp	.+10     	; 0x640 <ds3231_get_time+0x100>
     636:	8f 73       	andi	r24, 0x3F	; 63
     638:	71 dd       	rcall	.-1310   	; 0x11c <a_ds3231_bcd2hex>
     63a:	d6 01       	movw	r26, r12
     63c:	15 96       	adiw	r26, 0x05	; 5
     63e:	8c 93       	st	X, r24
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	6c dd       	rcall	.-1320   	; 0x11c <a_ds3231_bcd2hex>
     644:	f6 01       	movw	r30, r12
     646:	86 83       	std	Z+6, r24	; 0x06
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	68 dd       	rcall	.-1328   	; 0x11c <a_ds3231_bcd2hex>
     64c:	d6 01       	movw	r26, r12
     64e:	17 96       	adiw	r26, 0x07	; 7
     650:	8c 93       	st	X, r24
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	03 c0       	rjmp	.+6      	; 0x65c <ds3231_get_time+0x11c>
     656:	12 e0       	ldi	r17, 0x02	; 2
     658:	01 c0       	rjmp	.+2      	; 0x65c <ds3231_get_time+0x11c>
     65a:	13 e0       	ldi	r17, 0x03	; 3
     65c:	81 2f       	mov	r24, r17
     65e:	27 96       	adiw	r28, 0x07	; 7
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	08 95       	ret

0000067a <ds3231_set_oscillator>:
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	1f 92       	push	r1
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	b9 f1       	breq	.+110    	; 0x6fe <ds3231_set_oscillator+0x84>
     690:	dc 01       	movw	r26, r24
     692:	1e 96       	adiw	r26, 0x0e	; 14
     694:	1c 91       	ld	r17, X
     696:	11 30       	cpi	r17, 0x01	; 1
     698:	a1 f5       	brne	.+104    	; 0x702 <ds3231_set_oscillator+0x88>
     69a:	06 2f       	mov	r16, r22
     69c:	7c 01       	movw	r14, r24
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	ae 01       	movw	r20, r28
     6a2:	4f 5f       	subi	r20, 0xFF	; 255
     6a4:	5f 4f       	sbci	r21, 0xFF	; 255
     6a6:	6e e0       	ldi	r22, 0x0E	; 14
     6a8:	18 dd       	rcall	.-1488   	; 0xda <a_ds3231_iic_multiple_read>
     6aa:	88 23       	and	r24, r24
     6ac:	69 f0       	breq	.+26     	; 0x6c8 <ds3231_set_oscillator+0x4e>
     6ae:	8f e7       	ldi	r24, 0x7F	; 127
     6b0:	94 e0       	ldi	r25, 0x04	; 4
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	d7 01       	movw	r26, r14
     6b8:	18 96       	adiw	r26, 0x08	; 8
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	19 97       	sbiw	r26, 0x09	; 9
     6c0:	09 95       	icall
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	20 c0       	rjmp	.+64     	; 0x708 <ds3231_set_oscillator+0x8e>
     6c8:	49 81       	ldd	r20, Y+1	; 0x01
     6ca:	4f 77       	andi	r20, 0x7F	; 127
     6cc:	00 23       	and	r16, r16
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <ds3231_set_oscillator+0x5a>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <ds3231_set_oscillator+0x5c>
     6d4:	80 e8       	ldi	r24, 0x80	; 128
     6d6:	48 2b       	or	r20, r24
     6d8:	49 83       	std	Y+1, r20	; 0x01
     6da:	6e e0       	ldi	r22, 0x0E	; 14
     6dc:	c7 01       	movw	r24, r14
     6de:	e2 dc       	rcall	.-1596   	; 0xa4 <a_ds3231_iic_write>
     6e0:	88 23       	and	r24, r24
     6e2:	89 f0       	breq	.+34     	; 0x706 <ds3231_set_oscillator+0x8c>
     6e4:	8d e9       	ldi	r24, 0x9D	; 157
     6e6:	94 e0       	ldi	r25, 0x04	; 4
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	d7 01       	movw	r26, r14
     6ee:	18 96       	adiw	r26, 0x08	; 8
     6f0:	ed 91       	ld	r30, X+
     6f2:	fc 91       	ld	r31, X
     6f4:	19 97       	sbiw	r26, 0x09	; 9
     6f6:	09 95       	icall
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <ds3231_set_oscillator+0x8e>
     6fe:	12 e0       	ldi	r17, 0x02	; 2
     700:	03 c0       	rjmp	.+6      	; 0x708 <ds3231_set_oscillator+0x8e>
     702:	13 e0       	ldi	r17, 0x03	; 3
     704:	01 c0       	rjmp	.+2      	; 0x708 <ds3231_set_oscillator+0x8e>
     706:	10 e0       	ldi	r17, 0x00	; 0
     708:	81 2f       	mov	r24, r17
     70a:	0f 90       	pop	r0
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	08 95       	ret

0000071a <ds3231_set_alarm_interrupt>:
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	1f 92       	push	r1
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	00 97       	sbiw	r24, 0x00	; 0
     730:	09 f4       	brne	.+2      	; 0x734 <ds3231_set_alarm_interrupt+0x1a>
     732:	44 c0       	rjmp	.+136    	; 0x7bc <ds3231_set_alarm_interrupt+0xa2>
     734:	dc 01       	movw	r26, r24
     736:	1e 96       	adiw	r26, 0x0e	; 14
     738:	1c 91       	ld	r17, X
     73a:	11 30       	cpi	r17, 0x01	; 1
     73c:	09 f0       	breq	.+2      	; 0x740 <ds3231_set_alarm_interrupt+0x26>
     73e:	40 c0       	rjmp	.+128    	; 0x7c0 <ds3231_set_alarm_interrupt+0xa6>
     740:	04 2f       	mov	r16, r20
     742:	d6 2e       	mov	r13, r22
     744:	7c 01       	movw	r14, r24
     746:	21 e0       	ldi	r18, 0x01	; 1
     748:	ae 01       	movw	r20, r28
     74a:	4f 5f       	subi	r20, 0xFF	; 255
     74c:	5f 4f       	sbci	r21, 0xFF	; 255
     74e:	6e e0       	ldi	r22, 0x0E	; 14
     750:	c4 dc       	rcall	.-1656   	; 0xda <a_ds3231_iic_multiple_read>
     752:	88 23       	and	r24, r24
     754:	69 f0       	breq	.+26     	; 0x770 <ds3231_set_alarm_interrupt+0x56>
     756:	8f e7       	ldi	r24, 0x7F	; 127
     758:	94 e0       	ldi	r25, 0x04	; 4
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	d7 01       	movw	r26, r14
     760:	18 96       	adiw	r26, 0x08	; 8
     762:	ed 91       	ld	r30, X+
     764:	fc 91       	ld	r31, X
     766:	19 97       	sbiw	r26, 0x09	; 9
     768:	09 95       	icall
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	2b c0       	rjmp	.+86     	; 0x7c6 <ds3231_set_alarm_interrupt+0xac>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0d 2c       	mov	r0, r13
     776:	02 c0       	rjmp	.+4      	; 0x77c <ds3231_set_alarm_interrupt+0x62>
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	0a 94       	dec	r0
     77e:	e2 f7       	brpl	.-8      	; 0x778 <ds3231_set_alarm_interrupt+0x5e>
     780:	80 95       	com	r24
     782:	49 81       	ldd	r20, Y+1	; 0x01
     784:	48 23       	and	r20, r24
     786:	80 2f       	mov	r24, r16
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	02 c0       	rjmp	.+4      	; 0x790 <ds3231_set_alarm_interrupt+0x76>
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	da 94       	dec	r13
     792:	e2 f7       	brpl	.-8      	; 0x78c <ds3231_set_alarm_interrupt+0x72>
     794:	48 2b       	or	r20, r24
     796:	49 83       	std	Y+1, r20	; 0x01
     798:	6e e0       	ldi	r22, 0x0E	; 14
     79a:	c7 01       	movw	r24, r14
     79c:	83 dc       	rcall	.-1786   	; 0xa4 <a_ds3231_iic_write>
     79e:	88 23       	and	r24, r24
     7a0:	89 f0       	breq	.+34     	; 0x7c4 <ds3231_set_alarm_interrupt+0xaa>
     7a2:	8d e9       	ldi	r24, 0x9D	; 157
     7a4:	94 e0       	ldi	r25, 0x04	; 4
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	d7 01       	movw	r26, r14
     7ac:	18 96       	adiw	r26, 0x08	; 8
     7ae:	ed 91       	ld	r30, X+
     7b0:	fc 91       	ld	r31, X
     7b2:	19 97       	sbiw	r26, 0x09	; 9
     7b4:	09 95       	icall
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <ds3231_set_alarm_interrupt+0xac>
     7bc:	12 e0       	ldi	r17, 0x02	; 2
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <ds3231_set_alarm_interrupt+0xac>
     7c0:	13 e0       	ldi	r17, 0x03	; 3
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <ds3231_set_alarm_interrupt+0xac>
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	81 2f       	mov	r24, r17
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	df 90       	pop	r13
     7d8:	08 95       	ret

000007da <ds3231_set_pin>:
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	1f 92       	push	r1
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	a9 f1       	breq	.+106    	; 0x85a <ds3231_set_pin+0x80>
     7f0:	dc 01       	movw	r26, r24
     7f2:	1e 96       	adiw	r26, 0x0e	; 14
     7f4:	1c 91       	ld	r17, X
     7f6:	11 30       	cpi	r17, 0x01	; 1
     7f8:	91 f5       	brne	.+100    	; 0x85e <ds3231_set_pin+0x84>
     7fa:	06 2f       	mov	r16, r22
     7fc:	7c 01       	movw	r14, r24
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	ae 01       	movw	r20, r28
     802:	4f 5f       	subi	r20, 0xFF	; 255
     804:	5f 4f       	sbci	r21, 0xFF	; 255
     806:	6e e0       	ldi	r22, 0x0E	; 14
     808:	68 dc       	rcall	.-1840   	; 0xda <a_ds3231_iic_multiple_read>
     80a:	88 23       	and	r24, r24
     80c:	69 f0       	breq	.+26     	; 0x828 <ds3231_set_pin+0x4e>
     80e:	8f e7       	ldi	r24, 0x7F	; 127
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	d7 01       	movw	r26, r14
     818:	18 96       	adiw	r26, 0x08	; 8
     81a:	ed 91       	ld	r30, X+
     81c:	fc 91       	ld	r31, X
     81e:	19 97       	sbiw	r26, 0x09	; 9
     820:	09 95       	icall
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	1e c0       	rjmp	.+60     	; 0x864 <ds3231_set_pin+0x8a>
     828:	49 81       	ldd	r20, Y+1	; 0x01
     82a:	4b 7f       	andi	r20, 0xFB	; 251
     82c:	60 2f       	mov	r22, r16
     82e:	66 0f       	add	r22, r22
     830:	66 0f       	add	r22, r22
     832:	46 2b       	or	r20, r22
     834:	49 83       	std	Y+1, r20	; 0x01
     836:	6e e0       	ldi	r22, 0x0E	; 14
     838:	c7 01       	movw	r24, r14
     83a:	34 dc       	rcall	.-1944   	; 0xa4 <a_ds3231_iic_write>
     83c:	88 23       	and	r24, r24
     83e:	89 f0       	breq	.+34     	; 0x862 <ds3231_set_pin+0x88>
     840:	8d e9       	ldi	r24, 0x9D	; 157
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	d7 01       	movw	r26, r14
     84a:	18 96       	adiw	r26, 0x08	; 8
     84c:	ed 91       	ld	r30, X+
     84e:	fc 91       	ld	r31, X
     850:	19 97       	sbiw	r26, 0x09	; 9
     852:	09 95       	icall
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	05 c0       	rjmp	.+10     	; 0x864 <ds3231_set_pin+0x8a>
     85a:	12 e0       	ldi	r17, 0x02	; 2
     85c:	03 c0       	rjmp	.+6      	; 0x864 <ds3231_set_pin+0x8a>
     85e:	13 e0       	ldi	r17, 0x03	; 3
     860:	01 c0       	rjmp	.+2      	; 0x864 <ds3231_set_pin+0x8a>
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	81 2f       	mov	r24, r17
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret

00000876 <ds3231_set_square_wave>:
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	b1 f1       	breq	.+108    	; 0x8f8 <ds3231_set_square_wave+0x82>
     88c:	dc 01       	movw	r26, r24
     88e:	1e 96       	adiw	r26, 0x0e	; 14
     890:	1c 91       	ld	r17, X
     892:	11 30       	cpi	r17, 0x01	; 1
     894:	99 f5       	brne	.+102    	; 0x8fc <ds3231_set_square_wave+0x86>
     896:	06 2f       	mov	r16, r22
     898:	7c 01       	movw	r14, r24
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	ae 01       	movw	r20, r28
     89e:	4f 5f       	subi	r20, 0xFF	; 255
     8a0:	5f 4f       	sbci	r21, 0xFF	; 255
     8a2:	6e e0       	ldi	r22, 0x0E	; 14
     8a4:	1a dc       	rcall	.-1996   	; 0xda <a_ds3231_iic_multiple_read>
     8a6:	88 23       	and	r24, r24
     8a8:	69 f0       	breq	.+26     	; 0x8c4 <ds3231_set_square_wave+0x4e>
     8aa:	8f e7       	ldi	r24, 0x7F	; 127
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	d7 01       	movw	r26, r14
     8b4:	18 96       	adiw	r26, 0x08	; 8
     8b6:	ed 91       	ld	r30, X+
     8b8:	fc 91       	ld	r31, X
     8ba:	19 97       	sbiw	r26, 0x09	; 9
     8bc:	09 95       	icall
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	1f c0       	rjmp	.+62     	; 0x902 <__stack+0x3>
     8c4:	49 81       	ldd	r20, Y+1	; 0x01
     8c6:	4f 7b       	andi	r20, 0xBF	; 191
     8c8:	b0 e4       	ldi	r27, 0x40	; 64
     8ca:	0b 9f       	mul	r16, r27
     8cc:	c0 01       	movw	r24, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	48 2b       	or	r20, r24
     8d2:	49 83       	std	Y+1, r20	; 0x01
     8d4:	6e e0       	ldi	r22, 0x0E	; 14
     8d6:	c7 01       	movw	r24, r14
     8d8:	e5 db       	rcall	.-2102   	; 0xa4 <a_ds3231_iic_write>
     8da:	88 23       	and	r24, r24
     8dc:	89 f0       	breq	.+34     	; 0x900 <__stack+0x1>
     8de:	8d e9       	ldi	r24, 0x9D	; 157
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	9f 93       	push	r25
     8e4:	8f 93       	push	r24
     8e6:	d7 01       	movw	r26, r14
     8e8:	18 96       	adiw	r26, 0x08	; 8
     8ea:	ed 91       	ld	r30, X+
     8ec:	fc 91       	ld	r31, X
     8ee:	19 97       	sbiw	r26, 0x09	; 9
     8f0:	09 95       	icall
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	05 c0       	rjmp	.+10     	; 0x902 <__stack+0x3>
     8f8:	12 e0       	ldi	r17, 0x02	; 2
     8fa:	03 c0       	rjmp	.+6      	; 0x902 <__stack+0x3>
     8fc:	13 e0       	ldi	r17, 0x03	; 3
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__stack+0x3>
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	81 2f       	mov	r24, r17
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <ds3231_set_aging_offset>:
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	c1 f0       	breq	.+48     	; 0x94e <ds3231_set_aging_offset+0x3a>
     91e:	dc 01       	movw	r26, r24
     920:	1e 96       	adiw	r26, 0x0e	; 14
     922:	cc 91       	ld	r28, X
     924:	c1 30       	cpi	r28, 0x01	; 1
     926:	a9 f4       	brne	.+42     	; 0x952 <ds3231_set_aging_offset+0x3e>
     928:	46 2f       	mov	r20, r22
     92a:	8c 01       	movw	r16, r24
     92c:	60 e1       	ldi	r22, 0x10	; 16
     92e:	ba db       	rcall	.-2188   	; 0xa4 <a_ds3231_iic_write>
     930:	88 23       	and	r24, r24
     932:	89 f0       	breq	.+34     	; 0x956 <ds3231_set_aging_offset+0x42>
     934:	82 e1       	ldi	r24, 0x12	; 18
     936:	95 e0       	ldi	r25, 0x05	; 5
     938:	9f 93       	push	r25
     93a:	8f 93       	push	r24
     93c:	d8 01       	movw	r26, r16
     93e:	18 96       	adiw	r26, 0x08	; 8
     940:	ed 91       	ld	r30, X+
     942:	fc 91       	ld	r31, X
     944:	19 97       	sbiw	r26, 0x09	; 9
     946:	09 95       	icall
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	05 c0       	rjmp	.+10     	; 0x958 <ds3231_set_aging_offset+0x44>
     94e:	c2 e0       	ldi	r28, 0x02	; 2
     950:	03 c0       	rjmp	.+6      	; 0x958 <ds3231_set_aging_offset+0x44>
     952:	c3 e0       	ldi	r28, 0x03	; 3
     954:	01 c0       	rjmp	.+2      	; 0x958 <ds3231_set_aging_offset+0x44>
     956:	c0 e0       	ldi	r28, 0x00	; 0
     958:	8c 2f       	mov	r24, r28
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	08 95       	ret

00000962 <ds3231_aging_offset_convert_to_register>:
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	81 f0       	breq	.+32     	; 0x98a <ds3231_aging_offset_convert_to_register+0x28>
     96a:	fc 01       	movw	r30, r24
     96c:	86 85       	ldd	r24, Z+14	; 0x0e
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	71 f4       	brne	.+28     	; 0x98e <ds3231_aging_offset_convert_to_register+0x2c>
     972:	e9 01       	movw	r28, r18
     974:	cb 01       	movw	r24, r22
     976:	ba 01       	movw	r22, r20
     978:	2f e8       	ldi	r18, 0x8F	; 143
     97a:	32 ec       	ldi	r19, 0xC2	; 194
     97c:	45 ef       	ldi	r20, 0xF5	; 245
     97e:	5d e3       	ldi	r21, 0x3D	; 61
     980:	44 d5       	rcall	.+2696   	; 0x140a <__divsf3>
     982:	ab d5       	rcall	.+2902   	; 0x14da <__fixsfsi>
     984:	68 83       	st	Y, r22
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	03 c0       	rjmp	.+6      	; 0x990 <ds3231_aging_offset_convert_to_register+0x2e>
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	01 c0       	rjmp	.+2      	; 0x990 <ds3231_aging_offset_convert_to_register+0x2e>
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <ds3231_init>:
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	1f 92       	push	r1
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	09 f4       	brne	.+2      	; 0x9ac <ds3231_init+0x16>
     9aa:	d1 c0       	rjmp	.+418    	; 0xb4e <ds3231_init+0x1b8>
     9ac:	dc 01       	movw	r26, r24
     9ae:	18 96       	adiw	r26, 0x08	; 8
     9b0:	2d 91       	ld	r18, X+
     9b2:	3c 91       	ld	r19, X
     9b4:	19 97       	sbiw	r26, 0x09	; 9
     9b6:	21 15       	cp	r18, r1
     9b8:	31 05       	cpc	r19, r1
     9ba:	09 f4       	brne	.+2      	; 0x9be <ds3231_init+0x28>
     9bc:	cc c0       	rjmp	.+408    	; 0xb56 <ds3231_init+0x1c0>
     9be:	8c 01       	movw	r16, r24
     9c0:	ed 91       	ld	r30, X+
     9c2:	fc 91       	ld	r31, X
     9c4:	30 97       	sbiw	r30, 0x00	; 0
     9c6:	69 f4       	brne	.+26     	; 0x9e2 <ds3231_init+0x4c>
     9c8:	8d e4       	ldi	r24, 0x4D	; 77
     9ca:	95 e0       	ldi	r25, 0x05	; 5
     9cc:	9f 93       	push	r25
     9ce:	8f 93       	push	r24
     9d0:	f9 01       	movw	r30, r18
     9d2:	09 95       	icall
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 2e       	mov	r0, r31
     9da:	f3 e0       	ldi	r31, 0x03	; 3
     9dc:	ff 2e       	mov	r15, r31
     9de:	f0 2d       	mov	r31, r0
     9e0:	be c0       	rjmp	.+380    	; 0xb5e <ds3231_init+0x1c8>
     9e2:	dc 01       	movw	r26, r24
     9e4:	12 96       	adiw	r26, 0x02	; 2
     9e6:	8d 91       	ld	r24, X+
     9e8:	9c 91       	ld	r25, X
     9ea:	13 97       	sbiw	r26, 0x03	; 3
     9ec:	89 2b       	or	r24, r25
     9ee:	69 f4       	brne	.+26     	; 0xa0a <ds3231_init+0x74>
     9f0:	88 e6       	ldi	r24, 0x68	; 104
     9f2:	95 e0       	ldi	r25, 0x05	; 5
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	f9 01       	movw	r30, r18
     9fa:	09 95       	icall
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 2e       	mov	r0, r31
     a02:	f3 e0       	ldi	r31, 0x03	; 3
     a04:	ff 2e       	mov	r15, r31
     a06:	f0 2d       	mov	r31, r0
     a08:	aa c0       	rjmp	.+340    	; 0xb5e <ds3231_init+0x1c8>
     a0a:	d8 01       	movw	r26, r16
     a0c:	14 96       	adiw	r26, 0x04	; 4
     a0e:	8d 91       	ld	r24, X+
     a10:	9c 91       	ld	r25, X
     a12:	15 97       	sbiw	r26, 0x05	; 5
     a14:	89 2b       	or	r24, r25
     a16:	69 f4       	brne	.+26     	; 0xa32 <ds3231_init+0x9c>
     a18:	85 e8       	ldi	r24, 0x85	; 133
     a1a:	95 e0       	ldi	r25, 0x05	; 5
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	f9 01       	movw	r30, r18
     a22:	09 95       	icall
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 2e       	mov	r0, r31
     a2a:	f3 e0       	ldi	r31, 0x03	; 3
     a2c:	ff 2e       	mov	r15, r31
     a2e:	f0 2d       	mov	r31, r0
     a30:	96 c0       	rjmp	.+300    	; 0xb5e <ds3231_init+0x1c8>
     a32:	d8 01       	movw	r26, r16
     a34:	16 96       	adiw	r26, 0x06	; 6
     a36:	8d 91       	ld	r24, X+
     a38:	9c 91       	ld	r25, X
     a3a:	17 97       	sbiw	r26, 0x07	; 7
     a3c:	89 2b       	or	r24, r25
     a3e:	69 f4       	brne	.+26     	; 0xa5a <ds3231_init+0xc4>
     a40:	81 ea       	ldi	r24, 0xA1	; 161
     a42:	95 e0       	ldi	r25, 0x05	; 5
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	f9 01       	movw	r30, r18
     a4a:	09 95       	icall
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 2e       	mov	r0, r31
     a52:	f3 e0       	ldi	r31, 0x03	; 3
     a54:	ff 2e       	mov	r15, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	82 c0       	rjmp	.+260    	; 0xb5e <ds3231_init+0x1c8>
     a5a:	d8 01       	movw	r26, r16
     a5c:	1c 96       	adiw	r26, 0x0c	; 12
     a5e:	8d 91       	ld	r24, X+
     a60:	9c 91       	ld	r25, X
     a62:	1d 97       	sbiw	r26, 0x0d	; 13
     a64:	89 2b       	or	r24, r25
     a66:	69 f4       	brne	.+26     	; 0xa82 <ds3231_init+0xec>
     a68:	8c eb       	ldi	r24, 0xBC	; 188
     a6a:	95 e0       	ldi	r25, 0x05	; 5
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	f9 01       	movw	r30, r18
     a72:	09 95       	icall
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 2e       	mov	r0, r31
     a7a:	f3 e0       	ldi	r31, 0x03	; 3
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	6e c0       	rjmp	.+220    	; 0xb5e <ds3231_init+0x1c8>
     a82:	d8 01       	movw	r26, r16
     a84:	1a 96       	adiw	r26, 0x0a	; 10
     a86:	8d 91       	ld	r24, X+
     a88:	9c 91       	ld	r25, X
     a8a:	1b 97       	sbiw	r26, 0x0b	; 11
     a8c:	89 2b       	or	r24, r25
     a8e:	69 f4       	brne	.+26     	; 0xaaa <ds3231_init+0x114>
     a90:	87 ed       	ldi	r24, 0xD7	; 215
     a92:	95 e0       	ldi	r25, 0x05	; 5
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	f9 01       	movw	r30, r18
     a9a:	09 95       	icall
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 2e       	mov	r0, r31
     aa2:	f3 e0       	ldi	r31, 0x03	; 3
     aa4:	ff 2e       	mov	r15, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	5a c0       	rjmp	.+180    	; 0xb5e <ds3231_init+0x1c8>
     aaa:	09 95       	icall
     aac:	f8 2e       	mov	r15, r24
     aae:	88 23       	and	r24, r24
     ab0:	79 f0       	breq	.+30     	; 0xad0 <ds3231_init+0x13a>
     ab2:	8a ef       	ldi	r24, 0xFA	; 250
     ab4:	95 e0       	ldi	r25, 0x05	; 5
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	d8 01       	movw	r26, r16
     abc:	18 96       	adiw	r26, 0x08	; 8
     abe:	ed 91       	ld	r30, X+
     ac0:	fc 91       	ld	r31, X
     ac2:	19 97       	sbiw	r26, 0x09	; 9
     ac4:	09 95       	icall
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	ff 24       	eor	r15, r15
     acc:	f3 94       	inc	r15
     ace:	47 c0       	rjmp	.+142    	; 0xb5e <ds3231_init+0x1c8>
     ad0:	21 e0       	ldi	r18, 0x01	; 1
     ad2:	ae 01       	movw	r20, r28
     ad4:	4f 5f       	subi	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	6f e0       	ldi	r22, 0x0F	; 15
     ada:	c8 01       	movw	r24, r16
     adc:	fe da       	rcall	.-2564   	; 0xda <a_ds3231_iic_multiple_read>
     ade:	88 23       	and	r24, r24
     ae0:	a9 f0       	breq	.+42     	; 0xb0c <ds3231_init+0x176>
     ae2:	8c eb       	ldi	r24, 0xBC	; 188
     ae4:	94 e0       	ldi	r25, 0x04	; 4
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	d8 01       	movw	r26, r16
     aec:	18 96       	adiw	r26, 0x08	; 8
     aee:	ed 91       	ld	r30, X+
     af0:	fc 91       	ld	r31, X
     af2:	19 97       	sbiw	r26, 0x09	; 9
     af4:	09 95       	icall
     af6:	d8 01       	movw	r26, r16
     af8:	12 96       	adiw	r26, 0x02	; 2
     afa:	ed 91       	ld	r30, X+
     afc:	fc 91       	ld	r31, X
     afe:	13 97       	sbiw	r26, 0x03	; 3
     b00:	09 95       	icall
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	ff 24       	eor	r15, r15
     b08:	f3 94       	inc	r15
     b0a:	29 c0       	rjmp	.+82     	; 0xb5e <ds3231_init+0x1c8>
     b0c:	49 81       	ldd	r20, Y+1	; 0x01
     b0e:	4f 77       	andi	r20, 0x7F	; 127
     b10:	49 83       	std	Y+1, r20	; 0x01
     b12:	6f e0       	ldi	r22, 0x0F	; 15
     b14:	c8 01       	movw	r24, r16
     b16:	c6 da       	rcall	.-2676   	; 0xa4 <a_ds3231_iic_write>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <ds3231_init+0x1b0>
     b1c:	84 e1       	ldi	r24, 0x14	; 20
     b1e:	96 e0       	ldi	r25, 0x06	; 6
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	d8 01       	movw	r26, r16
     b26:	18 96       	adiw	r26, 0x08	; 8
     b28:	ed 91       	ld	r30, X+
     b2a:	fc 91       	ld	r31, X
     b2c:	19 97       	sbiw	r26, 0x09	; 9
     b2e:	09 95       	icall
     b30:	d8 01       	movw	r26, r16
     b32:	12 96       	adiw	r26, 0x02	; 2
     b34:	ed 91       	ld	r30, X+
     b36:	fc 91       	ld	r31, X
     b38:	13 97       	sbiw	r26, 0x03	; 3
     b3a:	09 95       	icall
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	ff 24       	eor	r15, r15
     b42:	f3 94       	inc	r15
     b44:	0c c0       	rjmp	.+24     	; 0xb5e <ds3231_init+0x1c8>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	f8 01       	movw	r30, r16
     b4a:	86 87       	std	Z+14, r24	; 0x0e
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <ds3231_init+0x1c8>
     b4e:	68 94       	set
     b50:	ff 24       	eor	r15, r15
     b52:	f1 f8       	bld	r15, 1
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <ds3231_init+0x1c8>
     b56:	0f 2e       	mov	r0, r31
     b58:	f3 e0       	ldi	r31, 0x03	; 3
     b5a:	ff 2e       	mov	r15, r31
     b5c:	f0 2d       	mov	r31, r0
     b5e:	8f 2d       	mov	r24, r15
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	08 95       	ret

00000b6e <ds3231_deinit>:
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	c1 f0       	breq	.+48     	; 0xba8 <ds3231_deinit+0x3a>
     b78:	fc 01       	movw	r30, r24
     b7a:	16 85       	ldd	r17, Z+14	; 0x0e
     b7c:	11 30       	cpi	r17, 0x01	; 1
     b7e:	b1 f4       	brne	.+44     	; 0xbac <ds3231_deinit+0x3e>
     b80:	ec 01       	movw	r28, r24
     b82:	02 80       	ldd	r0, Z+2	; 0x02
     b84:	f3 81       	ldd	r31, Z+3	; 0x03
     b86:	e0 2d       	mov	r30, r0
     b88:	09 95       	icall
     b8a:	88 23       	and	r24, r24
     b8c:	59 f0       	breq	.+22     	; 0xba4 <ds3231_deinit+0x36>
     b8e:	82 e3       	ldi	r24, 0x32	; 50
     b90:	96 e0       	ldi	r25, 0x06	; 6
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	e8 85       	ldd	r30, Y+8	; 0x08
     b98:	f9 85       	ldd	r31, Y+9	; 0x09
     b9a:	09 95       	icall
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	81 2f       	mov	r24, r17
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <ds3231_deinit+0x40>
     ba4:	1e 86       	std	Y+14, r1	; 0x0e
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <ds3231_deinit+0x40>
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	01 c0       	rjmp	.+2      	; 0xbae <ds3231_deinit+0x40>
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	08 95       	ret

00000bb6 <ds3231_set_32khz_output>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t ds3231_set_32khz_output(ds3231_handle_t *handle, ds3231_bool_t enable)
{
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	1f 92       	push	r1
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	b1 f1       	breq	.+108    	; 0xc38 <ds3231_set_32khz_output+0x82>
    {
        return 2;                                                                            /* return error */
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
     bcc:	dc 01       	movw	r26, r24
     bce:	1e 96       	adiw	r26, 0x0e	; 14
     bd0:	1c 91       	ld	r17, X
     bd2:	11 30       	cpi	r17, 0x01	; 1
     bd4:	99 f5       	brne	.+102    	; 0xc3c <ds3231_set_32khz_output+0x86>
     bd6:	06 2f       	mov	r16, r22
     bd8:	7c 01       	movw	r14, r24
    {
        return 3;                                                                            /* return error */
    }
    
    res = a_ds3231_iic_multiple_read(handle, DS3231_REG_STATUS, (uint8_t *)&prev, 1);        /* multiple read */
     bda:	21 e0       	ldi	r18, 0x01	; 1
     bdc:	ae 01       	movw	r20, r28
     bde:	4f 5f       	subi	r20, 0xFF	; 255
     be0:	5f 4f       	sbci	r21, 0xFF	; 255
     be2:	6f e0       	ldi	r22, 0x0F	; 15
     be4:	7a da       	rcall	.-2828   	; 0xda <a_ds3231_iic_multiple_read>
    if (res != 0)                                                                            /* check result */
     be6:	88 23       	and	r24, r24
     be8:	69 f0       	breq	.+26     	; 0xc04 <ds3231_set_32khz_output+0x4e>
    {
        handle->debug_print("ds3231: read status failed.\n");                                /* read status failed */
     bea:	8c eb       	ldi	r24, 0xBC	; 188
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	d7 01       	movw	r26, r14
     bf4:	18 96       	adiw	r26, 0x08	; 8
     bf6:	ed 91       	ld	r30, X+
     bf8:	fc 91       	ld	r31, X
     bfa:	19 97       	sbiw	r26, 0x09	; 9
     bfc:	09 95       	icall
        
        return 1;                                                                            /* return error */
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	1f c0       	rjmp	.+62     	; 0xc42 <ds3231_set_32khz_output+0x8c>
    }
    prev &= ~(1 << 3);                                                                       /* clear config */
    prev |= enable << 3;                                                                     /* set enable */
     c04:	49 81       	ldd	r20, Y+1	; 0x01
     c06:	47 7f       	andi	r20, 0xF7	; 247
     c08:	60 2f       	mov	r22, r16
     c0a:	66 0f       	add	r22, r22
     c0c:	66 0f       	add	r22, r22
     c0e:	66 0f       	add	r22, r22
     c10:	46 2b       	or	r20, r22
     c12:	49 83       	std	Y+1, r20	; 0x01
    res = a_ds3231_iic_write(handle, DS3231_REG_STATUS, prev);                               /* write status */
     c14:	6f e0       	ldi	r22, 0x0F	; 15
     c16:	c7 01       	movw	r24, r14
     c18:	45 da       	rcall	.-2934   	; 0xa4 <a_ds3231_iic_write>
    if (res != 0)                                                                            /* check result */
     c1a:	88 23       	and	r24, r24
     c1c:	89 f0       	breq	.+34     	; 0xc40 <ds3231_set_32khz_output+0x8a>
    {
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
     c1e:	84 e1       	ldi	r24, 0x14	; 20
     c20:	96 e0       	ldi	r25, 0x06	; 6
     c22:	9f 93       	push	r25
     c24:	8f 93       	push	r24
     c26:	d7 01       	movw	r26, r14
     c28:	18 96       	adiw	r26, 0x08	; 8
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	19 97       	sbiw	r26, 0x09	; 9
     c30:	09 95       	icall
        
        return 1;                                                                            /* return error */
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <ds3231_set_32khz_output+0x8c>
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
    {
        return 2;                                                                            /* return error */
     c38:	12 e0       	ldi	r17, 0x02	; 2
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <ds3231_set_32khz_output+0x8c>
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
    {
        return 3;                                                                            /* return error */
     c3c:	13 e0       	ldi	r17, 0x03	; 3
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <ds3231_set_32khz_output+0x8c>
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
     c40:	10 e0       	ldi	r17, 0x00	; 0
}
     c42:	81 2f       	mov	r24, r17
     c44:	0f 90       	pop	r0
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	08 95       	ret

00000c54 <ds3231_basic_init>:
uint8_t ds3231_basic_set_timestamp_time_zone(int8_t zone)
{
    gs_time_zone = zone;
    
    return 0;
}
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	1f 92       	push	r1
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	e6 e3       	ldi	r30, 0x36	; 54
     c60:	f8 e0       	ldi	r31, 0x08	; 8
     c62:	8f e0       	ldi	r24, 0x0F	; 15
     c64:	df 01       	movw	r26, r30
     c66:	1d 92       	st	X+, r1
     c68:	8a 95       	dec	r24
     c6a:	e9 f7       	brne	.-6      	; 0xc66 <ds3231_basic_init+0x12>
     c6c:	8f e0       	ldi	r24, 0x0F	; 15
     c6e:	97 e0       	ldi	r25, 0x07	; 7
     c70:	91 83       	std	Z+1, r25	; 0x01
     c72:	80 83       	st	Z, r24
     c74:	81 e1       	ldi	r24, 0x11	; 17
     c76:	97 e0       	ldi	r25, 0x07	; 7
     c78:	93 83       	std	Z+3, r25	; 0x03
     c7a:	82 83       	std	Z+2, r24	; 0x02
     c7c:	83 e1       	ldi	r24, 0x13	; 19
     c7e:	97 e0       	ldi	r25, 0x07	; 7
     c80:	97 83       	std	Z+7, r25	; 0x07
     c82:	86 83       	std	Z+6, r24	; 0x06
     c84:	88 e4       	ldi	r24, 0x48	; 72
     c86:	97 e0       	ldi	r25, 0x07	; 7
     c88:	95 83       	std	Z+5, r25	; 0x05
     c8a:	84 83       	std	Z+4, r24	; 0x04
     c8c:	88 e5       	ldi	r24, 0x58	; 88
     c8e:	97 e0       	ldi	r25, 0x07	; 7
     c90:	95 87       	std	Z+13, r25	; 0x0d
     c92:	84 87       	std	Z+12, r24	; 0x0c
     c94:	89 e5       	ldi	r24, 0x59	; 89
     c96:	97 e0       	ldi	r25, 0x07	; 7
     c98:	91 87       	std	Z+9, r25	; 0x09
     c9a:	80 87       	std	Z+8, r24	; 0x08
     c9c:	80 e6       	ldi	r24, 0x60	; 96
     c9e:	97 e0       	ldi	r25, 0x07	; 7
     ca0:	93 87       	std	Z+11, r25	; 0x0b
     ca2:	82 87       	std	Z+10, r24	; 0x0a
     ca4:	cf 01       	movw	r24, r30
     ca6:	77 de       	rcall	.-786    	; 0x996 <ds3231_init>
     ca8:	88 23       	and	r24, r24
     caa:	49 f0       	breq	.+18     	; 0xcbe <ds3231_basic_init+0x6a>
     cac:	8b e7       	ldi	r24, 0x7B	; 123
     cae:	96 e0       	ldi	r25, 0x06	; 6
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	fe d0       	rcall	.+508    	; 0xeb2 <ds3231_interface_debug_print>
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	98 c0       	rjmp	.+304    	; 0xdee <ds3231_basic_init+0x19a>
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	86 e3       	ldi	r24, 0x36	; 54
     cc2:	98 e0       	ldi	r25, 0x08	; 8
     cc4:	da dc       	rcall	.-1612   	; 0x67a <ds3231_set_oscillator>
     cc6:	88 23       	and	r24, r24
     cc8:	61 f0       	breq	.+24     	; 0xce2 <ds3231_basic_init+0x8e>
     cca:	81 e9       	ldi	r24, 0x91	; 145
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	ef d0       	rcall	.+478    	; 0xeb2 <ds3231_interface_debug_print>
     cd4:	86 e3       	ldi	r24, 0x36	; 54
     cd6:	98 e0       	ldi	r25, 0x08	; 8
     cd8:	4a df       	rcall	.-364    	; 0xb6e <ds3231_deinit>
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	86 c0       	rjmp	.+268    	; 0xdee <ds3231_basic_init+0x19a>
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	86 e3       	ldi	r24, 0x36	; 54
     ce8:	98 e0       	ldi	r25, 0x08	; 8
     cea:	17 dd       	rcall	.-1490   	; 0x71a <ds3231_set_alarm_interrupt>
     cec:	88 23       	and	r24, r24
     cee:	61 f0       	breq	.+24     	; 0xd08 <ds3231_basic_init+0xb4>
     cf0:	81 eb       	ldi	r24, 0xB1	; 177
     cf2:	96 e0       	ldi	r25, 0x06	; 6
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	dc d0       	rcall	.+440    	; 0xeb2 <ds3231_interface_debug_print>
     cfa:	86 e3       	ldi	r24, 0x36	; 54
     cfc:	98 e0       	ldi	r25, 0x08	; 8
     cfe:	37 df       	rcall	.-402    	; 0xb6e <ds3231_deinit>
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	73 c0       	rjmp	.+230    	; 0xdee <ds3231_basic_init+0x19a>
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	86 e3       	ldi	r24, 0x36	; 54
     d0e:	98 e0       	ldi	r25, 0x08	; 8
     d10:	04 dd       	rcall	.-1528   	; 0x71a <ds3231_set_alarm_interrupt>
     d12:	88 23       	and	r24, r24
     d14:	61 f0       	breq	.+24     	; 0xd2e <ds3231_basic_init+0xda>
     d16:	87 ed       	ldi	r24, 0xD7	; 215
     d18:	96 e0       	ldi	r25, 0x06	; 6
     d1a:	9f 93       	push	r25
     d1c:	8f 93       	push	r24
     d1e:	c9 d0       	rcall	.+402    	; 0xeb2 <ds3231_interface_debug_print>
     d20:	86 e3       	ldi	r24, 0x36	; 54
     d22:	98 e0       	ldi	r25, 0x08	; 8
     d24:	24 df       	rcall	.-440    	; 0xb6e <ds3231_deinit>
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	60 c0       	rjmp	.+192    	; 0xdee <ds3231_basic_init+0x19a>
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	86 e3       	ldi	r24, 0x36	; 54
     d32:	98 e0       	ldi	r25, 0x08	; 8
     d34:	52 dd       	rcall	.-1372   	; 0x7da <ds3231_set_pin>
     d36:	88 23       	and	r24, r24
     d38:	61 f0       	breq	.+24     	; 0xd52 <ds3231_basic_init+0xfe>
     d3a:	8d ef       	ldi	r24, 0xFD	; 253
     d3c:	96 e0       	ldi	r25, 0x06	; 6
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	b7 d0       	rcall	.+366    	; 0xeb2 <ds3231_interface_debug_print>
     d44:	86 e3       	ldi	r24, 0x36	; 54
     d46:	98 e0       	ldi	r25, 0x08	; 8
     d48:	12 df       	rcall	.-476    	; 0xb6e <ds3231_deinit>
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	4e c0       	rjmp	.+156    	; 0xdee <ds3231_basic_init+0x19a>
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	86 e3       	ldi	r24, 0x36	; 54
     d56:	98 e0       	ldi	r25, 0x08	; 8
     d58:	8e dd       	rcall	.-1252   	; 0x876 <ds3231_set_square_wave>
     d5a:	88 23       	and	r24, r24
     d5c:	61 f0       	breq	.+24     	; 0xd76 <ds3231_basic_init+0x122>
     d5e:	86 e1       	ldi	r24, 0x16	; 22
     d60:	97 e0       	ldi	r25, 0x07	; 7
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	a5 d0       	rcall	.+330    	; 0xeb2 <ds3231_interface_debug_print>
     d68:	86 e3       	ldi	r24, 0x36	; 54
     d6a:	98 e0       	ldi	r25, 0x08	; 8
     d6c:	00 df       	rcall	.-512    	; 0xb6e <ds3231_deinit>
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	3c c0       	rjmp	.+120    	; 0xdee <ds3231_basic_init+0x19a>
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	86 e3       	ldi	r24, 0x36	; 54
     d7a:	98 e0       	ldi	r25, 0x08	; 8
     d7c:	1c df       	rcall	.-456    	; 0xbb6 <ds3231_set_32khz_output>
     d7e:	88 23       	and	r24, r24
     d80:	61 f0       	breq	.+24     	; 0xd9a <ds3231_basic_init+0x146>
     d82:	87 e3       	ldi	r24, 0x37	; 55
     d84:	97 e0       	ldi	r25, 0x07	; 7
     d86:	9f 93       	push	r25
     d88:	8f 93       	push	r24
     d8a:	93 d0       	rcall	.+294    	; 0xeb2 <ds3231_interface_debug_print>
     d8c:	86 e3       	ldi	r24, 0x36	; 54
     d8e:	98 e0       	ldi	r25, 0x08	; 8
     d90:	ee de       	rcall	.-548    	; 0xb6e <ds3231_deinit>
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	2a c0       	rjmp	.+84     	; 0xdee <ds3231_basic_init+0x19a>
     d9a:	9e 01       	movw	r18, r28
     d9c:	2f 5f       	subi	r18, 0xFF	; 255
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	ba 01       	movw	r22, r20
     da6:	86 e3       	ldi	r24, 0x36	; 54
     da8:	98 e0       	ldi	r25, 0x08	; 8
     daa:	db dd       	rcall	.-1098   	; 0x962 <ds3231_aging_offset_convert_to_register>
     dac:	88 23       	and	r24, r24
     dae:	61 f0       	breq	.+24     	; 0xdc8 <ds3231_basic_init+0x174>
     db0:	89 e5       	ldi	r24, 0x59	; 89
     db2:	97 e0       	ldi	r25, 0x07	; 7
     db4:	9f 93       	push	r25
     db6:	8f 93       	push	r24
     db8:	7c d0       	rcall	.+248    	; 0xeb2 <ds3231_interface_debug_print>
     dba:	86 e3       	ldi	r24, 0x36	; 54
     dbc:	98 e0       	ldi	r25, 0x08	; 8
     dbe:	d7 de       	rcall	.-594    	; 0xb6e <ds3231_deinit>
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	13 c0       	rjmp	.+38     	; 0xdee <ds3231_basic_init+0x19a>
     dc8:	69 81       	ldd	r22, Y+1	; 0x01
     dca:	86 e3       	ldi	r24, 0x36	; 54
     dcc:	98 e0       	ldi	r25, 0x08	; 8
     dce:	a2 dd       	rcall	.-1212   	; 0x914 <ds3231_set_aging_offset>
     dd0:	88 23       	and	r24, r24
     dd2:	61 f0       	breq	.+24     	; 0xdec <ds3231_basic_init+0x198>
     dd4:	8e e7       	ldi	r24, 0x7E	; 126
     dd6:	97 e0       	ldi	r25, 0x07	; 7
     dd8:	9f 93       	push	r25
     dda:	8f 93       	push	r24
     ddc:	6a d0       	rcall	.+212    	; 0xeb2 <ds3231_interface_debug_print>
     dde:	86 e3       	ldi	r24, 0x36	; 54
     de0:	98 e0       	ldi	r25, 0x08	; 8
     de2:	c5 de       	rcall	.-630    	; 0xb6e <ds3231_deinit>
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	01 c0       	rjmp	.+2      	; 0xdee <ds3231_basic_init+0x19a>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0f 90       	pop	r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <ds3231_basic_set_time>:
     df6:	bc 01       	movw	r22, r24
     df8:	86 e3       	ldi	r24, 0x36	; 54
     dfa:	98 e0       	ldi	r25, 0x08	; 8
     dfc:	9c d9       	rcall	.-3272   	; 0x136 <ds3231_set_time>
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	81 11       	cpse	r24, r1
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <ds3231_basic_set_time+0x10>
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	89 2f       	mov	r24, r25
     e08:	08 95       	ret

00000e0a <ds3231_basic_get_time>:
 * @note       none
 */
uint8_t ds3231_basic_get_time(ds3231_time_t *t)
{
    /* get time */
    if (ds3231_get_time(&gs_handle, t) != 0)
     e0a:	bc 01       	movw	r22, r24
     e0c:	86 e3       	ldi	r24, 0x36	; 54
     e0e:	98 e0       	ldi	r25, 0x08	; 8
     e10:	97 db       	rcall	.-2258   	; 0x540 <ds3231_get_time>
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	81 11       	cpse	r24, r1
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <ds3231_basic_get_time+0x10>
     e18:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
     e1a:	89 2f       	mov	r24, r25
     e1c:	08 95       	ret

00000e1e <ds3231_interface_iic_init>:
 * @note   none
 */
uint8_t ds3231_interface_iic_init(void)
{
    return 0;
}
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret

00000e22 <ds3231_interface_iic_deinit>:
 * @note   none
 */
uint8_t ds3231_interface_iic_deinit(void)
{
    return 0;
}
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	08 95       	ret

00000e26 <ds3231_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
     e26:	af 92       	push	r10
     e28:	bf 92       	push	r11
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
	for (uint8_t i = 0; i < len; i++)
     e3a:	21 15       	cp	r18, r1
     e3c:	31 05       	cpc	r19, r1
     e3e:	e1 f0       	breq	.+56     	; 0xe78 <ds3231_interface_iic_read+0x52>
     e40:	79 01       	movw	r14, r18
     e42:	6a 01       	movw	r12, r20
     e44:	b6 2e       	mov	r11, r22
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
     e46:	08 2f       	mov	r16, r24
     e48:	00 0f       	add	r16, r16
		i2c_write(reg);
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
     e4a:	aa 24       	eor	r10, r10
     e4c:	a3 94       	inc	r10
     e4e:	a0 0e       	add	r10, r16
     e50:	16 2f       	mov	r17, r22
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
     e56:	80 2f       	mov	r24, r16
     e58:	61 d0       	rcall	.+194    	; 0xf1c <i2c_rep_start>
		i2c_write(reg);
     e5a:	81 2f       	mov	r24, r17
     e5c:	61 d0       	rcall	.+194    	; 0xf20 <i2c_write>
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
     e5e:	8a 2d       	mov	r24, r10
     e60:	5d d0       	rcall	.+186    	; 0xf1c <i2c_rep_start>
		/* Receive data */
		buf[i] = i2c_readNak();
     e62:	cc 0d       	add	r28, r12
     e64:	dd 1d       	adc	r29, r13
     e66:	6e d0       	rcall	.+220    	; 0xf44 <i2c_readNak>
     e68:	88 83       	st	Y, r24
     e6a:	1f 5f       	subi	r17, 0xFF	; 255
		reg += 1;
     e6c:	c1 2f       	mov	r28, r17
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
     e6e:	cb 19       	sub	r28, r11
     e70:	d0 e0       	ldi	r29, 0x00	; 0
     e72:	ce 15       	cp	r28, r14
     e74:	df 05       	cpc	r29, r15
     e76:	78 f3       	brcs	.-34     	; 0xe56 <ds3231_interface_iic_read+0x30>
     e78:	80 e0       	ldi	r24, 0x00	; 0
		buf[i] = i2c_readNak();
		reg += 1;
	}
	
    return 0;
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	08 95       	ret

00000e90 <ds3231_interface_iic_write>:
     e90:	1f 93       	push	r17
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t ds3231_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	16 2f       	mov	r17, r22
     e98:	ea 01       	movw	r28, r20
	i2c_rep_start((addr<<1)+I2C_WRITE);
     e9a:	88 0f       	add	r24, r24
     e9c:	3f d0       	rcall	.+126    	; 0xf1c <i2c_rep_start>
	i2c_write(reg);
     e9e:	81 2f       	mov	r24, r17
     ea0:	3f d0       	rcall	.+126    	; 0xf20 <i2c_write>
	/* Write data */
	i2c_write(*buf);
     ea2:	88 81       	ld	r24, Y
     ea4:	3d d0       	rcall	.+122    	; 0xf20 <i2c_write>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
	
    return 0;
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	08 95       	ret

00000eb0 <ds3231_interface_delay_ms>:
     eb0:	08 95       	ret

00000eb2 <ds3231_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void ds3231_interface_debug_print(const char *const fmt, ...)
{
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
    
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <ds3231_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the interrupt type
 * @note      none
 */
void ds3231_interface_receive_callback(uint8_t type)
{
     ec0:	08 95       	ret

00000ec2 <i2c_init>:
		if( twst == TW_SR_DATA_ACK)
		{
			return TWDR;
		}
	}
}
     ec2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     ec6:	88 e4       	ldi	r24, 0x48	; 72
     ec8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     ecc:	08 95       	ret

00000ece <i2c_start>:
     ece:	94 ea       	ldi	r25, 0xA4	; 164
     ed0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ed4:	ec eb       	ldi	r30, 0xBC	; 188
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	90 81       	ld	r25, Z
     eda:	99 23       	and	r25, r25
     edc:	ec f7       	brge	.-6      	; 0xed8 <i2c_start+0xa>
     ede:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     ee2:	98 7f       	andi	r25, 0xF8	; 248
     ee4:	98 30       	cpi	r25, 0x08	; 8
     ee6:	11 f0       	breq	.+4      	; 0xeec <i2c_start+0x1e>
     ee8:	90 31       	cpi	r25, 0x10	; 16
     eea:	a1 f4       	brne	.+40     	; 0xf14 <i2c_start+0x46>
     eec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ef0:	84 e8       	ldi	r24, 0x84	; 132
     ef2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ef6:	ec eb       	ldi	r30, 0xBC	; 188
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	ec f7       	brge	.-6      	; 0xefa <i2c_start+0x2c>
     f00:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f04:	98 7f       	andi	r25, 0xF8	; 248
     f06:	98 31       	cpi	r25, 0x18	; 24
     f08:	39 f0       	breq	.+14     	; 0xf18 <i2c_start+0x4a>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 34       	cpi	r25, 0x40	; 64
     f0e:	29 f4       	brne	.+10     	; 0xf1a <i2c_start+0x4c>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	08 95       	ret
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	08 95       	ret
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret

00000f1c <i2c_rep_start>:
     f1c:	d8 cf       	rjmp	.-80     	; 0xece <i2c_start>
     f1e:	08 95       	ret

00000f20 <i2c_write>:
     f20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     f24:	84 e8       	ldi	r24, 0x84	; 132
     f26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f2a:	ec eb       	ldi	r30, 0xBC	; 188
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	88 23       	and	r24, r24
     f32:	ec f7       	brge	.-6      	; 0xf2e <i2c_write+0xe>
     f34:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f38:	98 7f       	andi	r25, 0xF8	; 248
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	98 32       	cpi	r25, 0x28	; 40
     f3e:	09 f4       	brne	.+2      	; 0xf42 <i2c_write+0x22>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	08 95       	ret

00000f44 <i2c_readNak>:
Outputs:	Data received from I2C device
Description:Receives and returns the data from I2C device.
******************************************************************** */
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     f44:	84 e8       	ldi	r24, 0x84	; 132
     f46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     f4a:	ec eb       	ldi	r30, 0xBC	; 188
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 23       	and	r24, r24
     f52:	ec f7       	brge	.-6      	; 0xf4e <i2c_readNak+0xa>
	
	return TWDR;
     f54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
     f58:	08 95       	ret

00000f5a <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
     f5a:	8a b1       	in	r24, 0x0a	; 10
     f5c:	80 6f       	ori	r24, 0xF0	; 240
     f5e:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
     f60:	8a b1       	in	r24, 0x0a	; 10
     f62:	8b 60       	ori	r24, 0x0B	; 11
     f64:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
     f66:	20 9a       	sbi	0x04, 0	; 4
     f68:	08 95       	ret

00000f6a <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <lcd_write_4+0x6>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <lcd_write_4+0x8>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
     f76:	19 82       	std	Y+1, r1	; 0x01
     f78:	1a 82       	std	Y+2, r1	; 0x02
     f7a:	1b 82       	std	Y+3, r1	; 0x03
     f7c:	1c 82       	std	Y+4, r1	; 0x04
     f7e:	fe 01       	movw	r30, r28
     f80:	31 96       	adiw	r30, 0x01	; 1
     f82:	27 e0       	ldi	r18, 0x07	; 7
     f84:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     f86:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
     f88:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     f8a:	ac 01       	movw	r20, r24
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <lcd_write_4+0x2a>
     f90:	55 95       	asr	r21
     f92:	47 95       	ror	r20
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <lcd_write_4+0x26>
     f98:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
     f9a:	60 83       	st	Z, r22
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	31 09       	sbc	r19, r1
     fa0:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
     fa2:	23 30       	cpi	r18, 0x03	; 3
     fa4:	31 05       	cpc	r19, r1
     fa6:	89 f7       	brne	.-30     	; 0xf8a <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
     fa8:	8b b1       	in	r24, 0x0b	; 11
     faa:	8f 70       	andi	r24, 0x0F	; 15
     fac:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
     fae:	2b b1       	in	r18, 0x0b	; 11
     fb0:	49 81       	ldd	r20, Y+1	; 0x01
     fb2:	30 e8       	ldi	r19, 0x80	; 128
     fb4:	43 9f       	mul	r20, r19
     fb6:	c0 01       	movw	r24, r0
     fb8:	11 24       	eor	r1, r1
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	30 e4       	ldi	r19, 0x40	; 64
     fbe:	93 9f       	mul	r25, r19
     fc0:	a0 01       	movw	r20, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	48 2b       	or	r20, r24
     fc6:	42 2b       	or	r20, r18
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	80 e2       	ldi	r24, 0x20	; 32
     fcc:	98 9f       	mul	r25, r24
     fce:	90 01       	movw	r18, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	24 2b       	or	r18, r20
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	30 e1       	ldi	r19, 0x10	; 16
     fd8:	93 9f       	mul	r25, r19
     fda:	c0 01       	movw	r24, r0
     fdc:	11 24       	eor	r1, r1
     fde:	82 2b       	or	r24, r18
     fe0:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
     fe2:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	8a 95       	dec	r24
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <lcd_write_4+0x7c>
     fea:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
     fec:	5b 98       	cbi	0x0b, 3	; 11
     fee:	35 e0       	ldi	r19, 0x05	; 5
     ff0:	3a 95       	dec	r19
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <lcd_write_4+0x86>
     ff4:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
    1004:	cf 93       	push	r28
    1006:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
    1008:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
    100a:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
    100c:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
    100e:	ad df       	rcall	.-166    	; 0xf6a <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
    1010:	8c 2f       	mov	r24, r28
    1012:	82 95       	swap	r24
    1014:	80 7f       	andi	r24, 0xF0	; 240
    1016:	a9 df       	rcall	.-174    	; 0xf6a <lcd_write_4>
}
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
    101c:	cf 93       	push	r28
    101e:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
    1020:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
    1022:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
    1024:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
    1026:	a1 df       	rcall	.-190    	; 0xf6a <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
    1028:	8c 2f       	mov	r24, r28
    102a:	82 95       	swap	r24
    102c:	80 7f       	andi	r24, 0xF0	; 240
    102e:	9d df       	rcall	.-198    	; 0xf6a <lcd_write_4>
}
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
    1034:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
    1036:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
    1038:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
    103a:	5b 9a       	sbi	0x0b, 3	; 11
    103c:	85 e0       	ldi	r24, 0x05	; 5
    103e:	8a 95       	dec	r24
    1040:	f1 f7       	brne	.-4      	; 0x103e <lcd_check_BF_4+0xa>
    1042:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
    1044:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
    1046:	5b 98       	cbi	0x0b, 3	; 11
    1048:	95 e0       	ldi	r25, 0x05	; 5
    104a:	9a 95       	dec	r25
    104c:	f1 f7       	brne	.-4      	; 0x104a <lcd_check_BF_4+0x16>
    104e:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
    1050:	5b 9a       	sbi	0x0b, 3	; 11
    1052:	95 e0       	ldi	r25, 0x05	; 5
    1054:	9a 95       	dec	r25
    1056:	f1 f7       	brne	.-4      	; 0x1054 <lcd_check_BF_4+0x20>
    1058:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
    105a:	5b 98       	cbi	0x0b, 3	; 11
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	9a 95       	dec	r25
    1060:	f1 f7       	brne	.-4      	; 0x105e <lcd_check_BF_4+0x2a>
    1062:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
    1064:	88 23       	and	r24, r24
    1066:	4c f3       	brlt	.-46     	; 0x103a <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
    1068:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
    106a:	57 9a       	sbi	0x0a, 7	; 10
    106c:	08 95       	ret

0000106e <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    106e:	2f ef       	ldi	r18, 0xFF	; 255
    1070:	81 ee       	ldi	r24, 0xE1	; 225
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	21 50       	subi	r18, 0x01	; 1
    1076:	80 40       	sbci	r24, 0x00	; 0
    1078:	90 40       	sbci	r25, 0x00	; 0
    107a:	e1 f7       	brne	.-8      	; 0x1074 <lcd_init_4f+0x6>
    107c:	00 c0       	rjmp	.+0      	; 0x107e <lcd_init_4f+0x10>
    107e:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
    1080:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
    1082:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
    1084:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
    1086:	80 e3       	ldi	r24, 0x30	; 48
    1088:	70 df       	rcall	.-288    	; 0xf6a <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    108a:	25 e3       	ldi	r18, 0x35	; 53
    108c:	2a 95       	dec	r18
    108e:	f1 f7       	brne	.-4      	; 0x108c <lcd_init_4f+0x1e>
    1090:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
    1092:	80 e3       	ldi	r24, 0x30	; 48
    1094:	6a df       	rcall	.-300    	; 0xf6a <lcd_write_4>
    1096:	8f e1       	ldi	r24, 0x1F	; 31
    1098:	93 e0       	ldi	r25, 0x03	; 3
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <lcd_init_4f+0x2c>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
    10a0:	00 00       	nop
    10a2:	80 e3       	ldi	r24, 0x30	; 48
    10a4:	62 df       	rcall	.-316    	; 0xf6a <lcd_write_4>
    10a6:	8f e3       	ldi	r24, 0x3F	; 63
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <lcd_init_4f+0x3c>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
    10b0:	00 00       	nop
    10b2:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
    10b4:	5a df       	rcall	.-332    	; 0xf6a <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
    10b6:	be df       	rcall	.-132    	; 0x1034 <lcd_check_BF_4>
    10b8:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
    10ba:	b0 df       	rcall	.-160    	; 0x101c <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
    10bc:	bb df       	rcall	.-138    	; 0x1034 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
    10be:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
    10c0:	ad df       	rcall	.-166    	; 0x101c <lcd_write_instruction_4f>
    10c2:	b8 df       	rcall	.-144    	; 0x1034 <lcd_check_BF_4>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
    10c6:	aa df       	rcall	.-172    	; 0x101c <lcd_write_instruction_4f>
    10c8:	b5 df       	rcall	.-150    	; 0x1034 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
    10ca:	86 e0       	ldi	r24, 0x06	; 6
    10cc:	a7 df       	rcall	.-178    	; 0x101c <lcd_write_instruction_4f>
    10ce:	b2 df       	rcall	.-156    	; 0x1034 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
    10d0:	8c e0       	ldi	r24, 0x0C	; 12
    10d2:	a4 cf       	rjmp	.-184    	; 0x101c <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
    10d4:	08 95       	ret

000010d6 <initLCD>:
    10d6:	41 df       	rcall	.-382    	; 0xf5a <configLCDPorts>
    10d8:	ca df       	rcall	.-108    	; 0x106e <lcd_init_4f>
    10da:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10dc:	81 ee       	ldi	r24, 0xE1	; 225
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <initLCD+0xa>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <initLCD+0x14>
    10ea:	00 00       	nop
    10ec:	08 95       	ret

000010ee <lcd_write_string_4f>:
    10ee:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <lcd_write_string_4f+0xa>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
    10fe:	1a 82       	std	Y+2, r1	; 0x02
    1100:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	e8 0f       	add	r30, r24
    1108:	f9 1f       	adc	r31, r25
    110a:	80 81       	ld	r24, Z
    110c:	88 23       	and	r24, r24
    110e:	99 f0       	breq	.+38     	; 0x1136 <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
    1110:	91 df       	rcall	.-222    	; 0x1034 <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
    1112:	e9 81       	ldd	r30, Y+1	; 0x01
    1114:	fa 81       	ldd	r31, Y+2	; 0x02
    1116:	e0 0f       	add	r30, r16
    1118:	f1 1f       	adc	r31, r17
    111a:	80 81       	ld	r24, Z
    111c:	73 df       	rcall	.-282    	; 0x1004 <lcd_write_character_4f>
        i++;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	e0 0f       	add	r30, r16
    112e:	f1 1f       	adc	r31, r17
    1130:	80 81       	ld	r24, Z
    1132:	81 11       	cpse	r24, r1
    1134:	ed cf       	rjmp	.-38     	; 0x1110 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	08 95       	ret

00001144 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	af 97       	sbiw	r28, 0x2f	; 47
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	18 2f       	mov	r17, r24
    1164:	d6 2e       	mov	r13, r22
    1166:	07 2f       	mov	r16, r23
    1168:	84 2f       	mov	r24, r20
    116a:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
    116c:	20 e2       	ldi	r18, 0x20	; 32
    116e:	30 e2       	ldi	r19, 0x20	; 32
    1170:	3a 83       	std	Y+2, r19	; 0x02
    1172:	29 83       	std	Y+1, r18	; 0x01
    1174:	20 e2       	ldi	r18, 0x20	; 32
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 83       	std	Y+4, r19	; 0x04
    117a:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
    117c:	96 e1       	ldi	r25, 0x16	; 22
    117e:	e3 e0       	ldi	r30, 0x03	; 3
    1180:	f8 e0       	ldi	r31, 0x08	; 8
    1182:	de 01       	movw	r26, r28
    1184:	5a 96       	adiw	r26, 0x1a	; 26
    1186:	01 90       	ld	r0, Z+
    1188:	0d 92       	st	X+, r0
    118a:	9a 95       	dec	r25
    118c:	e1 f7       	brne	.-8      	; 0x1186 <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
    118e:	4f 3f       	cpi	r20, 0xFF	; 255
    1190:	31 f0       	breq	.+12     	; 0x119e <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1192:	4a e0       	ldi	r20, 0x0A	; 10
    1194:	be 01       	movw	r22, r28
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	29 d2       	rcall	.+1106   	; 0x15f0 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
    119e:	6f ee       	ldi	r22, 0xEF	; 239
    11a0:	77 e0       	ldi	r23, 0x07	; 7
    11a2:	8d 2d       	mov	r24, r13
    11a4:	90 2f       	mov	r25, r16
    11a6:	1b d2       	rcall	.+1078   	; 0x15de <strcmp>
    11a8:	89 2b       	or	r24, r25
    11aa:	09 f4       	brne	.+2      	; 0x11ae <updateLCDScreen+0x6a>
    11ac:	ac c0       	rjmp	.+344    	; 0x1306 <updateLCDScreen+0x1c2>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
    11ae:	6f ee       	ldi	r22, 0xEF	; 239
    11b0:	77 e0       	ldi	r23, 0x07	; 7
    11b2:	c7 01       	movw	r24, r14
    11b4:	14 d2       	rcall	.+1064   	; 0x15de <strcmp>
    11b6:	89 2b       	or	r24, r25
    11b8:	31 f4       	brne	.+12     	; 0x11c6 <updateLCDScreen+0x82>
    11ba:	0f 2e       	mov	r0, r31
    11bc:	fa e4       	ldi	r31, 0x4A	; 74
    11be:	ef 2e       	mov	r14, r31
    11c0:	f1 e0       	ldi	r31, 0x01	; 1
    11c2:	ff 2e       	mov	r15, r31
    11c4:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
    11c6:	ce 01       	movw	r24, r28
    11c8:	4a 96       	adiw	r24, 0x1a	; 26
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	ff 92       	push	r15
    11d0:	ef 92       	push	r14
    11d2:	49 97       	sbiw	r24, 0x19	; 25
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	0f 93       	push	r16
    11da:	df 92       	push	r13
    11dc:	84 ef       	ldi	r24, 0xF4	; 244
    11de:	97 e0       	ldi	r25, 0x07	; 7
    11e0:	9f 93       	push	r25
    11e2:	8f 93       	push	r24
    11e4:	1f 92       	push	r1
    11e6:	85 e1       	ldi	r24, 0x15	; 21
    11e8:	8f 93       	push	r24
    11ea:	ce 01       	movw	r24, r28
    11ec:	05 96       	adiw	r24, 0x05	; 5
    11ee:	9f 93       	push	r25
    11f0:	8f 93       	push	r24
    11f2:	21 d2       	rcall	.+1090   	; 0x1636 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
    11f4:	6d ef       	ldi	r22, 0xFD	; 253
    11f6:	77 e0       	ldi	r23, 0x07	; 7
    11f8:	8d 2d       	mov	r24, r13
    11fa:	90 2f       	mov	r25, r16
    11fc:	f0 d1       	rcall	.+992    	; 0x15de <strcmp>
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	89 2b       	or	r24, r25
    120a:	a9 f4       	brne	.+42     	; 0x1236 <updateLCDScreen+0xf2>
    120c:	ce 01       	movw	r24, r28
    120e:	4a 96       	adiw	r24, 0x1a	; 26
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	8a ef       	ldi	r24, 0xFA	; 250
    1216:	97 e0       	ldi	r25, 0x07	; 7
    1218:	9f 93       	push	r25
    121a:	8f 93       	push	r24
    121c:	1f 92       	push	r1
    121e:	85 e1       	ldi	r24, 0x15	; 21
    1220:	8f 93       	push	r24
    1222:	ce 01       	movw	r24, r28
    1224:	05 96       	adiw	r24, 0x05	; 5
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	05 d2       	rcall	.+1034   	; 0x1636 <snprintf>
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
    1236:	12 30       	cpi	r17, 0x02	; 2
    1238:	a9 f0       	breq	.+42     	; 0x1264 <updateLCDScreen+0x120>
    123a:	18 f4       	brcc	.+6      	; 0x1242 <updateLCDScreen+0xfe>
    123c:	11 30       	cpi	r17, 0x01	; 1
    123e:	31 f0       	breq	.+12     	; 0x124c <updateLCDScreen+0x108>
    1240:	34 c0       	rjmp	.+104    	; 0x12aa <updateLCDScreen+0x166>
    1242:	13 30       	cpi	r17, 0x03	; 3
    1244:	d9 f0       	breq	.+54     	; 0x127c <updateLCDScreen+0x138>
    1246:	14 30       	cpi	r17, 0x04	; 4
    1248:	29 f1       	breq	.+74     	; 0x1294 <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
    124a:	2f c0       	rjmp	.+94     	; 0x12aa <updateLCDScreen+0x166>
    124c:	80 e8       	ldi	r24, 0x80	; 128
    124e:	e6 de       	rcall	.-564    	; 0x101c <lcd_write_instruction_4f>
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	20 e7       	ldi	r18, 0x70	; 112
    1254:	32 e0       	ldi	r19, 0x02	; 2
    1256:	91 50       	subi	r25, 0x01	; 1
    1258:	20 40       	sbci	r18, 0x00	; 0
    125a:	30 40       	sbci	r19, 0x00	; 0
    125c:	e1 f7       	brne	.-8      	; 0x1256 <updateLCDScreen+0x112>
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <updateLCDScreen+0x11c>
    1260:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
    1262:	23 c0       	rjmp	.+70     	; 0x12aa <updateLCDScreen+0x166>
    1264:	80 ec       	ldi	r24, 0xC0	; 192
    1266:	da de       	rcall	.-588    	; 0x101c <lcd_write_instruction_4f>
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	90 e7       	ldi	r25, 0x70	; 112
    126c:	22 e0       	ldi	r18, 0x02	; 2
    126e:	81 50       	subi	r24, 0x01	; 1
    1270:	90 40       	sbci	r25, 0x00	; 0
    1272:	20 40       	sbci	r18, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <updateLCDScreen+0x12a>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <updateLCDScreen+0x134>
    1278:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
    127a:	17 c0       	rjmp	.+46     	; 0x12aa <updateLCDScreen+0x166>
    127c:	84 e9       	ldi	r24, 0x94	; 148
    127e:	ce de       	rcall	.-612    	; 0x101c <lcd_write_instruction_4f>
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	80 e7       	ldi	r24, 0x70	; 112
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	31 50       	subi	r19, 0x01	; 1
    1288:	80 40       	sbci	r24, 0x00	; 0
    128a:	90 40       	sbci	r25, 0x00	; 0
    128c:	e1 f7       	brne	.-8      	; 0x1286 <updateLCDScreen+0x142>
    128e:	00 c0       	rjmp	.+0      	; 0x1290 <updateLCDScreen+0x14c>
    1290:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <updateLCDScreen+0x166>
    1294:	84 ed       	ldi	r24, 0xD4	; 212
    1296:	c2 de       	rcall	.-636    	; 0x101c <lcd_write_instruction_4f>
    1298:	2f ef       	ldi	r18, 0xFF	; 255
    129a:	30 e7       	ldi	r19, 0x70	; 112
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	21 50       	subi	r18, 0x01	; 1
    12a0:	30 40       	sbci	r19, 0x00	; 0
    12a2:	80 40       	sbci	r24, 0x00	; 0
    12a4:	e1 f7       	brne	.-8      	; 0x129e <updateLCDScreen+0x15a>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <updateLCDScreen+0x164>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
    12a8:	00 00       	nop
    12aa:	ce 01       	movw	r24, r28
    12ac:	05 96       	adiw	r24, 0x05	; 5
    12ae:	1f df       	rcall	.-450    	; 0x10ee <lcd_write_string_4f>
    12b0:	9f ef       	ldi	r25, 0xFF	; 255
    12b2:	20 e7       	ldi	r18, 0x70	; 112
    12b4:	32 e0       	ldi	r19, 0x02	; 2
    12b6:	91 50       	subi	r25, 0x01	; 1
    12b8:	20 40       	sbci	r18, 0x00	; 0
    12ba:	30 40       	sbci	r19, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <updateLCDScreen+0x172>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <updateLCDScreen+0x17c>
    12c0:	00 00       	nop
}
    12c2:	46 c0       	rjmp	.+140    	; 0x1350 <updateLCDScreen+0x20c>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
    12c4:	ce 01       	movw	r24, r28
    12c6:	4a 96       	adiw	r24, 0x1a	; 26
    12c8:	9f 93       	push	r25
    12ca:	8f 93       	push	r24
    12cc:	8a e4       	ldi	r24, 0x4A	; 74
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	9f 93       	push	r25
    12d2:	8f 93       	push	r24
    12d4:	9e 01       	movw	r18, r28
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	3f 93       	push	r19
    12dc:	2f 93       	push	r18
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	84 ef       	ldi	r24, 0xF4	; 244
    12e4:	97 e0       	ldi	r25, 0x07	; 7
    12e6:	9f 93       	push	r25
    12e8:	8f 93       	push	r24
    12ea:	1f 92       	push	r1
    12ec:	85 e1       	ldi	r24, 0x15	; 21
    12ee:	8f 93       	push	r24
    12f0:	ce 01       	movw	r24, r28
    12f2:	05 96       	adiw	r24, 0x05	; 5
    12f4:	9f 93       	push	r25
    12f6:	8f 93       	push	r24
    12f8:	9e d1       	rcall	.+828    	; 0x1636 <snprintf>
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
    1304:	98 cf       	rjmp	.-208    	; 0x1236 <updateLCDScreen+0xf2>
    1306:	6f ee       	ldi	r22, 0xEF	; 239
    1308:	77 e0       	ldi	r23, 0x07	; 7
    130a:	c7 01       	movw	r24, r14
    130c:	68 d1       	rcall	.+720    	; 0x15de <strcmp>
    130e:	89 2b       	or	r24, r25
    1310:	c9 f2       	breq	.-78     	; 0x12c4 <updateLCDScreen+0x180>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
    1312:	ce 01       	movw	r24, r28
    1314:	4a 96       	adiw	r24, 0x1a	; 26
    1316:	9f 93       	push	r25
    1318:	8f 93       	push	r24
    131a:	ff 92       	push	r15
    131c:	ef 92       	push	r14
    131e:	49 97       	sbiw	r24, 0x19	; 25
    1320:	9f 93       	push	r25
    1322:	8f 93       	push	r24
    1324:	8a e4       	ldi	r24, 0x4A	; 74
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	9f 93       	push	r25
    132a:	8f 93       	push	r24
    132c:	84 ef       	ldi	r24, 0xF4	; 244
    132e:	97 e0       	ldi	r25, 0x07	; 7
    1330:	9f 93       	push	r25
    1332:	8f 93       	push	r24
    1334:	1f 92       	push	r1
    1336:	85 e1       	ldi	r24, 0x15	; 21
    1338:	8f 93       	push	r24
    133a:	ce 01       	movw	r24, r28
    133c:	05 96       	adiw	r24, 0x05	; 5
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	79 d1       	rcall	.+754    	; 0x1636 <snprintf>
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	73 cf       	rjmp	.-282    	; 0x1236 <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
    1350:	af 96       	adiw	r28, 0x2f	; 47
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	08 95       	ret

0000136c <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
    136c:	eb ce       	rjmp	.-554    	; 0x1144 <updateLCDScreen>
    136e:	08 95       	ret

00001370 <main>:

#define IICDEBUG 0
#define WRITETIME 1

int main (void)
{
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	64 97       	sbiw	r28, 0x14	; 20
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
	ds3231_time_t t;
	
	ds3231_basic_init();	
    1384:	67 dc       	rcall	.-1842   	; 0xc54 <ds3231_basic_init>
	i2c_init();
    1386:	9d dd       	rcall	.-1222   	; 0xec2 <i2c_init>
	initLCD();
    1388:	a6 de       	rcall	.-692    	; 0x10d6 <initLCD>
    138a:	1c 8a       	std	Y+20, r1	; 0x14

#if WRITETIME
	ds3231_time_t setT;
	uint8_t res;
	
	setT.am_pm = DS3231_AM;
    138c:	88 e0       	ldi	r24, 0x08	; 8
	setT.date = 8;
    138e:	8f 87       	std	Y+15, r24	; 0x0f
    1390:	1b 8a       	std	Y+19, r1	; 0x13
	setT.format = DS3231_FORMAT_24H;
    1392:	84 e1       	ldi	r24, 0x14	; 20
	setT.hour = 20;
    1394:	88 8b       	std	Y+16, r24	; 0x10
    1396:	89 8b       	std	Y+17, r24	; 0x11
	setT.minute = 20;
    1398:	8b e0       	ldi	r24, 0x0B	; 11
	setT.month = 11;
    139a:	8d 87       	std	Y+13, r24	; 0x0d
    139c:	1a 8a       	std	Y+18, r1	; 0x12
	setT.second = 0;
    139e:	83 e0       	ldi	r24, 0x03	; 3
	setT.week  = 3;
    13a0:	8e 87       	std	Y+14, r24	; 0x0e
    13a2:	86 ee       	ldi	r24, 0xE6	; 230
	setT.year = 2022;
    13a4:	97 e0       	ldi	r25, 0x07	; 7
    13a6:	9c 87       	std	Y+12, r25	; 0x0c
    13a8:	8b 87       	std	Y+11, r24	; 0x0b
	res = ds3231_basic_set_time(&setT);
    13aa:	ce 01       	movw	r24, r28
    13ac:	0b 96       	adiw	r24, 0x0b	; 11
    13ae:	23 dd       	rcall	.-1466   	; 0xdf6 <ds3231_basic_set_time>
    13b0:	81 11       	cpse	r24, r1
	if (res != 0)
    13b2:	20 c0       	rjmp	.+64     	; 0x13f4 <main+0x84>
	}
#endif

 	while(1)
 	{
		ds3231_basic_get_time(&t);
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	28 dd       	rcall	.-1456   	; 0xe0a <ds3231_basic_get_time>
    13ba:	2f ee       	ldi	r18, 0xEF	; 239
		displayLCD_main(1, "Date:", t.date, "NONE");
    13bc:	37 e0       	ldi	r19, 0x07	; 7
    13be:	4d 81       	ldd	r20, Y+5	; 0x05
    13c0:	69 e1       	ldi	r22, 0x19	; 25
    13c2:	78 e0       	ldi	r23, 0x08	; 8
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	d2 df       	rcall	.-92     	; 0x136c <displayLCD_main>
    13c8:	2f ee       	ldi	r18, 0xEF	; 239
		displayLCD_main(2, "Hour:", t.hour, "NONE");
    13ca:	37 e0       	ldi	r19, 0x07	; 7
    13cc:	4e 81       	ldd	r20, Y+6	; 0x06
    13ce:	6f e1       	ldi	r22, 0x1F	; 31
    13d0:	78 e0       	ldi	r23, 0x08	; 8
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	cb df       	rcall	.-106    	; 0x136c <displayLCD_main>
    13d6:	2f ee       	ldi	r18, 0xEF	; 239
		displayLCD_main(3, "Minute:", t.minute, "NONE");
    13d8:	37 e0       	ldi	r19, 0x07	; 7
    13da:	4f 81       	ldd	r20, Y+7	; 0x07
    13dc:	65 e2       	ldi	r22, 0x25	; 37
    13de:	78 e0       	ldi	r23, 0x08	; 8
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	c4 df       	rcall	.-120    	; 0x136c <displayLCD_main>
    13e4:	2f ee       	ldi	r18, 0xEF	; 239
		displayLCD_main(4, "Second:", t.second, "NONE");
    13e6:	37 e0       	ldi	r19, 0x07	; 7
    13e8:	48 85       	ldd	r20, Y+8	; 0x08
    13ea:	6d e2       	ldi	r22, 0x2D	; 45
    13ec:	78 e0       	ldi	r23, 0x08	; 8
    13ee:	84 e0       	ldi	r24, 0x04	; 4
    13f0:	bd df       	rcall	.-134    	; 0x136c <displayLCD_main>
    13f2:	e0 cf       	rjmp	.-64     	; 0x13b4 <main+0x44>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
		
	 }

	return 0;
    13f8:	64 96       	adiw	r28, 0x14	; 20
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <__divsf3>:
    140a:	0c d0       	rcall	.+24     	; 0x1424 <__divsf3x>
    140c:	ae c0       	rjmp	.+348    	; 0x156a <__fp_round>
    140e:	a6 d0       	rcall	.+332    	; 0x155c <__fp_pscB>
    1410:	40 f0       	brcs	.+16     	; 0x1422 <__divsf3+0x18>
    1412:	9d d0       	rcall	.+314    	; 0x154e <__fp_pscA>
    1414:	30 f0       	brcs	.+12     	; 0x1422 <__divsf3+0x18>
    1416:	21 f4       	brne	.+8      	; 0x1420 <__divsf3+0x16>
    1418:	5f 3f       	cpi	r21, 0xFF	; 255
    141a:	19 f0       	breq	.+6      	; 0x1422 <__divsf3+0x18>
    141c:	8f c0       	rjmp	.+286    	; 0x153c <__fp_inf>
    141e:	51 11       	cpse	r21, r1
    1420:	d8 c0       	rjmp	.+432    	; 0x15d2 <__fp_szero>
    1422:	92 c0       	rjmp	.+292    	; 0x1548 <__fp_nan>

00001424 <__divsf3x>:
    1424:	b3 d0       	rcall	.+358    	; 0x158c <__fp_split3>
    1426:	98 f3       	brcs	.-26     	; 0x140e <__divsf3+0x4>

00001428 <__divsf3_pse>:
    1428:	99 23       	and	r25, r25
    142a:	c9 f3       	breq	.-14     	; 0x141e <__divsf3+0x14>
    142c:	55 23       	and	r21, r21
    142e:	b1 f3       	breq	.-20     	; 0x141c <__divsf3+0x12>
    1430:	95 1b       	sub	r25, r21
    1432:	55 0b       	sbc	r21, r21
    1434:	bb 27       	eor	r27, r27
    1436:	aa 27       	eor	r26, r26
    1438:	62 17       	cp	r22, r18
    143a:	73 07       	cpc	r23, r19
    143c:	84 07       	cpc	r24, r20
    143e:	38 f0       	brcs	.+14     	; 0x144e <__divsf3_pse+0x26>
    1440:	9f 5f       	subi	r25, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	44 1f       	adc	r20, r20
    144a:	aa 1f       	adc	r26, r26
    144c:	a9 f3       	breq	.-22     	; 0x1438 <__divsf3_pse+0x10>
    144e:	33 d0       	rcall	.+102    	; 0x14b6 <__divsf3_pse+0x8e>
    1450:	0e 2e       	mov	r0, r30
    1452:	3a f0       	brmi	.+14     	; 0x1462 <__divsf3_pse+0x3a>
    1454:	e0 e8       	ldi	r30, 0x80	; 128
    1456:	30 d0       	rcall	.+96     	; 0x14b8 <__divsf3_pse+0x90>
    1458:	91 50       	subi	r25, 0x01	; 1
    145a:	50 40       	sbci	r21, 0x00	; 0
    145c:	e6 95       	lsr	r30
    145e:	00 1c       	adc	r0, r0
    1460:	ca f7       	brpl	.-14     	; 0x1454 <__divsf3_pse+0x2c>
    1462:	29 d0       	rcall	.+82     	; 0x14b6 <__divsf3_pse+0x8e>
    1464:	fe 2f       	mov	r31, r30
    1466:	27 d0       	rcall	.+78     	; 0x14b6 <__divsf3_pse+0x8e>
    1468:	66 0f       	add	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	88 1f       	adc	r24, r24
    146e:	bb 1f       	adc	r27, r27
    1470:	26 17       	cp	r18, r22
    1472:	37 07       	cpc	r19, r23
    1474:	48 07       	cpc	r20, r24
    1476:	ab 07       	cpc	r26, r27
    1478:	b0 e8       	ldi	r27, 0x80	; 128
    147a:	09 f0       	breq	.+2      	; 0x147e <__divsf3_pse+0x56>
    147c:	bb 0b       	sbc	r27, r27
    147e:	80 2d       	mov	r24, r0
    1480:	bf 01       	movw	r22, r30
    1482:	ff 27       	eor	r31, r31
    1484:	93 58       	subi	r25, 0x83	; 131
    1486:	5f 4f       	sbci	r21, 0xFF	; 255
    1488:	2a f0       	brmi	.+10     	; 0x1494 <__divsf3_pse+0x6c>
    148a:	9e 3f       	cpi	r25, 0xFE	; 254
    148c:	51 05       	cpc	r21, r1
    148e:	68 f0       	brcs	.+26     	; 0x14aa <__divsf3_pse+0x82>
    1490:	55 c0       	rjmp	.+170    	; 0x153c <__fp_inf>
    1492:	9f c0       	rjmp	.+318    	; 0x15d2 <__fp_szero>
    1494:	5f 3f       	cpi	r21, 0xFF	; 255
    1496:	ec f3       	brlt	.-6      	; 0x1492 <__divsf3_pse+0x6a>
    1498:	98 3e       	cpi	r25, 0xE8	; 232
    149a:	dc f3       	brlt	.-10     	; 0x1492 <__divsf3_pse+0x6a>
    149c:	86 95       	lsr	r24
    149e:	77 95       	ror	r23
    14a0:	67 95       	ror	r22
    14a2:	b7 95       	ror	r27
    14a4:	f7 95       	ror	r31
    14a6:	9f 5f       	subi	r25, 0xFF	; 255
    14a8:	c9 f7       	brne	.-14     	; 0x149c <__divsf3_pse+0x74>
    14aa:	88 0f       	add	r24, r24
    14ac:	91 1d       	adc	r25, r1
    14ae:	96 95       	lsr	r25
    14b0:	87 95       	ror	r24
    14b2:	97 f9       	bld	r25, 7
    14b4:	08 95       	ret
    14b6:	e1 e0       	ldi	r30, 0x01	; 1
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	88 1f       	adc	r24, r24
    14be:	bb 1f       	adc	r27, r27
    14c0:	62 17       	cp	r22, r18
    14c2:	73 07       	cpc	r23, r19
    14c4:	84 07       	cpc	r24, r20
    14c6:	ba 07       	cpc	r27, r26
    14c8:	20 f0       	brcs	.+8      	; 0x14d2 <__divsf3_pse+0xaa>
    14ca:	62 1b       	sub	r22, r18
    14cc:	73 0b       	sbc	r23, r19
    14ce:	84 0b       	sbc	r24, r20
    14d0:	ba 0b       	sbc	r27, r26
    14d2:	ee 1f       	adc	r30, r30
    14d4:	88 f7       	brcc	.-30     	; 0x14b8 <__divsf3_pse+0x90>
    14d6:	e0 95       	com	r30
    14d8:	08 95       	ret

000014da <__fixsfsi>:
    14da:	04 d0       	rcall	.+8      	; 0x14e4 <__fixunssfsi>
    14dc:	68 94       	set
    14de:	b1 11       	cpse	r27, r1
    14e0:	78 c0       	rjmp	.+240    	; 0x15d2 <__fp_szero>
    14e2:	08 95       	ret

000014e4 <__fixunssfsi>:
    14e4:	5b d0       	rcall	.+182    	; 0x159c <__fp_splitA>
    14e6:	88 f0       	brcs	.+34     	; 0x150a <__fixunssfsi+0x26>
    14e8:	9f 57       	subi	r25, 0x7F	; 127
    14ea:	90 f0       	brcs	.+36     	; 0x1510 <__fixunssfsi+0x2c>
    14ec:	b9 2f       	mov	r27, r25
    14ee:	99 27       	eor	r25, r25
    14f0:	b7 51       	subi	r27, 0x17	; 23
    14f2:	a0 f0       	brcs	.+40     	; 0x151c <__fixunssfsi+0x38>
    14f4:	d1 f0       	breq	.+52     	; 0x152a <__fixunssfsi+0x46>
    14f6:	66 0f       	add	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	88 1f       	adc	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	1a f0       	brmi	.+6      	; 0x1506 <__fixunssfsi+0x22>
    1500:	ba 95       	dec	r27
    1502:	c9 f7       	brne	.-14     	; 0x14f6 <__fixunssfsi+0x12>
    1504:	12 c0       	rjmp	.+36     	; 0x152a <__fixunssfsi+0x46>
    1506:	b1 30       	cpi	r27, 0x01	; 1
    1508:	81 f0       	breq	.+32     	; 0x152a <__fixunssfsi+0x46>
    150a:	62 d0       	rcall	.+196    	; 0x15d0 <__fp_zero>
    150c:	b1 e0       	ldi	r27, 0x01	; 1
    150e:	08 95       	ret
    1510:	5f c0       	rjmp	.+190    	; 0x15d0 <__fp_zero>
    1512:	67 2f       	mov	r22, r23
    1514:	78 2f       	mov	r23, r24
    1516:	88 27       	eor	r24, r24
    1518:	b8 5f       	subi	r27, 0xF8	; 248
    151a:	39 f0       	breq	.+14     	; 0x152a <__fixunssfsi+0x46>
    151c:	b9 3f       	cpi	r27, 0xF9	; 249
    151e:	cc f3       	brlt	.-14     	; 0x1512 <__fixunssfsi+0x2e>
    1520:	86 95       	lsr	r24
    1522:	77 95       	ror	r23
    1524:	67 95       	ror	r22
    1526:	b3 95       	inc	r27
    1528:	d9 f7       	brne	.-10     	; 0x1520 <__fixunssfsi+0x3c>
    152a:	3e f4       	brtc	.+14     	; 0x153a <__fixunssfsi+0x56>
    152c:	90 95       	com	r25
    152e:	80 95       	com	r24
    1530:	70 95       	com	r23
    1532:	61 95       	neg	r22
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	8f 4f       	sbci	r24, 0xFF	; 255
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	08 95       	ret

0000153c <__fp_inf>:
    153c:	97 f9       	bld	r25, 7
    153e:	9f 67       	ori	r25, 0x7F	; 127
    1540:	80 e8       	ldi	r24, 0x80	; 128
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	08 95       	ret

00001548 <__fp_nan>:
    1548:	9f ef       	ldi	r25, 0xFF	; 255
    154a:	80 ec       	ldi	r24, 0xC0	; 192
    154c:	08 95       	ret

0000154e <__fp_pscA>:
    154e:	00 24       	eor	r0, r0
    1550:	0a 94       	dec	r0
    1552:	16 16       	cp	r1, r22
    1554:	17 06       	cpc	r1, r23
    1556:	18 06       	cpc	r1, r24
    1558:	09 06       	cpc	r0, r25
    155a:	08 95       	ret

0000155c <__fp_pscB>:
    155c:	00 24       	eor	r0, r0
    155e:	0a 94       	dec	r0
    1560:	12 16       	cp	r1, r18
    1562:	13 06       	cpc	r1, r19
    1564:	14 06       	cpc	r1, r20
    1566:	05 06       	cpc	r0, r21
    1568:	08 95       	ret

0000156a <__fp_round>:
    156a:	09 2e       	mov	r0, r25
    156c:	03 94       	inc	r0
    156e:	00 0c       	add	r0, r0
    1570:	11 f4       	brne	.+4      	; 0x1576 <__fp_round+0xc>
    1572:	88 23       	and	r24, r24
    1574:	52 f0       	brmi	.+20     	; 0x158a <__fp_round+0x20>
    1576:	bb 0f       	add	r27, r27
    1578:	40 f4       	brcc	.+16     	; 0x158a <__fp_round+0x20>
    157a:	bf 2b       	or	r27, r31
    157c:	11 f4       	brne	.+4      	; 0x1582 <__fp_round+0x18>
    157e:	60 ff       	sbrs	r22, 0
    1580:	04 c0       	rjmp	.+8      	; 0x158a <__fp_round+0x20>
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	08 95       	ret

0000158c <__fp_split3>:
    158c:	57 fd       	sbrc	r21, 7
    158e:	90 58       	subi	r25, 0x80	; 128
    1590:	44 0f       	add	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	59 f0       	breq	.+22     	; 0x15ac <__fp_splitA+0x10>
    1596:	5f 3f       	cpi	r21, 0xFF	; 255
    1598:	71 f0       	breq	.+28     	; 0x15b6 <__fp_splitA+0x1a>
    159a:	47 95       	ror	r20

0000159c <__fp_splitA>:
    159c:	88 0f       	add	r24, r24
    159e:	97 fb       	bst	r25, 7
    15a0:	99 1f       	adc	r25, r25
    15a2:	61 f0       	breq	.+24     	; 0x15bc <__fp_splitA+0x20>
    15a4:	9f 3f       	cpi	r25, 0xFF	; 255
    15a6:	79 f0       	breq	.+30     	; 0x15c6 <__fp_splitA+0x2a>
    15a8:	87 95       	ror	r24
    15aa:	08 95       	ret
    15ac:	12 16       	cp	r1, r18
    15ae:	13 06       	cpc	r1, r19
    15b0:	14 06       	cpc	r1, r20
    15b2:	55 1f       	adc	r21, r21
    15b4:	f2 cf       	rjmp	.-28     	; 0x159a <__fp_split3+0xe>
    15b6:	46 95       	lsr	r20
    15b8:	f1 df       	rcall	.-30     	; 0x159c <__fp_splitA>
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <__fp_splitA+0x30>
    15bc:	16 16       	cp	r1, r22
    15be:	17 06       	cpc	r1, r23
    15c0:	18 06       	cpc	r1, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	f1 cf       	rjmp	.-30     	; 0x15a8 <__fp_splitA+0xc>
    15c6:	86 95       	lsr	r24
    15c8:	71 05       	cpc	r23, r1
    15ca:	61 05       	cpc	r22, r1
    15cc:	08 94       	sec
    15ce:	08 95       	ret

000015d0 <__fp_zero>:
    15d0:	e8 94       	clt

000015d2 <__fp_szero>:
    15d2:	bb 27       	eor	r27, r27
    15d4:	66 27       	eor	r22, r22
    15d6:	77 27       	eor	r23, r23
    15d8:	cb 01       	movw	r24, r22
    15da:	97 f9       	bld	r25, 7
    15dc:	08 95       	ret

000015de <strcmp>:
    15de:	fb 01       	movw	r30, r22
    15e0:	dc 01       	movw	r26, r24
    15e2:	8d 91       	ld	r24, X+
    15e4:	01 90       	ld	r0, Z+
    15e6:	80 19       	sub	r24, r0
    15e8:	01 10       	cpse	r0, r1
    15ea:	d9 f3       	breq	.-10     	; 0x15e2 <strcmp+0x4>
    15ec:	99 0b       	sbc	r25, r25
    15ee:	08 95       	ret

000015f0 <__itoa_ncheck>:
    15f0:	bb 27       	eor	r27, r27
    15f2:	4a 30       	cpi	r20, 0x0A	; 10
    15f4:	31 f4       	brne	.+12     	; 0x1602 <__itoa_ncheck+0x12>
    15f6:	99 23       	and	r25, r25
    15f8:	22 f4       	brpl	.+8      	; 0x1602 <__itoa_ncheck+0x12>
    15fa:	bd e2       	ldi	r27, 0x2D	; 45
    15fc:	90 95       	com	r25
    15fe:	81 95       	neg	r24
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <__utoa_common>

00001604 <__utoa_ncheck>:
    1604:	bb 27       	eor	r27, r27

00001606 <__utoa_common>:
    1606:	fb 01       	movw	r30, r22
    1608:	55 27       	eor	r21, r21
    160a:	aa 27       	eor	r26, r26
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	aa 1f       	adc	r26, r26
    1612:	a4 17       	cp	r26, r20
    1614:	10 f0       	brcs	.+4      	; 0x161a <__utoa_common+0x14>
    1616:	a4 1b       	sub	r26, r20
    1618:	83 95       	inc	r24
    161a:	50 51       	subi	r21, 0x10	; 16
    161c:	b9 f7       	brne	.-18     	; 0x160c <__utoa_common+0x6>
    161e:	a0 5d       	subi	r26, 0xD0	; 208
    1620:	aa 33       	cpi	r26, 0x3A	; 58
    1622:	08 f0       	brcs	.+2      	; 0x1626 <__utoa_common+0x20>
    1624:	a9 5d       	subi	r26, 0xD9	; 217
    1626:	a1 93       	st	Z+, r26
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	79 f7       	brne	.-34     	; 0x160a <__utoa_common+0x4>
    162c:	b1 11       	cpse	r27, r1
    162e:	b1 93       	st	Z+, r27
    1630:	11 92       	st	Z+, r1
    1632:	cb 01       	movw	r24, r22
    1634:	15 c2       	rjmp	.+1066   	; 0x1a60 <strrev>

00001636 <snprintf>:
    1636:	ae e0       	ldi	r26, 0x0E	; 14
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e0 e2       	ldi	r30, 0x20	; 32
    163c:	fb e0       	ldi	r31, 0x0B	; 11
    163e:	c8 c2       	rjmp	.+1424   	; 0x1bd0 <__prologue_saves__+0x1c>
    1640:	0d 89       	ldd	r16, Y+21	; 0x15
    1642:	1e 89       	ldd	r17, Y+22	; 0x16
    1644:	8f 89       	ldd	r24, Y+23	; 0x17
    1646:	98 8d       	ldd	r25, Y+24	; 0x18
    1648:	26 e0       	ldi	r18, 0x06	; 6
    164a:	2c 83       	std	Y+4, r18	; 0x04
    164c:	1a 83       	std	Y+2, r17	; 0x02
    164e:	09 83       	std	Y+1, r16	; 0x01
    1650:	97 ff       	sbrs	r25, 7
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <snprintf+0x22>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e8       	ldi	r25, 0x80	; 128
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	ae 01       	movw	r20, r28
    1660:	45 5e       	subi	r20, 0xE5	; 229
    1662:	5f 4f       	sbci	r21, 0xFF	; 255
    1664:	69 8d       	ldd	r22, Y+25	; 0x19
    1666:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	11 d0       	rcall	.+34     	; 0x1690 <vfprintf>
    166e:	4d 81       	ldd	r20, Y+5	; 0x05
    1670:	5e 81       	ldd	r21, Y+6	; 0x06
    1672:	57 fd       	sbrc	r21, 7
    1674:	0a c0       	rjmp	.+20     	; 0x168a <snprintf+0x54>
    1676:	2f 81       	ldd	r18, Y+7	; 0x07
    1678:	38 85       	ldd	r19, Y+8	; 0x08
    167a:	42 17       	cp	r20, r18
    167c:	53 07       	cpc	r21, r19
    167e:	0c f4       	brge	.+2      	; 0x1682 <snprintf+0x4c>
    1680:	9a 01       	movw	r18, r20
    1682:	f8 01       	movw	r30, r16
    1684:	e2 0f       	add	r30, r18
    1686:	f3 1f       	adc	r31, r19
    1688:	10 82       	st	Z, r1
    168a:	2e 96       	adiw	r28, 0x0e	; 14
    168c:	e4 e0       	ldi	r30, 0x04	; 4
    168e:	bc c2       	rjmp	.+1400   	; 0x1c08 <__epilogue_restores__+0x1c>

00001690 <vfprintf>:
    1690:	ab e0       	ldi	r26, 0x0B	; 11
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ed e4       	ldi	r30, 0x4D	; 77
    1696:	fb e0       	ldi	r31, 0x0B	; 11
    1698:	8d c2       	rjmp	.+1306   	; 0x1bb4 <__prologue_saves__>
    169a:	6c 01       	movw	r12, r24
    169c:	7b 01       	movw	r14, r22
    169e:	8a 01       	movw	r16, r20
    16a0:	fc 01       	movw	r30, r24
    16a2:	17 82       	std	Z+7, r1	; 0x07
    16a4:	16 82       	std	Z+6, r1	; 0x06
    16a6:	83 81       	ldd	r24, Z+3	; 0x03
    16a8:	81 ff       	sbrs	r24, 1
    16aa:	bf c1       	rjmp	.+894    	; 0x1a2a <vfprintf+0x39a>
    16ac:	ce 01       	movw	r24, r28
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	3c 01       	movw	r6, r24
    16b2:	f6 01       	movw	r30, r12
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	f7 01       	movw	r30, r14
    16b8:	93 fd       	sbrc	r25, 3
    16ba:	85 91       	lpm	r24, Z+
    16bc:	93 ff       	sbrs	r25, 3
    16be:	81 91       	ld	r24, Z+
    16c0:	7f 01       	movw	r14, r30
    16c2:	88 23       	and	r24, r24
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <vfprintf+0x38>
    16c6:	ad c1       	rjmp	.+858    	; 0x1a22 <vfprintf+0x392>
    16c8:	85 32       	cpi	r24, 0x25	; 37
    16ca:	39 f4       	brne	.+14     	; 0x16da <vfprintf+0x4a>
    16cc:	93 fd       	sbrc	r25, 3
    16ce:	85 91       	lpm	r24, Z+
    16d0:	93 ff       	sbrs	r25, 3
    16d2:	81 91       	ld	r24, Z+
    16d4:	7f 01       	movw	r14, r30
    16d6:	85 32       	cpi	r24, 0x25	; 37
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <vfprintf+0x52>
    16da:	b6 01       	movw	r22, r12
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	d0 d1       	rcall	.+928    	; 0x1a80 <fputc>
    16e0:	e8 cf       	rjmp	.-48     	; 0x16b2 <vfprintf+0x22>
    16e2:	91 2c       	mov	r9, r1
    16e4:	21 2c       	mov	r2, r1
    16e6:	31 2c       	mov	r3, r1
    16e8:	ff e1       	ldi	r31, 0x1F	; 31
    16ea:	f3 15       	cp	r31, r3
    16ec:	d8 f0       	brcs	.+54     	; 0x1724 <vfprintf+0x94>
    16ee:	8b 32       	cpi	r24, 0x2B	; 43
    16f0:	79 f0       	breq	.+30     	; 0x1710 <vfprintf+0x80>
    16f2:	38 f4       	brcc	.+14     	; 0x1702 <vfprintf+0x72>
    16f4:	80 32       	cpi	r24, 0x20	; 32
    16f6:	79 f0       	breq	.+30     	; 0x1716 <vfprintf+0x86>
    16f8:	83 32       	cpi	r24, 0x23	; 35
    16fa:	a1 f4       	brne	.+40     	; 0x1724 <vfprintf+0x94>
    16fc:	23 2d       	mov	r18, r3
    16fe:	20 61       	ori	r18, 0x10	; 16
    1700:	1d c0       	rjmp	.+58     	; 0x173c <vfprintf+0xac>
    1702:	8d 32       	cpi	r24, 0x2D	; 45
    1704:	61 f0       	breq	.+24     	; 0x171e <vfprintf+0x8e>
    1706:	80 33       	cpi	r24, 0x30	; 48
    1708:	69 f4       	brne	.+26     	; 0x1724 <vfprintf+0x94>
    170a:	23 2d       	mov	r18, r3
    170c:	21 60       	ori	r18, 0x01	; 1
    170e:	16 c0       	rjmp	.+44     	; 0x173c <vfprintf+0xac>
    1710:	83 2d       	mov	r24, r3
    1712:	82 60       	ori	r24, 0x02	; 2
    1714:	38 2e       	mov	r3, r24
    1716:	e3 2d       	mov	r30, r3
    1718:	e4 60       	ori	r30, 0x04	; 4
    171a:	3e 2e       	mov	r3, r30
    171c:	2a c0       	rjmp	.+84     	; 0x1772 <vfprintf+0xe2>
    171e:	f3 2d       	mov	r31, r3
    1720:	f8 60       	ori	r31, 0x08	; 8
    1722:	1d c0       	rjmp	.+58     	; 0x175e <vfprintf+0xce>
    1724:	37 fc       	sbrc	r3, 7
    1726:	2d c0       	rjmp	.+90     	; 0x1782 <vfprintf+0xf2>
    1728:	20 ed       	ldi	r18, 0xD0	; 208
    172a:	28 0f       	add	r18, r24
    172c:	2a 30       	cpi	r18, 0x0A	; 10
    172e:	40 f0       	brcs	.+16     	; 0x1740 <vfprintf+0xb0>
    1730:	8e 32       	cpi	r24, 0x2E	; 46
    1732:	b9 f4       	brne	.+46     	; 0x1762 <vfprintf+0xd2>
    1734:	36 fc       	sbrc	r3, 6
    1736:	75 c1       	rjmp	.+746    	; 0x1a22 <vfprintf+0x392>
    1738:	23 2d       	mov	r18, r3
    173a:	20 64       	ori	r18, 0x40	; 64
    173c:	32 2e       	mov	r3, r18
    173e:	19 c0       	rjmp	.+50     	; 0x1772 <vfprintf+0xe2>
    1740:	36 fe       	sbrs	r3, 6
    1742:	06 c0       	rjmp	.+12     	; 0x1750 <vfprintf+0xc0>
    1744:	8a e0       	ldi	r24, 0x0A	; 10
    1746:	98 9e       	mul	r9, r24
    1748:	20 0d       	add	r18, r0
    174a:	11 24       	eor	r1, r1
    174c:	92 2e       	mov	r9, r18
    174e:	11 c0       	rjmp	.+34     	; 0x1772 <vfprintf+0xe2>
    1750:	ea e0       	ldi	r30, 0x0A	; 10
    1752:	2e 9e       	mul	r2, r30
    1754:	20 0d       	add	r18, r0
    1756:	11 24       	eor	r1, r1
    1758:	22 2e       	mov	r2, r18
    175a:	f3 2d       	mov	r31, r3
    175c:	f0 62       	ori	r31, 0x20	; 32
    175e:	3f 2e       	mov	r3, r31
    1760:	08 c0       	rjmp	.+16     	; 0x1772 <vfprintf+0xe2>
    1762:	8c 36       	cpi	r24, 0x6C	; 108
    1764:	21 f4       	brne	.+8      	; 0x176e <vfprintf+0xde>
    1766:	83 2d       	mov	r24, r3
    1768:	80 68       	ori	r24, 0x80	; 128
    176a:	38 2e       	mov	r3, r24
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <vfprintf+0xe2>
    176e:	88 36       	cpi	r24, 0x68	; 104
    1770:	41 f4       	brne	.+16     	; 0x1782 <vfprintf+0xf2>
    1772:	f7 01       	movw	r30, r14
    1774:	93 fd       	sbrc	r25, 3
    1776:	85 91       	lpm	r24, Z+
    1778:	93 ff       	sbrs	r25, 3
    177a:	81 91       	ld	r24, Z+
    177c:	7f 01       	movw	r14, r30
    177e:	81 11       	cpse	r24, r1
    1780:	b3 cf       	rjmp	.-154    	; 0x16e8 <vfprintf+0x58>
    1782:	98 2f       	mov	r25, r24
    1784:	9f 7d       	andi	r25, 0xDF	; 223
    1786:	95 54       	subi	r25, 0x45	; 69
    1788:	93 30       	cpi	r25, 0x03	; 3
    178a:	28 f4       	brcc	.+10     	; 0x1796 <vfprintf+0x106>
    178c:	0c 5f       	subi	r16, 0xFC	; 252
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	9f e3       	ldi	r25, 0x3F	; 63
    1792:	99 83       	std	Y+1, r25	; 0x01
    1794:	0d c0       	rjmp	.+26     	; 0x17b0 <vfprintf+0x120>
    1796:	83 36       	cpi	r24, 0x63	; 99
    1798:	31 f0       	breq	.+12     	; 0x17a6 <vfprintf+0x116>
    179a:	83 37       	cpi	r24, 0x73	; 115
    179c:	71 f0       	breq	.+28     	; 0x17ba <vfprintf+0x12a>
    179e:	83 35       	cpi	r24, 0x53	; 83
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <vfprintf+0x114>
    17a2:	55 c0       	rjmp	.+170    	; 0x184e <vfprintf+0x1be>
    17a4:	20 c0       	rjmp	.+64     	; 0x17e6 <vfprintf+0x156>
    17a6:	f8 01       	movw	r30, r16
    17a8:	80 81       	ld	r24, Z
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	0e 5f       	subi	r16, 0xFE	; 254
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	88 24       	eor	r8, r8
    17b2:	83 94       	inc	r8
    17b4:	91 2c       	mov	r9, r1
    17b6:	53 01       	movw	r10, r6
    17b8:	12 c0       	rjmp	.+36     	; 0x17de <vfprintf+0x14e>
    17ba:	28 01       	movw	r4, r16
    17bc:	f2 e0       	ldi	r31, 0x02	; 2
    17be:	4f 0e       	add	r4, r31
    17c0:	51 1c       	adc	r5, r1
    17c2:	f8 01       	movw	r30, r16
    17c4:	a0 80       	ld	r10, Z
    17c6:	b1 80       	ldd	r11, Z+1	; 0x01
    17c8:	36 fe       	sbrs	r3, 6
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <vfprintf+0x142>
    17cc:	69 2d       	mov	r22, r9
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <vfprintf+0x146>
    17d2:	6f ef       	ldi	r22, 0xFF	; 255
    17d4:	7f ef       	ldi	r23, 0xFF	; 255
    17d6:	c5 01       	movw	r24, r10
    17d8:	38 d1       	rcall	.+624    	; 0x1a4a <strnlen>
    17da:	4c 01       	movw	r8, r24
    17dc:	82 01       	movw	r16, r4
    17de:	f3 2d       	mov	r31, r3
    17e0:	ff 77       	andi	r31, 0x7F	; 127
    17e2:	3f 2e       	mov	r3, r31
    17e4:	15 c0       	rjmp	.+42     	; 0x1810 <vfprintf+0x180>
    17e6:	28 01       	movw	r4, r16
    17e8:	22 e0       	ldi	r18, 0x02	; 2
    17ea:	42 0e       	add	r4, r18
    17ec:	51 1c       	adc	r5, r1
    17ee:	f8 01       	movw	r30, r16
    17f0:	a0 80       	ld	r10, Z
    17f2:	b1 80       	ldd	r11, Z+1	; 0x01
    17f4:	36 fe       	sbrs	r3, 6
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <vfprintf+0x16e>
    17f8:	69 2d       	mov	r22, r9
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <vfprintf+0x172>
    17fe:	6f ef       	ldi	r22, 0xFF	; 255
    1800:	7f ef       	ldi	r23, 0xFF	; 255
    1802:	c5 01       	movw	r24, r10
    1804:	17 d1       	rcall	.+558    	; 0x1a34 <strnlen_P>
    1806:	4c 01       	movw	r8, r24
    1808:	f3 2d       	mov	r31, r3
    180a:	f0 68       	ori	r31, 0x80	; 128
    180c:	3f 2e       	mov	r3, r31
    180e:	82 01       	movw	r16, r4
    1810:	33 fc       	sbrc	r3, 3
    1812:	19 c0       	rjmp	.+50     	; 0x1846 <vfprintf+0x1b6>
    1814:	82 2d       	mov	r24, r2
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	88 16       	cp	r8, r24
    181a:	99 06       	cpc	r9, r25
    181c:	a0 f4       	brcc	.+40     	; 0x1846 <vfprintf+0x1b6>
    181e:	b6 01       	movw	r22, r12
    1820:	80 e2       	ldi	r24, 0x20	; 32
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	2d d1       	rcall	.+602    	; 0x1a80 <fputc>
    1826:	2a 94       	dec	r2
    1828:	f5 cf       	rjmp	.-22     	; 0x1814 <vfprintf+0x184>
    182a:	f5 01       	movw	r30, r10
    182c:	37 fc       	sbrc	r3, 7
    182e:	85 91       	lpm	r24, Z+
    1830:	37 fe       	sbrs	r3, 7
    1832:	81 91       	ld	r24, Z+
    1834:	5f 01       	movw	r10, r30
    1836:	b6 01       	movw	r22, r12
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	22 d1       	rcall	.+580    	; 0x1a80 <fputc>
    183c:	21 10       	cpse	r2, r1
    183e:	2a 94       	dec	r2
    1840:	21 e0       	ldi	r18, 0x01	; 1
    1842:	82 1a       	sub	r8, r18
    1844:	91 08       	sbc	r9, r1
    1846:	81 14       	cp	r8, r1
    1848:	91 04       	cpc	r9, r1
    184a:	79 f7       	brne	.-34     	; 0x182a <vfprintf+0x19a>
    184c:	e1 c0       	rjmp	.+450    	; 0x1a10 <vfprintf+0x380>
    184e:	84 36       	cpi	r24, 0x64	; 100
    1850:	11 f0       	breq	.+4      	; 0x1856 <vfprintf+0x1c6>
    1852:	89 36       	cpi	r24, 0x69	; 105
    1854:	39 f5       	brne	.+78     	; 0x18a4 <vfprintf+0x214>
    1856:	f8 01       	movw	r30, r16
    1858:	37 fe       	sbrs	r3, 7
    185a:	07 c0       	rjmp	.+14     	; 0x186a <vfprintf+0x1da>
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	0c 5f       	subi	r16, 0xFC	; 252
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	08 c0       	rjmp	.+16     	; 0x187a <vfprintf+0x1ea>
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	07 2e       	mov	r0, r23
    1870:	00 0c       	add	r0, r0
    1872:	88 0b       	sbc	r24, r24
    1874:	99 0b       	sbc	r25, r25
    1876:	0e 5f       	subi	r16, 0xFE	; 254
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	f3 2d       	mov	r31, r3
    187c:	ff 76       	andi	r31, 0x6F	; 111
    187e:	3f 2e       	mov	r3, r31
    1880:	97 ff       	sbrs	r25, 7
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <vfprintf+0x206>
    1884:	90 95       	com	r25
    1886:	80 95       	com	r24
    1888:	70 95       	com	r23
    188a:	61 95       	neg	r22
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	f0 68       	ori	r31, 0x80	; 128
    1894:	3f 2e       	mov	r3, r31
    1896:	2a e0       	ldi	r18, 0x0A	; 10
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	a3 01       	movw	r20, r6
    189c:	2d d1       	rcall	.+602    	; 0x1af8 <__ultoa_invert>
    189e:	88 2e       	mov	r8, r24
    18a0:	86 18       	sub	r8, r6
    18a2:	44 c0       	rjmp	.+136    	; 0x192c <vfprintf+0x29c>
    18a4:	85 37       	cpi	r24, 0x75	; 117
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <vfprintf+0x224>
    18a8:	23 2d       	mov	r18, r3
    18aa:	2f 7e       	andi	r18, 0xEF	; 239
    18ac:	b2 2e       	mov	r11, r18
    18ae:	2a e0       	ldi	r18, 0x0A	; 10
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	25 c0       	rjmp	.+74     	; 0x18fe <vfprintf+0x26e>
    18b4:	93 2d       	mov	r25, r3
    18b6:	99 7f       	andi	r25, 0xF9	; 249
    18b8:	b9 2e       	mov	r11, r25
    18ba:	8f 36       	cpi	r24, 0x6F	; 111
    18bc:	c1 f0       	breq	.+48     	; 0x18ee <vfprintf+0x25e>
    18be:	18 f4       	brcc	.+6      	; 0x18c6 <vfprintf+0x236>
    18c0:	88 35       	cpi	r24, 0x58	; 88
    18c2:	79 f0       	breq	.+30     	; 0x18e2 <vfprintf+0x252>
    18c4:	ae c0       	rjmp	.+348    	; 0x1a22 <vfprintf+0x392>
    18c6:	80 37       	cpi	r24, 0x70	; 112
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <vfprintf+0x240>
    18ca:	88 37       	cpi	r24, 0x78	; 120
    18cc:	21 f0       	breq	.+8      	; 0x18d6 <vfprintf+0x246>
    18ce:	a9 c0       	rjmp	.+338    	; 0x1a22 <vfprintf+0x392>
    18d0:	e9 2f       	mov	r30, r25
    18d2:	e0 61       	ori	r30, 0x10	; 16
    18d4:	be 2e       	mov	r11, r30
    18d6:	b4 fe       	sbrs	r11, 4
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <vfprintf+0x264>
    18da:	fb 2d       	mov	r31, r11
    18dc:	f4 60       	ori	r31, 0x04	; 4
    18de:	bf 2e       	mov	r11, r31
    18e0:	09 c0       	rjmp	.+18     	; 0x18f4 <vfprintf+0x264>
    18e2:	34 fe       	sbrs	r3, 4
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <vfprintf+0x26a>
    18e6:	29 2f       	mov	r18, r25
    18e8:	26 60       	ori	r18, 0x06	; 6
    18ea:	b2 2e       	mov	r11, r18
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <vfprintf+0x26a>
    18ee:	28 e0       	ldi	r18, 0x08	; 8
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <vfprintf+0x26e>
    18f4:	20 e1       	ldi	r18, 0x10	; 16
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x26e>
    18fa:	20 e1       	ldi	r18, 0x10	; 16
    18fc:	32 e0       	ldi	r19, 0x02	; 2
    18fe:	f8 01       	movw	r30, r16
    1900:	b7 fe       	sbrs	r11, 7
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <vfprintf+0x282>
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	0c 5f       	subi	r16, 0xFC	; 252
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	06 c0       	rjmp	.+12     	; 0x191e <vfprintf+0x28e>
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 5f       	subi	r16, 0xFE	; 254
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	a3 01       	movw	r20, r6
    1920:	eb d0       	rcall	.+470    	; 0x1af8 <__ultoa_invert>
    1922:	88 2e       	mov	r8, r24
    1924:	86 18       	sub	r8, r6
    1926:	fb 2d       	mov	r31, r11
    1928:	ff 77       	andi	r31, 0x7F	; 127
    192a:	3f 2e       	mov	r3, r31
    192c:	36 fe       	sbrs	r3, 6
    192e:	0d c0       	rjmp	.+26     	; 0x194a <vfprintf+0x2ba>
    1930:	23 2d       	mov	r18, r3
    1932:	2e 7f       	andi	r18, 0xFE	; 254
    1934:	a2 2e       	mov	r10, r18
    1936:	89 14       	cp	r8, r9
    1938:	58 f4       	brcc	.+22     	; 0x1950 <vfprintf+0x2c0>
    193a:	34 fe       	sbrs	r3, 4
    193c:	0b c0       	rjmp	.+22     	; 0x1954 <vfprintf+0x2c4>
    193e:	32 fc       	sbrc	r3, 2
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <vfprintf+0x2c4>
    1942:	83 2d       	mov	r24, r3
    1944:	8e 7e       	andi	r24, 0xEE	; 238
    1946:	a8 2e       	mov	r10, r24
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <vfprintf+0x2c4>
    194a:	b8 2c       	mov	r11, r8
    194c:	a3 2c       	mov	r10, r3
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <vfprintf+0x2c6>
    1950:	b8 2c       	mov	r11, r8
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <vfprintf+0x2c6>
    1954:	b9 2c       	mov	r11, r9
    1956:	a4 fe       	sbrs	r10, 4
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <vfprintf+0x2e8>
    195a:	fe 01       	movw	r30, r28
    195c:	e8 0d       	add	r30, r8
    195e:	f1 1d       	adc	r31, r1
    1960:	80 81       	ld	r24, Z
    1962:	80 33       	cpi	r24, 0x30	; 48
    1964:	21 f4       	brne	.+8      	; 0x196e <vfprintf+0x2de>
    1966:	9a 2d       	mov	r25, r10
    1968:	99 7e       	andi	r25, 0xE9	; 233
    196a:	a9 2e       	mov	r10, r25
    196c:	09 c0       	rjmp	.+18     	; 0x1980 <vfprintf+0x2f0>
    196e:	a2 fe       	sbrs	r10, 2
    1970:	06 c0       	rjmp	.+12     	; 0x197e <vfprintf+0x2ee>
    1972:	b3 94       	inc	r11
    1974:	b3 94       	inc	r11
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <vfprintf+0x2f0>
    1978:	8a 2d       	mov	r24, r10
    197a:	86 78       	andi	r24, 0x86	; 134
    197c:	09 f0       	breq	.+2      	; 0x1980 <vfprintf+0x2f0>
    197e:	b3 94       	inc	r11
    1980:	a3 fc       	sbrc	r10, 3
    1982:	10 c0       	rjmp	.+32     	; 0x19a4 <vfprintf+0x314>
    1984:	a0 fe       	sbrs	r10, 0
    1986:	06 c0       	rjmp	.+12     	; 0x1994 <vfprintf+0x304>
    1988:	b2 14       	cp	r11, r2
    198a:	80 f4       	brcc	.+32     	; 0x19ac <vfprintf+0x31c>
    198c:	28 0c       	add	r2, r8
    198e:	92 2c       	mov	r9, r2
    1990:	9b 18       	sub	r9, r11
    1992:	0d c0       	rjmp	.+26     	; 0x19ae <vfprintf+0x31e>
    1994:	b2 14       	cp	r11, r2
    1996:	58 f4       	brcc	.+22     	; 0x19ae <vfprintf+0x31e>
    1998:	b6 01       	movw	r22, r12
    199a:	80 e2       	ldi	r24, 0x20	; 32
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	70 d0       	rcall	.+224    	; 0x1a80 <fputc>
    19a0:	b3 94       	inc	r11
    19a2:	f8 cf       	rjmp	.-16     	; 0x1994 <vfprintf+0x304>
    19a4:	b2 14       	cp	r11, r2
    19a6:	18 f4       	brcc	.+6      	; 0x19ae <vfprintf+0x31e>
    19a8:	2b 18       	sub	r2, r11
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <vfprintf+0x320>
    19ac:	98 2c       	mov	r9, r8
    19ae:	21 2c       	mov	r2, r1
    19b0:	a4 fe       	sbrs	r10, 4
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <vfprintf+0x342>
    19b4:	b6 01       	movw	r22, r12
    19b6:	80 e3       	ldi	r24, 0x30	; 48
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	62 d0       	rcall	.+196    	; 0x1a80 <fputc>
    19bc:	a2 fe       	sbrs	r10, 2
    19be:	16 c0       	rjmp	.+44     	; 0x19ec <vfprintf+0x35c>
    19c0:	a1 fc       	sbrc	r10, 1
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <vfprintf+0x33a>
    19c4:	88 e7       	ldi	r24, 0x78	; 120
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <vfprintf+0x33e>
    19ca:	88 e5       	ldi	r24, 0x58	; 88
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b6 01       	movw	r22, r12
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <vfprintf+0x35a>
    19d2:	8a 2d       	mov	r24, r10
    19d4:	86 78       	andi	r24, 0x86	; 134
    19d6:	51 f0       	breq	.+20     	; 0x19ec <vfprintf+0x35c>
    19d8:	a1 fe       	sbrs	r10, 1
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <vfprintf+0x350>
    19dc:	8b e2       	ldi	r24, 0x2B	; 43
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <vfprintf+0x352>
    19e0:	80 e2       	ldi	r24, 0x20	; 32
    19e2:	a7 fc       	sbrc	r10, 7
    19e4:	8d e2       	ldi	r24, 0x2D	; 45
    19e6:	b6 01       	movw	r22, r12
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	4a d0       	rcall	.+148    	; 0x1a80 <fputc>
    19ec:	89 14       	cp	r8, r9
    19ee:	30 f4       	brcc	.+12     	; 0x19fc <vfprintf+0x36c>
    19f0:	b6 01       	movw	r22, r12
    19f2:	80 e3       	ldi	r24, 0x30	; 48
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	44 d0       	rcall	.+136    	; 0x1a80 <fputc>
    19f8:	9a 94       	dec	r9
    19fa:	f8 cf       	rjmp	.-16     	; 0x19ec <vfprintf+0x35c>
    19fc:	8a 94       	dec	r8
    19fe:	f3 01       	movw	r30, r6
    1a00:	e8 0d       	add	r30, r8
    1a02:	f1 1d       	adc	r31, r1
    1a04:	80 81       	ld	r24, Z
    1a06:	b6 01       	movw	r22, r12
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	3a d0       	rcall	.+116    	; 0x1a80 <fputc>
    1a0c:	81 10       	cpse	r8, r1
    1a0e:	f6 cf       	rjmp	.-20     	; 0x19fc <vfprintf+0x36c>
    1a10:	22 20       	and	r2, r2
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <vfprintf+0x386>
    1a14:	4e ce       	rjmp	.-868    	; 0x16b2 <vfprintf+0x22>
    1a16:	b6 01       	movw	r22, r12
    1a18:	80 e2       	ldi	r24, 0x20	; 32
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	31 d0       	rcall	.+98     	; 0x1a80 <fputc>
    1a1e:	2a 94       	dec	r2
    1a20:	f7 cf       	rjmp	.-18     	; 0x1a10 <vfprintf+0x380>
    1a22:	f6 01       	movw	r30, r12
    1a24:	86 81       	ldd	r24, Z+6	; 0x06
    1a26:	97 81       	ldd	r25, Z+7	; 0x07
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <vfprintf+0x39e>
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	9f ef       	ldi	r25, 0xFF	; 255
    1a2e:	2b 96       	adiw	r28, 0x0b	; 11
    1a30:	e2 e1       	ldi	r30, 0x12	; 18
    1a32:	dc c0       	rjmp	.+440    	; 0x1bec <__epilogue_restores__>

00001a34 <strnlen_P>:
    1a34:	fc 01       	movw	r30, r24
    1a36:	05 90       	lpm	r0, Z+
    1a38:	61 50       	subi	r22, 0x01	; 1
    1a3a:	70 40       	sbci	r23, 0x00	; 0
    1a3c:	01 10       	cpse	r0, r1
    1a3e:	d8 f7       	brcc	.-10     	; 0x1a36 <strnlen_P+0x2>
    1a40:	80 95       	com	r24
    1a42:	90 95       	com	r25
    1a44:	8e 0f       	add	r24, r30
    1a46:	9f 1f       	adc	r25, r31
    1a48:	08 95       	ret

00001a4a <strnlen>:
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	61 50       	subi	r22, 0x01	; 1
    1a4e:	70 40       	sbci	r23, 0x00	; 0
    1a50:	01 90       	ld	r0, Z+
    1a52:	01 10       	cpse	r0, r1
    1a54:	d8 f7       	brcc	.-10     	; 0x1a4c <strnlen+0x2>
    1a56:	80 95       	com	r24
    1a58:	90 95       	com	r25
    1a5a:	8e 0f       	add	r24, r30
    1a5c:	9f 1f       	adc	r25, r31
    1a5e:	08 95       	ret

00001a60 <strrev>:
    1a60:	dc 01       	movw	r26, r24
    1a62:	fc 01       	movw	r30, r24
    1a64:	67 2f       	mov	r22, r23
    1a66:	71 91       	ld	r23, Z+
    1a68:	77 23       	and	r23, r23
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <strrev+0x4>
    1a6c:	32 97       	sbiw	r30, 0x02	; 2
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <strrev+0x18>
    1a70:	7c 91       	ld	r23, X
    1a72:	6d 93       	st	X+, r22
    1a74:	70 83       	st	Z, r23
    1a76:	62 91       	ld	r22, -Z
    1a78:	ae 17       	cp	r26, r30
    1a7a:	bf 07       	cpc	r27, r31
    1a7c:	c8 f3       	brcs	.-14     	; 0x1a70 <strrev+0x10>
    1a7e:	08 95       	ret

00001a80 <fputc>:
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	fb 01       	movw	r30, r22
    1a8a:	23 81       	ldd	r18, Z+3	; 0x03
    1a8c:	21 fd       	sbrc	r18, 1
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <fputc+0x16>
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	9f ef       	ldi	r25, 0xFF	; 255
    1a94:	2c c0       	rjmp	.+88     	; 0x1aee <fputc+0x6e>
    1a96:	22 ff       	sbrs	r18, 2
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <fputc+0x46>
    1a9a:	46 81       	ldd	r20, Z+6	; 0x06
    1a9c:	57 81       	ldd	r21, Z+7	; 0x07
    1a9e:	24 81       	ldd	r18, Z+4	; 0x04
    1aa0:	35 81       	ldd	r19, Z+5	; 0x05
    1aa2:	42 17       	cp	r20, r18
    1aa4:	53 07       	cpc	r21, r19
    1aa6:	44 f4       	brge	.+16     	; 0x1ab8 <fputc+0x38>
    1aa8:	a0 81       	ld	r26, Z
    1aaa:	b1 81       	ldd	r27, Z+1	; 0x01
    1aac:	9d 01       	movw	r18, r26
    1aae:	2f 5f       	subi	r18, 0xFF	; 255
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	31 83       	std	Z+1, r19	; 0x01
    1ab4:	20 83       	st	Z, r18
    1ab6:	8c 93       	st	X, r24
    1ab8:	26 81       	ldd	r18, Z+6	; 0x06
    1aba:	37 81       	ldd	r19, Z+7	; 0x07
    1abc:	2f 5f       	subi	r18, 0xFF	; 255
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	37 83       	std	Z+7, r19	; 0x07
    1ac2:	26 83       	std	Z+6, r18	; 0x06
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <fputc+0x6e>
    1ac6:	8b 01       	movw	r16, r22
    1ac8:	ec 01       	movw	r28, r24
    1aca:	fb 01       	movw	r30, r22
    1acc:	00 84       	ldd	r0, Z+8	; 0x08
    1ace:	f1 85       	ldd	r31, Z+9	; 0x09
    1ad0:	e0 2d       	mov	r30, r0
    1ad2:	09 95       	icall
    1ad4:	89 2b       	or	r24, r25
    1ad6:	e1 f6       	brne	.-72     	; 0x1a90 <fputc+0x10>
    1ad8:	d8 01       	movw	r26, r16
    1ada:	16 96       	adiw	r26, 0x06	; 6
    1adc:	8d 91       	ld	r24, X+
    1ade:	9c 91       	ld	r25, X
    1ae0:	17 97       	sbiw	r26, 0x07	; 7
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	17 96       	adiw	r26, 0x07	; 7
    1ae6:	9c 93       	st	X, r25
    1ae8:	8e 93       	st	-X, r24
    1aea:	16 97       	sbiw	r26, 0x06	; 6
    1aec:	ce 01       	movw	r24, r28
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	08 95       	ret

00001af8 <__ultoa_invert>:
    1af8:	fa 01       	movw	r30, r20
    1afa:	aa 27       	eor	r26, r26
    1afc:	28 30       	cpi	r18, 0x08	; 8
    1afe:	51 f1       	breq	.+84     	; 0x1b54 <__ultoa_invert+0x5c>
    1b00:	20 31       	cpi	r18, 0x10	; 16
    1b02:	81 f1       	breq	.+96     	; 0x1b64 <__ultoa_invert+0x6c>
    1b04:	e8 94       	clt
    1b06:	6f 93       	push	r22
    1b08:	6e 7f       	andi	r22, 0xFE	; 254
    1b0a:	6e 5f       	subi	r22, 0xFE	; 254
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b10:	9f 4f       	sbci	r25, 0xFF	; 255
    1b12:	af 4f       	sbci	r26, 0xFF	; 255
    1b14:	b1 e0       	ldi	r27, 0x01	; 1
    1b16:	3e d0       	rcall	.+124    	; 0x1b94 <__ultoa_invert+0x9c>
    1b18:	b4 e0       	ldi	r27, 0x04	; 4
    1b1a:	3c d0       	rcall	.+120    	; 0x1b94 <__ultoa_invert+0x9c>
    1b1c:	67 0f       	add	r22, r23
    1b1e:	78 1f       	adc	r23, r24
    1b20:	89 1f       	adc	r24, r25
    1b22:	9a 1f       	adc	r25, r26
    1b24:	a1 1d       	adc	r26, r1
    1b26:	68 0f       	add	r22, r24
    1b28:	79 1f       	adc	r23, r25
    1b2a:	8a 1f       	adc	r24, r26
    1b2c:	91 1d       	adc	r25, r1
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	6a 0f       	add	r22, r26
    1b32:	71 1d       	adc	r23, r1
    1b34:	81 1d       	adc	r24, r1
    1b36:	91 1d       	adc	r25, r1
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	20 d0       	rcall	.+64     	; 0x1b7c <__ultoa_invert+0x84>
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <__ultoa_invert+0x48>
    1b3e:	68 94       	set
    1b40:	3f 91       	pop	r19
    1b42:	2a e0       	ldi	r18, 0x0A	; 10
    1b44:	26 9f       	mul	r18, r22
    1b46:	11 24       	eor	r1, r1
    1b48:	30 19       	sub	r19, r0
    1b4a:	30 5d       	subi	r19, 0xD0	; 208
    1b4c:	31 93       	st	Z+, r19
    1b4e:	de f6       	brtc	.-74     	; 0x1b06 <__ultoa_invert+0xe>
    1b50:	cf 01       	movw	r24, r30
    1b52:	08 95       	ret
    1b54:	46 2f       	mov	r20, r22
    1b56:	47 70       	andi	r20, 0x07	; 7
    1b58:	40 5d       	subi	r20, 0xD0	; 208
    1b5a:	41 93       	st	Z+, r20
    1b5c:	b3 e0       	ldi	r27, 0x03	; 3
    1b5e:	0f d0       	rcall	.+30     	; 0x1b7e <__ultoa_invert+0x86>
    1b60:	c9 f7       	brne	.-14     	; 0x1b54 <__ultoa_invert+0x5c>
    1b62:	f6 cf       	rjmp	.-20     	; 0x1b50 <__ultoa_invert+0x58>
    1b64:	46 2f       	mov	r20, r22
    1b66:	4f 70       	andi	r20, 0x0F	; 15
    1b68:	40 5d       	subi	r20, 0xD0	; 208
    1b6a:	4a 33       	cpi	r20, 0x3A	; 58
    1b6c:	18 f0       	brcs	.+6      	; 0x1b74 <__ultoa_invert+0x7c>
    1b6e:	49 5d       	subi	r20, 0xD9	; 217
    1b70:	31 fd       	sbrc	r19, 1
    1b72:	40 52       	subi	r20, 0x20	; 32
    1b74:	41 93       	st	Z+, r20
    1b76:	02 d0       	rcall	.+4      	; 0x1b7c <__ultoa_invert+0x84>
    1b78:	a9 f7       	brne	.-22     	; 0x1b64 <__ultoa_invert+0x6c>
    1b7a:	ea cf       	rjmp	.-44     	; 0x1b50 <__ultoa_invert+0x58>
    1b7c:	b4 e0       	ldi	r27, 0x04	; 4
    1b7e:	a6 95       	lsr	r26
    1b80:	97 95       	ror	r25
    1b82:	87 95       	ror	r24
    1b84:	77 95       	ror	r23
    1b86:	67 95       	ror	r22
    1b88:	ba 95       	dec	r27
    1b8a:	c9 f7       	brne	.-14     	; 0x1b7e <__ultoa_invert+0x86>
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	61 05       	cpc	r22, r1
    1b90:	71 05       	cpc	r23, r1
    1b92:	08 95       	ret
    1b94:	9b 01       	movw	r18, r22
    1b96:	ac 01       	movw	r20, r24
    1b98:	0a 2e       	mov	r0, r26
    1b9a:	06 94       	lsr	r0
    1b9c:	57 95       	ror	r21
    1b9e:	47 95       	ror	r20
    1ba0:	37 95       	ror	r19
    1ba2:	27 95       	ror	r18
    1ba4:	ba 95       	dec	r27
    1ba6:	c9 f7       	brne	.-14     	; 0x1b9a <__ultoa_invert+0xa2>
    1ba8:	62 0f       	add	r22, r18
    1baa:	73 1f       	adc	r23, r19
    1bac:	84 1f       	adc	r24, r20
    1bae:	95 1f       	adc	r25, r21
    1bb0:	a0 1d       	adc	r26, r0
    1bb2:	08 95       	ret

00001bb4 <__prologue_saves__>:
    1bb4:	2f 92       	push	r2
    1bb6:	3f 92       	push	r3
    1bb8:	4f 92       	push	r4
    1bba:	5f 92       	push	r5
    1bbc:	6f 92       	push	r6
    1bbe:	7f 92       	push	r7
    1bc0:	8f 92       	push	r8
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	ca 1b       	sub	r28, r26
    1bde:	db 0b       	sbc	r29, r27
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	09 94       	ijmp

00001bec <__epilogue_restores__>:
    1bec:	2a 88       	ldd	r2, Y+18	; 0x12
    1bee:	39 88       	ldd	r3, Y+17	; 0x11
    1bf0:	48 88       	ldd	r4, Y+16	; 0x10
    1bf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bfe:	b9 84       	ldd	r11, Y+9	; 0x09
    1c00:	c8 84       	ldd	r12, Y+8	; 0x08
    1c02:	df 80       	ldd	r13, Y+7	; 0x07
    1c04:	ee 80       	ldd	r14, Y+6	; 0x06
    1c06:	fd 80       	ldd	r15, Y+5	; 0x05
    1c08:	0c 81       	ldd	r16, Y+4	; 0x04
    1c0a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c0c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c10:	ce 0f       	add	r28, r30
    1c12:	d1 1d       	adc	r29, r1
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	ed 01       	movw	r28, r26
    1c20:	08 95       	ret

00001c22 <_exit>:
    1c22:	f8 94       	cli

00001c24 <__stop_program>:
    1c24:	ff cf       	rjmp	.-2      	; 0x1c24 <__stop_program>
