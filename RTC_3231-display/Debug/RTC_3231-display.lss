
RTC_3231-display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000c14  00000c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003019  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c75  00000000  00000000  00003f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002486  00000000  00000000  00004bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009d8  00000000  00000000  0000707c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001243b  00000000  00000000  00007a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003df9  00000000  00000000  00019e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  0001dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000103e  00000000  00000000  0001de48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	66 d2       	rcall	.+1228   	; 0x568 <main>
  9c:	b9 c5       	rjmp	.+2930   	; 0xc10 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <a_ds3231_bcd2hex>:
 */
uint8_t a_ds3231_bcd2hex(uint8_t val) //static
{
    uint8_t temp;
    
    temp = val & 0x0F;              /* get ones place */
  a0:	38 2f       	mov	r19, r24
  a2:	3f 70       	andi	r19, 0x0F	; 15
    val = (val >> 4) & 0x0F;        /* get tens place */
  a4:	98 2f       	mov	r25, r24
  a6:	92 95       	swap	r25
  a8:	9f 70       	andi	r25, 0x0F	; 15
    val = val * 10;                 /* set tens place */
    temp = temp + val;              /* get hex */
    
    return temp;                    /* return hex */
  aa:	99 0f       	add	r25, r25
  ac:	29 2f       	mov	r18, r25
  ae:	22 0f       	add	r18, r18
  b0:	22 0f       	add	r18, r18
  b2:	89 2f       	mov	r24, r25
  b4:	82 0f       	add	r24, r18
}
  b6:	83 0f       	add	r24, r19
  b8:	08 95       	ret

000000ba <i2c_init>:
		if( twst == TW_SR_DATA_ACK)
		{
			return TWDR;
		}
	}
}
  ba:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  be:	88 e4       	ldi	r24, 0x48	; 72
  c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  c4:	08 95       	ret

000000c6 <i2c_start>:
  c6:	94 ea       	ldi	r25, 0xA4	; 164
  c8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	99 23       	and	r25, r25
  d4:	ec f7       	brge	.-6      	; 0xd0 <i2c_start+0xa>
  d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	98 30       	cpi	r25, 0x08	; 8
  de:	11 f0       	breq	.+4      	; 0xe4 <i2c_start+0x1e>
  e0:	90 31       	cpi	r25, 0x10	; 16
  e2:	a1 f4       	brne	.+40     	; 0x10c <i2c_start+0x46>
  e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <i2c_start+0x2c>
  f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  fc:	98 7f       	andi	r25, 0xF8	; 248
  fe:	98 31       	cpi	r25, 0x18	; 24
 100:	39 f0       	breq	.+14     	; 0x110 <i2c_start+0x4a>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 34       	cpi	r25, 0x40	; 64
 106:	29 f4       	brne	.+10     	; 0x112 <i2c_start+0x4c>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret

00000114 <i2c_rep_start>:
 114:	d8 cf       	rjmp	.-80     	; 0xc6 <i2c_start>
 116:	08 95       	ret

00000118 <i2c_write>:
 118:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_write+0xe>
 12c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 130:	98 7f       	andi	r25, 0xF8	; 248
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	98 32       	cpi	r25, 0x28	; 40
 136:	09 f4       	brne	.+2      	; 0x13a <i2c_write+0x22>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret

0000013c <i2c_readNak>:
Outputs:	Data received from I2C device
Description:Receives and returns the data from I2C device.
******************************************************************** */
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 142:	ec eb       	ldi	r30, 0xBC	; 188
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <i2c_readNak+0xa>
	
	return TWDR;
 14c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 150:	08 95       	ret

00000152 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 6f       	ori	r24, 0xF0	; 240
 156:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	8b 60       	ori	r24, 0x0B	; 11
 15c:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
 15e:	20 9a       	sbi	0x04, 0	; 4
 160:	08 95       	ret

00000162 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 d0       	rcall	.+0      	; 0x168 <lcd_write_4+0x6>
 168:	00 d0       	rcall	.+0      	; 0x16a <lcd_write_4+0x8>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	1a 82       	std	Y+2, r1	; 0x02
 172:	1b 82       	std	Y+3, r1	; 0x03
 174:	1c 82       	std	Y+4, r1	; 0x04
 176:	fe 01       	movw	r30, r28
 178:	31 96       	adiw	r30, 0x01	; 1
 17a:	27 e0       	ldi	r18, 0x07	; 7
 17c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
 17e:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
 180:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
 182:	ac 01       	movw	r20, r24
 184:	02 2e       	mov	r0, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <lcd_write_4+0x2a>
 188:	55 95       	asr	r21
 18a:	47 95       	ror	r20
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <lcd_write_4+0x26>
 190:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
 192:	60 83       	st	Z, r22
 194:	21 50       	subi	r18, 0x01	; 1
 196:	31 09       	sbc	r19, r1
 198:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
 19a:	23 30       	cpi	r18, 0x03	; 3
 19c:	31 05       	cpc	r19, r1
 19e:	89 f7       	brne	.-30     	; 0x182 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
 1a6:	2b b1       	in	r18, 0x0b	; 11
 1a8:	49 81       	ldd	r20, Y+1	; 0x01
 1aa:	30 e8       	ldi	r19, 0x80	; 128
 1ac:	43 9f       	mul	r20, r19
 1ae:	c0 01       	movw	r24, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	30 e4       	ldi	r19, 0x40	; 64
 1b6:	93 9f       	mul	r25, r19
 1b8:	a0 01       	movw	r20, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	48 2b       	or	r20, r24
 1be:	42 2b       	or	r20, r18
 1c0:	9b 81       	ldd	r25, Y+3	; 0x03
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	98 9f       	mul	r25, r24
 1c6:	90 01       	movw	r18, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	24 2b       	or	r18, r20
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
 1ce:	30 e1       	ldi	r19, 0x10	; 16
 1d0:	93 9f       	mul	r25, r19
 1d2:	c0 01       	movw	r24, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	82 2b       	or	r24, r18
 1d8:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
 1da:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	8a 95       	dec	r24
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_write_4+0x7c>
 1e2:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
 1e4:	5b 98       	cbi	0x0b, 3	; 11
 1e6:	35 e0       	ldi	r19, 0x05	; 5
 1e8:	3a 95       	dec	r19
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_write_4+0x86>
 1ec:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
 1fc:	cf 93       	push	r28
 1fe:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 200:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
 202:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 204:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
 206:	ad df       	rcall	.-166    	; 0x162 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
 208:	8c 2f       	mov	r24, r28
 20a:	82 95       	swap	r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	a9 df       	rcall	.-174    	; 0x162 <lcd_write_4>
}
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 214:	cf 93       	push	r28
 216:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 218:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 21a:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 21c:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 21e:	a1 df       	rcall	.-190    	; 0x162 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 220:	8c 2f       	mov	r24, r28
 222:	82 95       	swap	r24
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	9d df       	rcall	.-198    	; 0x162 <lcd_write_4>
}
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 22c:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 22e:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 230:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 232:	5b 9a       	sbi	0x0b, 3	; 11
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_check_BF_4+0xa>
 23a:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 23c:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 23e:	5b 98       	cbi	0x0b, 3	; 11
 240:	95 e0       	ldi	r25, 0x05	; 5
 242:	9a 95       	dec	r25
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_check_BF_4+0x16>
 246:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 248:	5b 9a       	sbi	0x0b, 3	; 11
 24a:	95 e0       	ldi	r25, 0x05	; 5
 24c:	9a 95       	dec	r25
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_check_BF_4+0x20>
 250:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 252:	5b 98       	cbi	0x0b, 3	; 11
 254:	95 e0       	ldi	r25, 0x05	; 5
 256:	9a 95       	dec	r25
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_check_BF_4+0x2a>
 25a:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
 25c:	88 23       	and	r24, r24
 25e:	4c f3       	brlt	.-46     	; 0x232 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 260:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 262:	57 9a       	sbi	0x0a, 7	; 10
 264:	08 95       	ret

00000266 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	81 ee       	ldi	r24, 0xE1	; 225
 26a:	94 e0       	ldi	r25, 0x04	; 4
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <lcd_init_4f+0x6>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init_4f+0x10>
 276:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 278:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 27a:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 27c:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	70 df       	rcall	.-288    	; 0x162 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	25 e3       	ldi	r18, 0x35	; 53
 284:	2a 95       	dec	r18
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init_4f+0x1e>
 288:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 28a:	80 e3       	ldi	r24, 0x30	; 48
 28c:	6a df       	rcall	.-300    	; 0x162 <lcd_write_4>
 28e:	8f e1       	ldi	r24, 0x1F	; 31
 290:	93 e0       	ldi	r25, 0x03	; 3
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init_4f+0x2c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 298:	00 00       	nop
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	62 df       	rcall	.-316    	; 0x162 <lcd_write_4>
 29e:	8f e3       	ldi	r24, 0x3F	; 63
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init_4f+0x3c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 2a8:	00 00       	nop
 2aa:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 2ac:	5a df       	rcall	.-332    	; 0x162 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 2ae:	be df       	rcall	.-132    	; 0x22c <lcd_check_BF_4>
 2b0:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 2b2:	b0 df       	rcall	.-160    	; 0x214 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 2b4:	bb df       	rcall	.-138    	; 0x22c <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
 2b6:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 2b8:	ad df       	rcall	.-166    	; 0x214 <lcd_write_instruction_4f>
 2ba:	b8 df       	rcall	.-144    	; 0x22c <lcd_check_BF_4>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 2be:	aa df       	rcall	.-172    	; 0x214 <lcd_write_instruction_4f>
 2c0:	b5 df       	rcall	.-150    	; 0x22c <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	a7 df       	rcall	.-178    	; 0x214 <lcd_write_instruction_4f>
 2c6:	b2 df       	rcall	.-156    	; 0x22c <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	a4 cf       	rjmp	.-184    	; 0x214 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 2cc:	08 95       	ret

000002ce <initLCD>:
 2ce:	41 df       	rcall	.-382    	; 0x152 <configLCDPorts>
 2d0:	ca df       	rcall	.-108    	; 0x266 <lcd_init_4f>
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	81 ee       	ldi	r24, 0xE1	; 225
 2d6:	94 e0       	ldi	r25, 0x04	; 4
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <initLCD+0xa>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <initLCD+0x14>
 2e2:	00 00       	nop
 2e4:	08 95       	ret

000002e6 <lcd_write_string_4f>:
 2e6:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	00 d0       	rcall	.+0      	; 0x2f0 <lcd_write_string_4f+0xa>
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
 2f6:	1a 82       	std	Y+2, r1	; 0x02
 2f8:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
 2fa:	e9 81       	ldd	r30, Y+1	; 0x01
 2fc:	fa 81       	ldd	r31, Y+2	; 0x02
 2fe:	e8 0f       	add	r30, r24
 300:	f9 1f       	adc	r31, r25
 302:	80 81       	ld	r24, Z
 304:	88 23       	and	r24, r24
 306:	99 f0       	breq	.+38     	; 0x32e <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
 308:	91 df       	rcall	.-222    	; 0x22c <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
 30a:	e9 81       	ldd	r30, Y+1	; 0x01
 30c:	fa 81       	ldd	r31, Y+2	; 0x02
 30e:	e0 0f       	add	r30, r16
 310:	f1 1f       	adc	r31, r17
 312:	80 81       	ld	r24, Z
 314:	73 df       	rcall	.-282    	; 0x1fc <lcd_write_character_4f>
        i++;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	9a 81       	ldd	r25, Y+2	; 0x02
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	9a 83       	std	Y+2, r25	; 0x02
 31e:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
 320:	e9 81       	ldd	r30, Y+1	; 0x01
 322:	fa 81       	ldd	r31, Y+2	; 0x02
 324:	e0 0f       	add	r30, r16
 326:	f1 1f       	adc	r31, r17
 328:	80 81       	ld	r24, Z
 32a:	81 11       	cpse	r24, r1
 32c:	ed cf       	rjmp	.-38     	; 0x308 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	af 97       	sbiw	r28, 0x2f	; 47
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	18 2f       	mov	r17, r24
 35c:	d6 2e       	mov	r13, r22
 35e:	07 2f       	mov	r16, r23
 360:	84 2f       	mov	r24, r20
 362:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
 364:	20 e2       	ldi	r18, 0x20	; 32
 366:	30 e2       	ldi	r19, 0x20	; 32
 368:	3a 83       	std	Y+2, r19	; 0x02
 36a:	29 83       	std	Y+1, r18	; 0x01
 36c:	20 e2       	ldi	r18, 0x20	; 32
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	3c 83       	std	Y+4, r19	; 0x04
 372:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
 374:	96 e1       	ldi	r25, 0x16	; 22
 376:	e4 e1       	ldi	r30, 0x14	; 20
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	de 01       	movw	r26, r28
 37c:	5a 96       	adiw	r26, 0x1a	; 26
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	9a 95       	dec	r25
 384:	e1 f7       	brne	.-8      	; 0x37e <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
 386:	4f 3f       	cpi	r20, 0xFF	; 255
 388:	31 f0       	breq	.+12     	; 0x396 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 38a:	4a e0       	ldi	r20, 0x0A	; 10
 38c:	be 01       	movw	r22, r28
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	24 d1       	rcall	.+584    	; 0x5de <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	71 e0       	ldi	r23, 0x01	; 1
 39a:	8d 2d       	mov	r24, r13
 39c:	90 2f       	mov	r25, r16
 39e:	16 d1       	rcall	.+556    	; 0x5cc <strcmp>
 3a0:	89 2b       	or	r24, r25
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <updateLCDScreen+0x6a>
 3a4:	ac c0       	rjmp	.+344    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	c7 01       	movw	r24, r14
 3ac:	0f d1       	rcall	.+542    	; 0x5cc <strcmp>
 3ae:	89 2b       	or	r24, r25
 3b0:	31 f4       	brne	.+12     	; 0x3be <updateLCDScreen+0x82>
 3b2:	0f 2e       	mov	r0, r31
 3b4:	f9 e2       	ldi	r31, 0x29	; 41
 3b6:	ef 2e       	mov	r14, r31
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	ff 2e       	mov	r15, r31
 3bc:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 3be:	ce 01       	movw	r24, r28
 3c0:	4a 96       	adiw	r24, 0x1a	; 26
 3c2:	9f 93       	push	r25
 3c4:	8f 93       	push	r24
 3c6:	ff 92       	push	r15
 3c8:	ef 92       	push	r14
 3ca:	49 97       	sbiw	r24, 0x19	; 25
 3cc:	9f 93       	push	r25
 3ce:	8f 93       	push	r24
 3d0:	0f 93       	push	r16
 3d2:	df 92       	push	r13
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	9f 93       	push	r25
 3da:	8f 93       	push	r24
 3dc:	1f 92       	push	r1
 3de:	85 e1       	ldi	r24, 0x15	; 21
 3e0:	8f 93       	push	r24
 3e2:	ce 01       	movw	r24, r28
 3e4:	05 96       	adiw	r24, 0x05	; 5
 3e6:	9f 93       	push	r25
 3e8:	8f 93       	push	r24
 3ea:	1c d1       	rcall	.+568    	; 0x624 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
 3ec:	6e e0       	ldi	r22, 0x0E	; 14
 3ee:	71 e0       	ldi	r23, 0x01	; 1
 3f0:	8d 2d       	mov	r24, r13
 3f2:	90 2f       	mov	r25, r16
 3f4:	eb d0       	rcall	.+470    	; 0x5cc <strcmp>
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	89 2b       	or	r24, r25
 402:	a9 f4       	brne	.+42     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 404:	ce 01       	movw	r24, r28
 406:	4a 96       	adiw	r24, 0x1a	; 26
 408:	9f 93       	push	r25
 40a:	8f 93       	push	r24
 40c:	8b e0       	ldi	r24, 0x0B	; 11
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	9f 93       	push	r25
 412:	8f 93       	push	r24
 414:	1f 92       	push	r1
 416:	85 e1       	ldi	r24, 0x15	; 21
 418:	8f 93       	push	r24
 41a:	ce 01       	movw	r24, r28
 41c:	05 96       	adiw	r24, 0x05	; 5
 41e:	9f 93       	push	r25
 420:	8f 93       	push	r24
 422:	00 d1       	rcall	.+512    	; 0x624 <snprintf>
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
 42e:	12 30       	cpi	r17, 0x02	; 2
 430:	a9 f0       	breq	.+42     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 432:	18 f4       	brcc	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 434:	11 30       	cpi	r17, 0x01	; 1
 436:	31 f0       	breq	.+12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 438:	34 c0       	rjmp	.+104    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 43a:	13 30       	cpi	r17, 0x03	; 3
 43c:	d9 f0       	breq	.+54     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 43e:	14 30       	cpi	r17, 0x04	; 4
 440:	29 f1       	breq	.+74     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
 442:	2f c0       	rjmp	.+94     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 444:	80 e8       	ldi	r24, 0x80	; 128
 446:	e6 de       	rcall	.-564    	; 0x214 <lcd_write_instruction_4f>
 448:	9f ef       	ldi	r25, 0xFF	; 255
 44a:	20 e7       	ldi	r18, 0x70	; 112
 44c:	32 e0       	ldi	r19, 0x02	; 2
 44e:	91 50       	subi	r25, 0x01	; 1
 450:	20 40       	sbci	r18, 0x00	; 0
 452:	30 40       	sbci	r19, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
 45a:	23 c0       	rjmp	.+70     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 45c:	80 ec       	ldi	r24, 0xC0	; 192
 45e:	da de       	rcall	.-588    	; 0x214 <lcd_write_instruction_4f>
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	90 e7       	ldi	r25, 0x70	; 112
 464:	22 e0       	ldi	r18, 0x02	; 2
 466:	81 50       	subi	r24, 0x01	; 1
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	20 40       	sbci	r18, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
 472:	17 c0       	rjmp	.+46     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 474:	84 e9       	ldi	r24, 0x94	; 148
 476:	ce de       	rcall	.-612    	; 0x214 <lcd_write_instruction_4f>
 478:	3f ef       	ldi	r19, 0xFF	; 255
 47a:	80 e7       	ldi	r24, 0x70	; 112
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	31 50       	subi	r19, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 488:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
 48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 48c:	84 ed       	ldi	r24, 0xD4	; 212
 48e:	c2 de       	rcall	.-636    	; 0x214 <lcd_write_instruction_4f>
 490:	2f ef       	ldi	r18, 0xFF	; 255
 492:	30 e7       	ldi	r19, 0x70	; 112
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	21 50       	subi	r18, 0x01	; 1
 498:	30 40       	sbci	r19, 0x00	; 0
 49a:	80 40       	sbci	r24, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
 4a0:	00 00       	nop
 4a2:	ce 01       	movw	r24, r28
 4a4:	05 96       	adiw	r24, 0x05	; 5
 4a6:	1f df       	rcall	.-450    	; 0x2e6 <lcd_write_string_4f>
 4a8:	9f ef       	ldi	r25, 0xFF	; 255
 4aa:	20 e7       	ldi	r18, 0x70	; 112
 4ac:	32 e0       	ldi	r19, 0x02	; 2
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	20 40       	sbci	r18, 0x00	; 0
 4b2:	30 40       	sbci	r19, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
}
 4ba:	46 c0       	rjmp	.+140    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 4bc:	ce 01       	movw	r24, r28
 4be:	4a 96       	adiw	r24, 0x1a	; 26
 4c0:	9f 93       	push	r25
 4c2:	8f 93       	push	r24
 4c4:	89 e2       	ldi	r24, 0x29	; 41
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	9f 93       	push	r25
 4ca:	8f 93       	push	r24
 4cc:	9e 01       	movw	r18, r28
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	3f 93       	push	r19
 4d4:	2f 93       	push	r18
 4d6:	9f 93       	push	r25
 4d8:	8f 93       	push	r24
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	9f 93       	push	r25
 4e0:	8f 93       	push	r24
 4e2:	1f 92       	push	r1
 4e4:	85 e1       	ldi	r24, 0x15	; 21
 4e6:	8f 93       	push	r24
 4e8:	ce 01       	movw	r24, r28
 4ea:	05 96       	adiw	r24, 0x05	; 5
 4ec:	9f 93       	push	r25
 4ee:	8f 93       	push	r24
 4f0:	99 d0       	rcall	.+306    	; 0x624 <snprintf>
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 4fc:	98 cf       	rjmp	.-208    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	71 e0       	ldi	r23, 0x01	; 1
 502:	c7 01       	movw	r24, r14
 504:	63 d0       	rcall	.+198    	; 0x5cc <strcmp>
 506:	89 2b       	or	r24, r25
 508:	c9 f2       	breq	.-78     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 50a:	ce 01       	movw	r24, r28
 50c:	4a 96       	adiw	r24, 0x1a	; 26
 50e:	9f 93       	push	r25
 510:	8f 93       	push	r24
 512:	ff 92       	push	r15
 514:	ef 92       	push	r14
 516:	49 97       	sbiw	r24, 0x19	; 25
 518:	9f 93       	push	r25
 51a:	8f 93       	push	r24
 51c:	89 e2       	ldi	r24, 0x29	; 41
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	9f 93       	push	r25
 522:	8f 93       	push	r24
 524:	85 e0       	ldi	r24, 0x05	; 5
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	9f 93       	push	r25
 52a:	8f 93       	push	r24
 52c:	1f 92       	push	r1
 52e:	85 e1       	ldi	r24, 0x15	; 21
 530:	8f 93       	push	r24
 532:	ce 01       	movw	r24, r28
 534:	05 96       	adiw	r24, 0x05	; 5
 536:	9f 93       	push	r25
 538:	8f 93       	push	r24
 53a:	74 d0       	rcall	.+232    	; 0x624 <snprintf>
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	73 cf       	rjmp	.-282    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
 548:	af 96       	adiw	r28, 0x2f	; 47
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	08 95       	ret

00000564 <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
 564:	eb ce       	rjmp	.-554    	; 0x33c <updateLCDScreen>
 566:	08 95       	ret

00000568 <main>:
#define WRITETIME 0		//1 - write time; 0 - read time
#define READTIME 1

int main (void)
{
	initLCD();
 568:	b2 de       	rcall	.-668    	; 0x2ce <initLCD>
	i2c_init();
 56a:	a7 dd       	rcall	.-1202   	; 0xba <i2c_init>
#if !WRITETIME // Read time

	ds3231_time_t myTime;
	while(1)
	{
		i2c_start((I2C_DEVICE<<1)+I2C_WRITE);
 56c:	80 ed       	ldi	r24, 0xD0	; 208
 56e:	ab dd       	rcall	.-1194   	; 0xc6 <i2c_start>
		i2c_write(DS3231_REG_SECOND);
 570:	80 e0       	ldi	r24, 0x00	; 0
		/* Send START condition with SLA+R */
		i2c_rep_start((I2C_DEVICE<<1)+I2C_READ);
 572:	d2 dd       	rcall	.-1116   	; 0x118 <i2c_write>
 574:	81 ed       	ldi	r24, 0xD1	; 209
		/* Receive data */
		myTime.second = a_ds3231_bcd2hex(i2c_readNak());
 576:	ce dd       	rcall	.-1124   	; 0x114 <i2c_rep_start>
 578:	e1 dd       	rcall	.-1086   	; 0x13c <i2c_readNak>
 57a:	92 dd       	rcall	.-1244   	; 0xa0 <a_ds3231_bcd2hex>
			
		i2c_start((I2C_DEVICE<<1)+I2C_WRITE);
 57c:	c8 2f       	mov	r28, r24
 57e:	80 ed       	ldi	r24, 0xD0	; 208
		i2c_write(DS3231_REG_MINUTE);
 580:	a2 dd       	rcall	.-1212   	; 0xc6 <i2c_start>
 582:	81 e0       	ldi	r24, 0x01	; 1
		/* Send START condition with SLA+R */
		i2c_rep_start((I2C_DEVICE<<1)+I2C_READ);
 584:	c9 dd       	rcall	.-1134   	; 0x118 <i2c_write>
 586:	81 ed       	ldi	r24, 0xD1	; 209
		/* Receive data */
		myTime.minute = a_ds3231_bcd2hex(i2c_readNak());
 588:	c5 dd       	rcall	.-1142   	; 0x114 <i2c_rep_start>
 58a:	d8 dd       	rcall	.-1104   	; 0x13c <i2c_readNak>
 58c:	89 dd       	rcall	.-1262   	; 0xa0 <a_ds3231_bcd2hex>
 58e:	d8 2f       	mov	r29, r24
			
 		i2c_start((I2C_DEVICE<<1)+I2C_WRITE);
 590:	80 ed       	ldi	r24, 0xD0	; 208
 592:	99 dd       	rcall	.-1230   	; 0xc6 <i2c_start>
 		i2c_write(DS3231_REG_HOUR);
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	c0 dd       	rcall	.-1152   	; 0x118 <i2c_write>
 598:	81 ed       	ldi	r24, 0xD1	; 209
 		/* Send START condition with SLA+R */
 		i2c_rep_start((I2C_DEVICE<<1)+I2C_READ);
 59a:	bc dd       	rcall	.-1160   	; 0x114 <i2c_rep_start>
 59c:	cf dd       	rcall	.-1122   	; 0x13c <i2c_readNak>
 59e:	80 dd       	rcall	.-1280   	; 0xa0 <a_ds3231_bcd2hex>
 		/* Receive data */
 		myTime.hour = a_ds3231_bcd2hex(i2c_readNak());
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	31 e0       	ldi	r19, 0x01	; 1
 5a4:	48 2f       	mov	r20, r24
	
	
		//displayLCD_main(1, "Current time", NONE, "NONE");
		displayLCD_main(2, "Hour: ", myTime.hour, "NONE");
 5a6:	6a e2       	ldi	r22, 0x2A	; 42
 5a8:	71 e0       	ldi	r23, 0x01	; 1
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	db df       	rcall	.-74     	; 0x564 <displayLCD_main>
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	31 e0       	ldi	r19, 0x01	; 1
 5b2:	4d 2f       	mov	r20, r29
		displayLCD_main(3, "Minute:", myTime.minute, "NONE");
 5b4:	61 e3       	ldi	r22, 0x31	; 49
 5b6:	71 e0       	ldi	r23, 0x01	; 1
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	d4 df       	rcall	.-88     	; 0x564 <displayLCD_main>
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	31 e0       	ldi	r19, 0x01	; 1
 5c0:	4c 2f       	mov	r20, r28
 5c2:	69 e3       	ldi	r22, 0x39	; 57
		displayLCD_main(4, "Second:", myTime.second, "NONE");
 5c4:	71 e0       	ldi	r23, 0x01	; 1
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	cd df       	rcall	.-102    	; 0x564 <displayLCD_main>
 5ca:	d0 cf       	rjmp	.-96     	; 0x56c <main+0x4>

000005cc <strcmp>:
 5cc:	fb 01       	movw	r30, r22
 5ce:	dc 01       	movw	r26, r24
 5d0:	8d 91       	ld	r24, X+
 5d2:	01 90       	ld	r0, Z+
 5d4:	80 19       	sub	r24, r0
 5d6:	01 10       	cpse	r0, r1
 5d8:	d9 f3       	breq	.-10     	; 0x5d0 <strcmp+0x4>
 5da:	99 0b       	sbc	r25, r25
 5dc:	08 95       	ret

000005de <__itoa_ncheck>:
 5de:	bb 27       	eor	r27, r27
 5e0:	4a 30       	cpi	r20, 0x0A	; 10
 5e2:	31 f4       	brne	.+12     	; 0x5f0 <__itoa_ncheck+0x12>
 5e4:	99 23       	and	r25, r25
 5e6:	22 f4       	brpl	.+8      	; 0x5f0 <__itoa_ncheck+0x12>
 5e8:	bd e2       	ldi	r27, 0x2D	; 45
 5ea:	90 95       	com	r25
 5ec:	81 95       	neg	r24
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <__utoa_common>

000005f2 <__utoa_ncheck>:
 5f2:	bb 27       	eor	r27, r27

000005f4 <__utoa_common>:
 5f4:	fb 01       	movw	r30, r22
 5f6:	55 27       	eor	r21, r21
 5f8:	aa 27       	eor	r26, r26
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	aa 1f       	adc	r26, r26
 600:	a4 17       	cp	r26, r20
 602:	10 f0       	brcs	.+4      	; 0x608 <__utoa_common+0x14>
 604:	a4 1b       	sub	r26, r20
 606:	83 95       	inc	r24
 608:	50 51       	subi	r21, 0x10	; 16
 60a:	b9 f7       	brne	.-18     	; 0x5fa <__utoa_common+0x6>
 60c:	a0 5d       	subi	r26, 0xD0	; 208
 60e:	aa 33       	cpi	r26, 0x3A	; 58
 610:	08 f0       	brcs	.+2      	; 0x614 <__utoa_common+0x20>
 612:	a9 5d       	subi	r26, 0xD9	; 217
 614:	a1 93       	st	Z+, r26
 616:	00 97       	sbiw	r24, 0x00	; 0
 618:	79 f7       	brne	.-34     	; 0x5f8 <__utoa_common+0x4>
 61a:	b1 11       	cpse	r27, r1
 61c:	b1 93       	st	Z+, r27
 61e:	11 92       	st	Z+, r1
 620:	cb 01       	movw	r24, r22
 622:	15 c2       	rjmp	.+1066   	; 0xa4e <strrev>

00000624 <snprintf>:
 624:	ae e0       	ldi	r26, 0x0E	; 14
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e7 e1       	ldi	r30, 0x17	; 23
 62a:	f3 e0       	ldi	r31, 0x03	; 3
 62c:	c8 c2       	rjmp	.+1424   	; 0xbbe <__prologue_saves__+0x1c>
 62e:	0d 89       	ldd	r16, Y+21	; 0x15
 630:	1e 89       	ldd	r17, Y+22	; 0x16
 632:	8f 89       	ldd	r24, Y+23	; 0x17
 634:	98 8d       	ldd	r25, Y+24	; 0x18
 636:	26 e0       	ldi	r18, 0x06	; 6
 638:	2c 83       	std	Y+4, r18	; 0x04
 63a:	1a 83       	std	Y+2, r17	; 0x02
 63c:	09 83       	std	Y+1, r16	; 0x01
 63e:	97 ff       	sbrs	r25, 7
 640:	02 c0       	rjmp	.+4      	; 0x646 <snprintf+0x22>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e8       	ldi	r25, 0x80	; 128
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	9e 83       	std	Y+6, r25	; 0x06
 64a:	8d 83       	std	Y+5, r24	; 0x05
 64c:	ae 01       	movw	r20, r28
 64e:	45 5e       	subi	r20, 0xE5	; 229
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	69 8d       	ldd	r22, Y+25	; 0x19
 654:	7a 8d       	ldd	r23, Y+26	; 0x1a
 656:	ce 01       	movw	r24, r28
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	11 d0       	rcall	.+34     	; 0x67e <vfprintf>
 65c:	4d 81       	ldd	r20, Y+5	; 0x05
 65e:	5e 81       	ldd	r21, Y+6	; 0x06
 660:	57 fd       	sbrc	r21, 7
 662:	0a c0       	rjmp	.+20     	; 0x678 <snprintf+0x54>
 664:	2f 81       	ldd	r18, Y+7	; 0x07
 666:	38 85       	ldd	r19, Y+8	; 0x08
 668:	42 17       	cp	r20, r18
 66a:	53 07       	cpc	r21, r19
 66c:	0c f4       	brge	.+2      	; 0x670 <snprintf+0x4c>
 66e:	9a 01       	movw	r18, r20
 670:	f8 01       	movw	r30, r16
 672:	e2 0f       	add	r30, r18
 674:	f3 1f       	adc	r31, r19
 676:	10 82       	st	Z, r1
 678:	2e 96       	adiw	r28, 0x0e	; 14
 67a:	e4 e0       	ldi	r30, 0x04	; 4
 67c:	bc c2       	rjmp	.+1400   	; 0xbf6 <__epilogue_restores__+0x1c>

0000067e <vfprintf>:
 67e:	ab e0       	ldi	r26, 0x0B	; 11
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	e4 e4       	ldi	r30, 0x44	; 68
 684:	f3 e0       	ldi	r31, 0x03	; 3
 686:	8d c2       	rjmp	.+1306   	; 0xba2 <__prologue_saves__>
 688:	6c 01       	movw	r12, r24
 68a:	7b 01       	movw	r14, r22
 68c:	8a 01       	movw	r16, r20
 68e:	fc 01       	movw	r30, r24
 690:	17 82       	std	Z+7, r1	; 0x07
 692:	16 82       	std	Z+6, r1	; 0x06
 694:	83 81       	ldd	r24, Z+3	; 0x03
 696:	81 ff       	sbrs	r24, 1
 698:	bf c1       	rjmp	.+894    	; 0xa18 <__stack+0x119>
 69a:	ce 01       	movw	r24, r28
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	3c 01       	movw	r6, r24
 6a0:	f6 01       	movw	r30, r12
 6a2:	93 81       	ldd	r25, Z+3	; 0x03
 6a4:	f7 01       	movw	r30, r14
 6a6:	93 fd       	sbrc	r25, 3
 6a8:	85 91       	lpm	r24, Z+
 6aa:	93 ff       	sbrs	r25, 3
 6ac:	81 91       	ld	r24, Z+
 6ae:	7f 01       	movw	r14, r30
 6b0:	88 23       	and	r24, r24
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <vfprintf+0x38>
 6b4:	ad c1       	rjmp	.+858    	; 0xa10 <__stack+0x111>
 6b6:	85 32       	cpi	r24, 0x25	; 37
 6b8:	39 f4       	brne	.+14     	; 0x6c8 <vfprintf+0x4a>
 6ba:	93 fd       	sbrc	r25, 3
 6bc:	85 91       	lpm	r24, Z+
 6be:	93 ff       	sbrs	r25, 3
 6c0:	81 91       	ld	r24, Z+
 6c2:	7f 01       	movw	r14, r30
 6c4:	85 32       	cpi	r24, 0x25	; 37
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <vfprintf+0x52>
 6c8:	b6 01       	movw	r22, r12
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	d0 d1       	rcall	.+928    	; 0xa6e <fputc>
 6ce:	e8 cf       	rjmp	.-48     	; 0x6a0 <vfprintf+0x22>
 6d0:	91 2c       	mov	r9, r1
 6d2:	21 2c       	mov	r2, r1
 6d4:	31 2c       	mov	r3, r1
 6d6:	ff e1       	ldi	r31, 0x1F	; 31
 6d8:	f3 15       	cp	r31, r3
 6da:	d8 f0       	brcs	.+54     	; 0x712 <vfprintf+0x94>
 6dc:	8b 32       	cpi	r24, 0x2B	; 43
 6de:	79 f0       	breq	.+30     	; 0x6fe <vfprintf+0x80>
 6e0:	38 f4       	brcc	.+14     	; 0x6f0 <vfprintf+0x72>
 6e2:	80 32       	cpi	r24, 0x20	; 32
 6e4:	79 f0       	breq	.+30     	; 0x704 <vfprintf+0x86>
 6e6:	83 32       	cpi	r24, 0x23	; 35
 6e8:	a1 f4       	brne	.+40     	; 0x712 <vfprintf+0x94>
 6ea:	23 2d       	mov	r18, r3
 6ec:	20 61       	ori	r18, 0x10	; 16
 6ee:	1d c0       	rjmp	.+58     	; 0x72a <vfprintf+0xac>
 6f0:	8d 32       	cpi	r24, 0x2D	; 45
 6f2:	61 f0       	breq	.+24     	; 0x70c <vfprintf+0x8e>
 6f4:	80 33       	cpi	r24, 0x30	; 48
 6f6:	69 f4       	brne	.+26     	; 0x712 <vfprintf+0x94>
 6f8:	23 2d       	mov	r18, r3
 6fa:	21 60       	ori	r18, 0x01	; 1
 6fc:	16 c0       	rjmp	.+44     	; 0x72a <vfprintf+0xac>
 6fe:	83 2d       	mov	r24, r3
 700:	82 60       	ori	r24, 0x02	; 2
 702:	38 2e       	mov	r3, r24
 704:	e3 2d       	mov	r30, r3
 706:	e4 60       	ori	r30, 0x04	; 4
 708:	3e 2e       	mov	r3, r30
 70a:	2a c0       	rjmp	.+84     	; 0x760 <vfprintf+0xe2>
 70c:	f3 2d       	mov	r31, r3
 70e:	f8 60       	ori	r31, 0x08	; 8
 710:	1d c0       	rjmp	.+58     	; 0x74c <vfprintf+0xce>
 712:	37 fc       	sbrc	r3, 7
 714:	2d c0       	rjmp	.+90     	; 0x770 <vfprintf+0xf2>
 716:	20 ed       	ldi	r18, 0xD0	; 208
 718:	28 0f       	add	r18, r24
 71a:	2a 30       	cpi	r18, 0x0A	; 10
 71c:	40 f0       	brcs	.+16     	; 0x72e <vfprintf+0xb0>
 71e:	8e 32       	cpi	r24, 0x2E	; 46
 720:	b9 f4       	brne	.+46     	; 0x750 <vfprintf+0xd2>
 722:	36 fc       	sbrc	r3, 6
 724:	75 c1       	rjmp	.+746    	; 0xa10 <__stack+0x111>
 726:	23 2d       	mov	r18, r3
 728:	20 64       	ori	r18, 0x40	; 64
 72a:	32 2e       	mov	r3, r18
 72c:	19 c0       	rjmp	.+50     	; 0x760 <vfprintf+0xe2>
 72e:	36 fe       	sbrs	r3, 6
 730:	06 c0       	rjmp	.+12     	; 0x73e <vfprintf+0xc0>
 732:	8a e0       	ldi	r24, 0x0A	; 10
 734:	98 9e       	mul	r9, r24
 736:	20 0d       	add	r18, r0
 738:	11 24       	eor	r1, r1
 73a:	92 2e       	mov	r9, r18
 73c:	11 c0       	rjmp	.+34     	; 0x760 <vfprintf+0xe2>
 73e:	ea e0       	ldi	r30, 0x0A	; 10
 740:	2e 9e       	mul	r2, r30
 742:	20 0d       	add	r18, r0
 744:	11 24       	eor	r1, r1
 746:	22 2e       	mov	r2, r18
 748:	f3 2d       	mov	r31, r3
 74a:	f0 62       	ori	r31, 0x20	; 32
 74c:	3f 2e       	mov	r3, r31
 74e:	08 c0       	rjmp	.+16     	; 0x760 <vfprintf+0xe2>
 750:	8c 36       	cpi	r24, 0x6C	; 108
 752:	21 f4       	brne	.+8      	; 0x75c <vfprintf+0xde>
 754:	83 2d       	mov	r24, r3
 756:	80 68       	ori	r24, 0x80	; 128
 758:	38 2e       	mov	r3, r24
 75a:	02 c0       	rjmp	.+4      	; 0x760 <vfprintf+0xe2>
 75c:	88 36       	cpi	r24, 0x68	; 104
 75e:	41 f4       	brne	.+16     	; 0x770 <vfprintf+0xf2>
 760:	f7 01       	movw	r30, r14
 762:	93 fd       	sbrc	r25, 3
 764:	85 91       	lpm	r24, Z+
 766:	93 ff       	sbrs	r25, 3
 768:	81 91       	ld	r24, Z+
 76a:	7f 01       	movw	r14, r30
 76c:	81 11       	cpse	r24, r1
 76e:	b3 cf       	rjmp	.-154    	; 0x6d6 <vfprintf+0x58>
 770:	98 2f       	mov	r25, r24
 772:	9f 7d       	andi	r25, 0xDF	; 223
 774:	95 54       	subi	r25, 0x45	; 69
 776:	93 30       	cpi	r25, 0x03	; 3
 778:	28 f4       	brcc	.+10     	; 0x784 <vfprintf+0x106>
 77a:	0c 5f       	subi	r16, 0xFC	; 252
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	9f e3       	ldi	r25, 0x3F	; 63
 780:	99 83       	std	Y+1, r25	; 0x01
 782:	0d c0       	rjmp	.+26     	; 0x79e <vfprintf+0x120>
 784:	83 36       	cpi	r24, 0x63	; 99
 786:	31 f0       	breq	.+12     	; 0x794 <vfprintf+0x116>
 788:	83 37       	cpi	r24, 0x73	; 115
 78a:	71 f0       	breq	.+28     	; 0x7a8 <vfprintf+0x12a>
 78c:	83 35       	cpi	r24, 0x53	; 83
 78e:	09 f0       	breq	.+2      	; 0x792 <vfprintf+0x114>
 790:	55 c0       	rjmp	.+170    	; 0x83c <vfprintf+0x1be>
 792:	20 c0       	rjmp	.+64     	; 0x7d4 <vfprintf+0x156>
 794:	f8 01       	movw	r30, r16
 796:	80 81       	ld	r24, Z
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	0e 5f       	subi	r16, 0xFE	; 254
 79c:	1f 4f       	sbci	r17, 0xFF	; 255
 79e:	88 24       	eor	r8, r8
 7a0:	83 94       	inc	r8
 7a2:	91 2c       	mov	r9, r1
 7a4:	53 01       	movw	r10, r6
 7a6:	12 c0       	rjmp	.+36     	; 0x7cc <vfprintf+0x14e>
 7a8:	28 01       	movw	r4, r16
 7aa:	f2 e0       	ldi	r31, 0x02	; 2
 7ac:	4f 0e       	add	r4, r31
 7ae:	51 1c       	adc	r5, r1
 7b0:	f8 01       	movw	r30, r16
 7b2:	a0 80       	ld	r10, Z
 7b4:	b1 80       	ldd	r11, Z+1	; 0x01
 7b6:	36 fe       	sbrs	r3, 6
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <vfprintf+0x142>
 7ba:	69 2d       	mov	r22, r9
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <vfprintf+0x146>
 7c0:	6f ef       	ldi	r22, 0xFF	; 255
 7c2:	7f ef       	ldi	r23, 0xFF	; 255
 7c4:	c5 01       	movw	r24, r10
 7c6:	38 d1       	rcall	.+624    	; 0xa38 <strnlen>
 7c8:	4c 01       	movw	r8, r24
 7ca:	82 01       	movw	r16, r4
 7cc:	f3 2d       	mov	r31, r3
 7ce:	ff 77       	andi	r31, 0x7F	; 127
 7d0:	3f 2e       	mov	r3, r31
 7d2:	15 c0       	rjmp	.+42     	; 0x7fe <vfprintf+0x180>
 7d4:	28 01       	movw	r4, r16
 7d6:	22 e0       	ldi	r18, 0x02	; 2
 7d8:	42 0e       	add	r4, r18
 7da:	51 1c       	adc	r5, r1
 7dc:	f8 01       	movw	r30, r16
 7de:	a0 80       	ld	r10, Z
 7e0:	b1 80       	ldd	r11, Z+1	; 0x01
 7e2:	36 fe       	sbrs	r3, 6
 7e4:	03 c0       	rjmp	.+6      	; 0x7ec <vfprintf+0x16e>
 7e6:	69 2d       	mov	r22, r9
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <vfprintf+0x172>
 7ec:	6f ef       	ldi	r22, 0xFF	; 255
 7ee:	7f ef       	ldi	r23, 0xFF	; 255
 7f0:	c5 01       	movw	r24, r10
 7f2:	17 d1       	rcall	.+558    	; 0xa22 <strnlen_P>
 7f4:	4c 01       	movw	r8, r24
 7f6:	f3 2d       	mov	r31, r3
 7f8:	f0 68       	ori	r31, 0x80	; 128
 7fa:	3f 2e       	mov	r3, r31
 7fc:	82 01       	movw	r16, r4
 7fe:	33 fc       	sbrc	r3, 3
 800:	19 c0       	rjmp	.+50     	; 0x834 <vfprintf+0x1b6>
 802:	82 2d       	mov	r24, r2
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	88 16       	cp	r8, r24
 808:	99 06       	cpc	r9, r25
 80a:	a0 f4       	brcc	.+40     	; 0x834 <vfprintf+0x1b6>
 80c:	b6 01       	movw	r22, r12
 80e:	80 e2       	ldi	r24, 0x20	; 32
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	2d d1       	rcall	.+602    	; 0xa6e <fputc>
 814:	2a 94       	dec	r2
 816:	f5 cf       	rjmp	.-22     	; 0x802 <vfprintf+0x184>
 818:	f5 01       	movw	r30, r10
 81a:	37 fc       	sbrc	r3, 7
 81c:	85 91       	lpm	r24, Z+
 81e:	37 fe       	sbrs	r3, 7
 820:	81 91       	ld	r24, Z+
 822:	5f 01       	movw	r10, r30
 824:	b6 01       	movw	r22, r12
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	22 d1       	rcall	.+580    	; 0xa6e <fputc>
 82a:	21 10       	cpse	r2, r1
 82c:	2a 94       	dec	r2
 82e:	21 e0       	ldi	r18, 0x01	; 1
 830:	82 1a       	sub	r8, r18
 832:	91 08       	sbc	r9, r1
 834:	81 14       	cp	r8, r1
 836:	91 04       	cpc	r9, r1
 838:	79 f7       	brne	.-34     	; 0x818 <vfprintf+0x19a>
 83a:	e1 c0       	rjmp	.+450    	; 0x9fe <__stack+0xff>
 83c:	84 36       	cpi	r24, 0x64	; 100
 83e:	11 f0       	breq	.+4      	; 0x844 <vfprintf+0x1c6>
 840:	89 36       	cpi	r24, 0x69	; 105
 842:	39 f5       	brne	.+78     	; 0x892 <vfprintf+0x214>
 844:	f8 01       	movw	r30, r16
 846:	37 fe       	sbrs	r3, 7
 848:	07 c0       	rjmp	.+14     	; 0x858 <vfprintf+0x1da>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	82 81       	ldd	r24, Z+2	; 0x02
 850:	93 81       	ldd	r25, Z+3	; 0x03
 852:	0c 5f       	subi	r16, 0xFC	; 252
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	08 c0       	rjmp	.+16     	; 0x868 <vfprintf+0x1ea>
 858:	60 81       	ld	r22, Z
 85a:	71 81       	ldd	r23, Z+1	; 0x01
 85c:	07 2e       	mov	r0, r23
 85e:	00 0c       	add	r0, r0
 860:	88 0b       	sbc	r24, r24
 862:	99 0b       	sbc	r25, r25
 864:	0e 5f       	subi	r16, 0xFE	; 254
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	f3 2d       	mov	r31, r3
 86a:	ff 76       	andi	r31, 0x6F	; 111
 86c:	3f 2e       	mov	r3, r31
 86e:	97 ff       	sbrs	r25, 7
 870:	09 c0       	rjmp	.+18     	; 0x884 <vfprintf+0x206>
 872:	90 95       	com	r25
 874:	80 95       	com	r24
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	f0 68       	ori	r31, 0x80	; 128
 882:	3f 2e       	mov	r3, r31
 884:	2a e0       	ldi	r18, 0x0A	; 10
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	a3 01       	movw	r20, r6
 88a:	2d d1       	rcall	.+602    	; 0xae6 <__ultoa_invert>
 88c:	88 2e       	mov	r8, r24
 88e:	86 18       	sub	r8, r6
 890:	44 c0       	rjmp	.+136    	; 0x91a <__stack+0x1b>
 892:	85 37       	cpi	r24, 0x75	; 117
 894:	31 f4       	brne	.+12     	; 0x8a2 <vfprintf+0x224>
 896:	23 2d       	mov	r18, r3
 898:	2f 7e       	andi	r18, 0xEF	; 239
 89a:	b2 2e       	mov	r11, r18
 89c:	2a e0       	ldi	r18, 0x0A	; 10
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	25 c0       	rjmp	.+74     	; 0x8ec <vfprintf+0x26e>
 8a2:	93 2d       	mov	r25, r3
 8a4:	99 7f       	andi	r25, 0xF9	; 249
 8a6:	b9 2e       	mov	r11, r25
 8a8:	8f 36       	cpi	r24, 0x6F	; 111
 8aa:	c1 f0       	breq	.+48     	; 0x8dc <vfprintf+0x25e>
 8ac:	18 f4       	brcc	.+6      	; 0x8b4 <vfprintf+0x236>
 8ae:	88 35       	cpi	r24, 0x58	; 88
 8b0:	79 f0       	breq	.+30     	; 0x8d0 <vfprintf+0x252>
 8b2:	ae c0       	rjmp	.+348    	; 0xa10 <__stack+0x111>
 8b4:	80 37       	cpi	r24, 0x70	; 112
 8b6:	19 f0       	breq	.+6      	; 0x8be <vfprintf+0x240>
 8b8:	88 37       	cpi	r24, 0x78	; 120
 8ba:	21 f0       	breq	.+8      	; 0x8c4 <vfprintf+0x246>
 8bc:	a9 c0       	rjmp	.+338    	; 0xa10 <__stack+0x111>
 8be:	e9 2f       	mov	r30, r25
 8c0:	e0 61       	ori	r30, 0x10	; 16
 8c2:	be 2e       	mov	r11, r30
 8c4:	b4 fe       	sbrs	r11, 4
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <vfprintf+0x264>
 8c8:	fb 2d       	mov	r31, r11
 8ca:	f4 60       	ori	r31, 0x04	; 4
 8cc:	bf 2e       	mov	r11, r31
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <vfprintf+0x264>
 8d0:	34 fe       	sbrs	r3, 4
 8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <vfprintf+0x26a>
 8d4:	29 2f       	mov	r18, r25
 8d6:	26 60       	ori	r18, 0x06	; 6
 8d8:	b2 2e       	mov	r11, r18
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <vfprintf+0x26a>
 8dc:	28 e0       	ldi	r18, 0x08	; 8
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	05 c0       	rjmp	.+10     	; 0x8ec <vfprintf+0x26e>
 8e2:	20 e1       	ldi	r18, 0x10	; 16
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x26e>
 8e8:	20 e1       	ldi	r18, 0x10	; 16
 8ea:	32 e0       	ldi	r19, 0x02	; 2
 8ec:	f8 01       	movw	r30, r16
 8ee:	b7 fe       	sbrs	r11, 7
 8f0:	07 c0       	rjmp	.+14     	; 0x900 <__stack+0x1>
 8f2:	60 81       	ld	r22, Z
 8f4:	71 81       	ldd	r23, Z+1	; 0x01
 8f6:	82 81       	ldd	r24, Z+2	; 0x02
 8f8:	93 81       	ldd	r25, Z+3	; 0x03
 8fa:	0c 5f       	subi	r16, 0xFC	; 252
 8fc:	1f 4f       	sbci	r17, 0xFF	; 255
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
 900:	60 81       	ld	r22, Z
 902:	71 81       	ldd	r23, Z+1	; 0x01
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 5f       	subi	r16, 0xFE	; 254
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	a3 01       	movw	r20, r6
 90e:	eb d0       	rcall	.+470    	; 0xae6 <__ultoa_invert>
 910:	88 2e       	mov	r8, r24
 912:	86 18       	sub	r8, r6
 914:	fb 2d       	mov	r31, r11
 916:	ff 77       	andi	r31, 0x7F	; 127
 918:	3f 2e       	mov	r3, r31
 91a:	36 fe       	sbrs	r3, 6
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__stack+0x39>
 91e:	23 2d       	mov	r18, r3
 920:	2e 7f       	andi	r18, 0xFE	; 254
 922:	a2 2e       	mov	r10, r18
 924:	89 14       	cp	r8, r9
 926:	58 f4       	brcc	.+22     	; 0x93e <__stack+0x3f>
 928:	34 fe       	sbrs	r3, 4
 92a:	0b c0       	rjmp	.+22     	; 0x942 <__stack+0x43>
 92c:	32 fc       	sbrc	r3, 2
 92e:	09 c0       	rjmp	.+18     	; 0x942 <__stack+0x43>
 930:	83 2d       	mov	r24, r3
 932:	8e 7e       	andi	r24, 0xEE	; 238
 934:	a8 2e       	mov	r10, r24
 936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0x43>
 938:	b8 2c       	mov	r11, r8
 93a:	a3 2c       	mov	r10, r3
 93c:	03 c0       	rjmp	.+6      	; 0x944 <__stack+0x45>
 93e:	b8 2c       	mov	r11, r8
 940:	01 c0       	rjmp	.+2      	; 0x944 <__stack+0x45>
 942:	b9 2c       	mov	r11, r9
 944:	a4 fe       	sbrs	r10, 4
 946:	0f c0       	rjmp	.+30     	; 0x966 <__stack+0x67>
 948:	fe 01       	movw	r30, r28
 94a:	e8 0d       	add	r30, r8
 94c:	f1 1d       	adc	r31, r1
 94e:	80 81       	ld	r24, Z
 950:	80 33       	cpi	r24, 0x30	; 48
 952:	21 f4       	brne	.+8      	; 0x95c <__stack+0x5d>
 954:	9a 2d       	mov	r25, r10
 956:	99 7e       	andi	r25, 0xE9	; 233
 958:	a9 2e       	mov	r10, r25
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__stack+0x6f>
 95c:	a2 fe       	sbrs	r10, 2
 95e:	06 c0       	rjmp	.+12     	; 0x96c <__stack+0x6d>
 960:	b3 94       	inc	r11
 962:	b3 94       	inc	r11
 964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
 966:	8a 2d       	mov	r24, r10
 968:	86 78       	andi	r24, 0x86	; 134
 96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x6f>
 96c:	b3 94       	inc	r11
 96e:	a3 fc       	sbrc	r10, 3
 970:	10 c0       	rjmp	.+32     	; 0x992 <__stack+0x93>
 972:	a0 fe       	sbrs	r10, 0
 974:	06 c0       	rjmp	.+12     	; 0x982 <__stack+0x83>
 976:	b2 14       	cp	r11, r2
 978:	80 f4       	brcc	.+32     	; 0x99a <__stack+0x9b>
 97a:	28 0c       	add	r2, r8
 97c:	92 2c       	mov	r9, r2
 97e:	9b 18       	sub	r9, r11
 980:	0d c0       	rjmp	.+26     	; 0x99c <__stack+0x9d>
 982:	b2 14       	cp	r11, r2
 984:	58 f4       	brcc	.+22     	; 0x99c <__stack+0x9d>
 986:	b6 01       	movw	r22, r12
 988:	80 e2       	ldi	r24, 0x20	; 32
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	70 d0       	rcall	.+224    	; 0xa6e <fputc>
 98e:	b3 94       	inc	r11
 990:	f8 cf       	rjmp	.-16     	; 0x982 <__stack+0x83>
 992:	b2 14       	cp	r11, r2
 994:	18 f4       	brcc	.+6      	; 0x99c <__stack+0x9d>
 996:	2b 18       	sub	r2, r11
 998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x9f>
 99a:	98 2c       	mov	r9, r8
 99c:	21 2c       	mov	r2, r1
 99e:	a4 fe       	sbrs	r10, 4
 9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <__stack+0xc1>
 9a2:	b6 01       	movw	r22, r12
 9a4:	80 e3       	ldi	r24, 0x30	; 48
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	62 d0       	rcall	.+196    	; 0xa6e <fputc>
 9aa:	a2 fe       	sbrs	r10, 2
 9ac:	16 c0       	rjmp	.+44     	; 0x9da <__stack+0xdb>
 9ae:	a1 fc       	sbrc	r10, 1
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	88 e7       	ldi	r24, 0x78	; 120
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__stack+0xbd>
 9b8:	88 e5       	ldi	r24, 0x58	; 88
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	b6 01       	movw	r22, r12
 9be:	0c c0       	rjmp	.+24     	; 0x9d8 <__stack+0xd9>
 9c0:	8a 2d       	mov	r24, r10
 9c2:	86 78       	andi	r24, 0x86	; 134
 9c4:	51 f0       	breq	.+20     	; 0x9da <__stack+0xdb>
 9c6:	a1 fe       	sbrs	r10, 1
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <__stack+0xcf>
 9ca:	8b e2       	ldi	r24, 0x2B	; 43
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__stack+0xd1>
 9ce:	80 e2       	ldi	r24, 0x20	; 32
 9d0:	a7 fc       	sbrc	r10, 7
 9d2:	8d e2       	ldi	r24, 0x2D	; 45
 9d4:	b6 01       	movw	r22, r12
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	4a d0       	rcall	.+148    	; 0xa6e <fputc>
 9da:	89 14       	cp	r8, r9
 9dc:	30 f4       	brcc	.+12     	; 0x9ea <__stack+0xeb>
 9de:	b6 01       	movw	r22, r12
 9e0:	80 e3       	ldi	r24, 0x30	; 48
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	44 d0       	rcall	.+136    	; 0xa6e <fputc>
 9e6:	9a 94       	dec	r9
 9e8:	f8 cf       	rjmp	.-16     	; 0x9da <__stack+0xdb>
 9ea:	8a 94       	dec	r8
 9ec:	f3 01       	movw	r30, r6
 9ee:	e8 0d       	add	r30, r8
 9f0:	f1 1d       	adc	r31, r1
 9f2:	80 81       	ld	r24, Z
 9f4:	b6 01       	movw	r22, r12
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	3a d0       	rcall	.+116    	; 0xa6e <fputc>
 9fa:	81 10       	cpse	r8, r1
 9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <__stack+0xeb>
 9fe:	22 20       	and	r2, r2
 a00:	09 f4       	brne	.+2      	; 0xa04 <__stack+0x105>
 a02:	4e ce       	rjmp	.-868    	; 0x6a0 <vfprintf+0x22>
 a04:	b6 01       	movw	r22, r12
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	31 d0       	rcall	.+98     	; 0xa6e <fputc>
 a0c:	2a 94       	dec	r2
 a0e:	f7 cf       	rjmp	.-18     	; 0x9fe <__stack+0xff>
 a10:	f6 01       	movw	r30, r12
 a12:	86 81       	ldd	r24, Z+6	; 0x06
 a14:	97 81       	ldd	r25, Z+7	; 0x07
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x11d>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	2b 96       	adiw	r28, 0x0b	; 11
 a1e:	e2 e1       	ldi	r30, 0x12	; 18
 a20:	dc c0       	rjmp	.+440    	; 0xbda <__epilogue_restores__>

00000a22 <strnlen_P>:
 a22:	fc 01       	movw	r30, r24
 a24:	05 90       	lpm	r0, Z+
 a26:	61 50       	subi	r22, 0x01	; 1
 a28:	70 40       	sbci	r23, 0x00	; 0
 a2a:	01 10       	cpse	r0, r1
 a2c:	d8 f7       	brcc	.-10     	; 0xa24 <strnlen_P+0x2>
 a2e:	80 95       	com	r24
 a30:	90 95       	com	r25
 a32:	8e 0f       	add	r24, r30
 a34:	9f 1f       	adc	r25, r31
 a36:	08 95       	ret

00000a38 <strnlen>:
 a38:	fc 01       	movw	r30, r24
 a3a:	61 50       	subi	r22, 0x01	; 1
 a3c:	70 40       	sbci	r23, 0x00	; 0
 a3e:	01 90       	ld	r0, Z+
 a40:	01 10       	cpse	r0, r1
 a42:	d8 f7       	brcc	.-10     	; 0xa3a <strnlen+0x2>
 a44:	80 95       	com	r24
 a46:	90 95       	com	r25
 a48:	8e 0f       	add	r24, r30
 a4a:	9f 1f       	adc	r25, r31
 a4c:	08 95       	ret

00000a4e <strrev>:
 a4e:	dc 01       	movw	r26, r24
 a50:	fc 01       	movw	r30, r24
 a52:	67 2f       	mov	r22, r23
 a54:	71 91       	ld	r23, Z+
 a56:	77 23       	and	r23, r23
 a58:	e1 f7       	brne	.-8      	; 0xa52 <strrev+0x4>
 a5a:	32 97       	sbiw	r30, 0x02	; 2
 a5c:	04 c0       	rjmp	.+8      	; 0xa66 <strrev+0x18>
 a5e:	7c 91       	ld	r23, X
 a60:	6d 93       	st	X+, r22
 a62:	70 83       	st	Z, r23
 a64:	62 91       	ld	r22, -Z
 a66:	ae 17       	cp	r26, r30
 a68:	bf 07       	cpc	r27, r31
 a6a:	c8 f3       	brcs	.-14     	; 0xa5e <strrev+0x10>
 a6c:	08 95       	ret

00000a6e <fputc>:
 a6e:	0f 93       	push	r16
 a70:	1f 93       	push	r17
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	fb 01       	movw	r30, r22
 a78:	23 81       	ldd	r18, Z+3	; 0x03
 a7a:	21 fd       	sbrc	r18, 1
 a7c:	03 c0       	rjmp	.+6      	; 0xa84 <fputc+0x16>
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
 a80:	9f ef       	ldi	r25, 0xFF	; 255
 a82:	2c c0       	rjmp	.+88     	; 0xadc <fputc+0x6e>
 a84:	22 ff       	sbrs	r18, 2
 a86:	16 c0       	rjmp	.+44     	; 0xab4 <fputc+0x46>
 a88:	46 81       	ldd	r20, Z+6	; 0x06
 a8a:	57 81       	ldd	r21, Z+7	; 0x07
 a8c:	24 81       	ldd	r18, Z+4	; 0x04
 a8e:	35 81       	ldd	r19, Z+5	; 0x05
 a90:	42 17       	cp	r20, r18
 a92:	53 07       	cpc	r21, r19
 a94:	44 f4       	brge	.+16     	; 0xaa6 <fputc+0x38>
 a96:	a0 81       	ld	r26, Z
 a98:	b1 81       	ldd	r27, Z+1	; 0x01
 a9a:	9d 01       	movw	r18, r26
 a9c:	2f 5f       	subi	r18, 0xFF	; 255
 a9e:	3f 4f       	sbci	r19, 0xFF	; 255
 aa0:	31 83       	std	Z+1, r19	; 0x01
 aa2:	20 83       	st	Z, r18
 aa4:	8c 93       	st	X, r24
 aa6:	26 81       	ldd	r18, Z+6	; 0x06
 aa8:	37 81       	ldd	r19, Z+7	; 0x07
 aaa:	2f 5f       	subi	r18, 0xFF	; 255
 aac:	3f 4f       	sbci	r19, 0xFF	; 255
 aae:	37 83       	std	Z+7, r19	; 0x07
 ab0:	26 83       	std	Z+6, r18	; 0x06
 ab2:	14 c0       	rjmp	.+40     	; 0xadc <fputc+0x6e>
 ab4:	8b 01       	movw	r16, r22
 ab6:	ec 01       	movw	r28, r24
 ab8:	fb 01       	movw	r30, r22
 aba:	00 84       	ldd	r0, Z+8	; 0x08
 abc:	f1 85       	ldd	r31, Z+9	; 0x09
 abe:	e0 2d       	mov	r30, r0
 ac0:	09 95       	icall
 ac2:	89 2b       	or	r24, r25
 ac4:	e1 f6       	brne	.-72     	; 0xa7e <fputc+0x10>
 ac6:	d8 01       	movw	r26, r16
 ac8:	16 96       	adiw	r26, 0x06	; 6
 aca:	8d 91       	ld	r24, X+
 acc:	9c 91       	ld	r25, X
 ace:	17 97       	sbiw	r26, 0x07	; 7
 ad0:	01 96       	adiw	r24, 0x01	; 1
 ad2:	17 96       	adiw	r26, 0x07	; 7
 ad4:	9c 93       	st	X, r25
 ad6:	8e 93       	st	-X, r24
 ad8:	16 97       	sbiw	r26, 0x06	; 6
 ada:	ce 01       	movw	r24, r28
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	1f 91       	pop	r17
 ae2:	0f 91       	pop	r16
 ae4:	08 95       	ret

00000ae6 <__ultoa_invert>:
 ae6:	fa 01       	movw	r30, r20
 ae8:	aa 27       	eor	r26, r26
 aea:	28 30       	cpi	r18, 0x08	; 8
 aec:	51 f1       	breq	.+84     	; 0xb42 <__ultoa_invert+0x5c>
 aee:	20 31       	cpi	r18, 0x10	; 16
 af0:	81 f1       	breq	.+96     	; 0xb52 <__ultoa_invert+0x6c>
 af2:	e8 94       	clt
 af4:	6f 93       	push	r22
 af6:	6e 7f       	andi	r22, 0xFE	; 254
 af8:	6e 5f       	subi	r22, 0xFE	; 254
 afa:	7f 4f       	sbci	r23, 0xFF	; 255
 afc:	8f 4f       	sbci	r24, 0xFF	; 255
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	af 4f       	sbci	r26, 0xFF	; 255
 b02:	b1 e0       	ldi	r27, 0x01	; 1
 b04:	3e d0       	rcall	.+124    	; 0xb82 <__ultoa_invert+0x9c>
 b06:	b4 e0       	ldi	r27, 0x04	; 4
 b08:	3c d0       	rcall	.+120    	; 0xb82 <__ultoa_invert+0x9c>
 b0a:	67 0f       	add	r22, r23
 b0c:	78 1f       	adc	r23, r24
 b0e:	89 1f       	adc	r24, r25
 b10:	9a 1f       	adc	r25, r26
 b12:	a1 1d       	adc	r26, r1
 b14:	68 0f       	add	r22, r24
 b16:	79 1f       	adc	r23, r25
 b18:	8a 1f       	adc	r24, r26
 b1a:	91 1d       	adc	r25, r1
 b1c:	a1 1d       	adc	r26, r1
 b1e:	6a 0f       	add	r22, r26
 b20:	71 1d       	adc	r23, r1
 b22:	81 1d       	adc	r24, r1
 b24:	91 1d       	adc	r25, r1
 b26:	a1 1d       	adc	r26, r1
 b28:	20 d0       	rcall	.+64     	; 0xb6a <__ultoa_invert+0x84>
 b2a:	09 f4       	brne	.+2      	; 0xb2e <__ultoa_invert+0x48>
 b2c:	68 94       	set
 b2e:	3f 91       	pop	r19
 b30:	2a e0       	ldi	r18, 0x0A	; 10
 b32:	26 9f       	mul	r18, r22
 b34:	11 24       	eor	r1, r1
 b36:	30 19       	sub	r19, r0
 b38:	30 5d       	subi	r19, 0xD0	; 208
 b3a:	31 93       	st	Z+, r19
 b3c:	de f6       	brtc	.-74     	; 0xaf4 <__ultoa_invert+0xe>
 b3e:	cf 01       	movw	r24, r30
 b40:	08 95       	ret
 b42:	46 2f       	mov	r20, r22
 b44:	47 70       	andi	r20, 0x07	; 7
 b46:	40 5d       	subi	r20, 0xD0	; 208
 b48:	41 93       	st	Z+, r20
 b4a:	b3 e0       	ldi	r27, 0x03	; 3
 b4c:	0f d0       	rcall	.+30     	; 0xb6c <__ultoa_invert+0x86>
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__ultoa_invert+0x5c>
 b50:	f6 cf       	rjmp	.-20     	; 0xb3e <__ultoa_invert+0x58>
 b52:	46 2f       	mov	r20, r22
 b54:	4f 70       	andi	r20, 0x0F	; 15
 b56:	40 5d       	subi	r20, 0xD0	; 208
 b58:	4a 33       	cpi	r20, 0x3A	; 58
 b5a:	18 f0       	brcs	.+6      	; 0xb62 <__ultoa_invert+0x7c>
 b5c:	49 5d       	subi	r20, 0xD9	; 217
 b5e:	31 fd       	sbrc	r19, 1
 b60:	40 52       	subi	r20, 0x20	; 32
 b62:	41 93       	st	Z+, r20
 b64:	02 d0       	rcall	.+4      	; 0xb6a <__ultoa_invert+0x84>
 b66:	a9 f7       	brne	.-22     	; 0xb52 <__ultoa_invert+0x6c>
 b68:	ea cf       	rjmp	.-44     	; 0xb3e <__ultoa_invert+0x58>
 b6a:	b4 e0       	ldi	r27, 0x04	; 4
 b6c:	a6 95       	lsr	r26
 b6e:	97 95       	ror	r25
 b70:	87 95       	ror	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__ultoa_invert+0x86>
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	61 05       	cpc	r22, r1
 b7e:	71 05       	cpc	r23, r1
 b80:	08 95       	ret
 b82:	9b 01       	movw	r18, r22
 b84:	ac 01       	movw	r20, r24
 b86:	0a 2e       	mov	r0, r26
 b88:	06 94       	lsr	r0
 b8a:	57 95       	ror	r21
 b8c:	47 95       	ror	r20
 b8e:	37 95       	ror	r19
 b90:	27 95       	ror	r18
 b92:	ba 95       	dec	r27
 b94:	c9 f7       	brne	.-14     	; 0xb88 <__ultoa_invert+0xa2>
 b96:	62 0f       	add	r22, r18
 b98:	73 1f       	adc	r23, r19
 b9a:	84 1f       	adc	r24, r20
 b9c:	95 1f       	adc	r25, r21
 b9e:	a0 1d       	adc	r26, r0
 ba0:	08 95       	ret

00000ba2 <__prologue_saves__>:
 ba2:	2f 92       	push	r2
 ba4:	3f 92       	push	r3
 ba6:	4f 92       	push	r4
 ba8:	5f 92       	push	r5
 baa:	6f 92       	push	r6
 bac:	7f 92       	push	r7
 bae:	8f 92       	push	r8
 bb0:	9f 92       	push	r9
 bb2:	af 92       	push	r10
 bb4:	bf 92       	push	r11
 bb6:	cf 92       	push	r12
 bb8:	df 92       	push	r13
 bba:	ef 92       	push	r14
 bbc:	ff 92       	push	r15
 bbe:	0f 93       	push	r16
 bc0:	1f 93       	push	r17
 bc2:	cf 93       	push	r28
 bc4:	df 93       	push	r29
 bc6:	cd b7       	in	r28, 0x3d	; 61
 bc8:	de b7       	in	r29, 0x3e	; 62
 bca:	ca 1b       	sub	r28, r26
 bcc:	db 0b       	sbc	r29, r27
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	09 94       	ijmp

00000bda <__epilogue_restores__>:
 bda:	2a 88       	ldd	r2, Y+18	; 0x12
 bdc:	39 88       	ldd	r3, Y+17	; 0x11
 bde:	48 88       	ldd	r4, Y+16	; 0x10
 be0:	5f 84       	ldd	r5, Y+15	; 0x0f
 be2:	6e 84       	ldd	r6, Y+14	; 0x0e
 be4:	7d 84       	ldd	r7, Y+13	; 0x0d
 be6:	8c 84       	ldd	r8, Y+12	; 0x0c
 be8:	9b 84       	ldd	r9, Y+11	; 0x0b
 bea:	aa 84       	ldd	r10, Y+10	; 0x0a
 bec:	b9 84       	ldd	r11, Y+9	; 0x09
 bee:	c8 84       	ldd	r12, Y+8	; 0x08
 bf0:	df 80       	ldd	r13, Y+7	; 0x07
 bf2:	ee 80       	ldd	r14, Y+6	; 0x06
 bf4:	fd 80       	ldd	r15, Y+5	; 0x05
 bf6:	0c 81       	ldd	r16, Y+4	; 0x04
 bf8:	1b 81       	ldd	r17, Y+3	; 0x03
 bfa:	aa 81       	ldd	r26, Y+2	; 0x02
 bfc:	b9 81       	ldd	r27, Y+1	; 0x01
 bfe:	ce 0f       	add	r28, r30
 c00:	d1 1d       	adc	r29, r1
 c02:	0f b6       	in	r0, 0x3f	; 63
 c04:	f8 94       	cli
 c06:	de bf       	out	0x3e, r29	; 62
 c08:	0f be       	out	0x3f, r0	; 63
 c0a:	cd bf       	out	0x3d, r28	; 61
 c0c:	ed 01       	movw	r28, r26
 c0e:	08 95       	ret

00000c10 <_exit>:
 c10:	f8 94       	cli

00000c12 <__stop_program>:
 c12:	ff cf       	rjmp	.-2      	; 0xc12 <__stop_program>
