
RTC_3231-display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000bf4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001611  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0a  00000000  00000000  00002441  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001216  00000000  00000000  00002e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00004064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011ca7  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a69  00000000  00000000  00015ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00016950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000d2b  00000000  00000000  00016a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	59 d2       	rcall	.+1202   	; 0x54e <main>
  9c:	a9 c5       	rjmp	.+2898   	; 0xbf0 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <i2c_init>:
		if( twst == TW_SR_DATA_ACK)
		{
			return TWDR;
		}
	}
}
  a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  a4:	88 e4       	ldi	r24, 0x48	; 72
  a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  aa:	08 95       	ret

000000ac <i2c_start>:
  ac:	94 ea       	ldi	r25, 0xA4	; 164
  ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b2:	ec eb       	ldi	r30, 0xBC	; 188
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	99 23       	and	r25, r25
  ba:	ec f7       	brge	.-6      	; 0xb6 <i2c_start+0xa>
  bc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c0:	98 7f       	andi	r25, 0xF8	; 248
  c2:	98 30       	cpi	r25, 0x08	; 8
  c4:	11 f0       	breq	.+4      	; 0xca <i2c_start+0x1e>
  c6:	90 31       	cpi	r25, 0x10	; 16
  c8:	a1 f4       	brne	.+40     	; 0xf2 <i2c_start+0x46>
  ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ce:	84 e8       	ldi	r24, 0x84	; 132
  d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d4:	ec eb       	ldi	r30, 0xBC	; 188
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 23       	and	r24, r24
  dc:	ec f7       	brge	.-6      	; 0xd8 <i2c_start+0x2c>
  de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e2:	98 7f       	andi	r25, 0xF8	; 248
  e4:	98 31       	cpi	r25, 0x18	; 24
  e6:	39 f0       	breq	.+14     	; 0xf6 <i2c_start+0x4a>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 34       	cpi	r25, 0x40	; 64
  ec:	29 f4       	brne	.+10     	; 0xf8 <i2c_start+0x4c>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	08 95       	ret
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret

000000fa <i2c_rep_start>:
  fa:	d8 cf       	rjmp	.-80     	; 0xac <i2c_start>
  fc:	08 95       	ret

000000fe <i2c_write>:
  fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 102:	84 e8       	ldi	r24, 0x84	; 132
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <i2c_write+0xe>
 112:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 116:	98 7f       	andi	r25, 0xF8	; 248
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	98 32       	cpi	r25, 0x28	; 40
 11c:	09 f4       	brne	.+2      	; 0x120 <i2c_write+0x22>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret

00000122 <i2c_readNak>:
Outputs:	Data received from I2C device
Description:Receives and returns the data from I2C device.
******************************************************************** */
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	ec f7       	brge	.-6      	; 0x12c <i2c_readNak+0xa>
	
	return TWDR;
 132:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 136:	08 95       	ret

00000138 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	80 6f       	ori	r24, 0xF0	; 240
 13c:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	8b 60       	ori	r24, 0x0B	; 11
 142:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
 144:	20 9a       	sbi	0x04, 0	; 4
 146:	08 95       	ret

00000148 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <lcd_write_4+0x6>
 14e:	00 d0       	rcall	.+0      	; 0x150 <lcd_write_4+0x8>
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
 154:	19 82       	std	Y+1, r1	; 0x01
 156:	1a 82       	std	Y+2, r1	; 0x02
 158:	1b 82       	std	Y+3, r1	; 0x03
 15a:	1c 82       	std	Y+4, r1	; 0x04
 15c:	fe 01       	movw	r30, r28
 15e:	31 96       	adiw	r30, 0x01	; 1
 160:	27 e0       	ldi	r18, 0x07	; 7
 162:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
 164:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
 166:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
 168:	ac 01       	movw	r20, r24
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <lcd_write_4+0x2a>
 16e:	55 95       	asr	r21
 170:	47 95       	ror	r20
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <lcd_write_4+0x26>
 176:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
 178:	60 83       	st	Z, r22
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	31 09       	sbc	r19, r1
 17e:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
 180:	23 30       	cpi	r18, 0x03	; 3
 182:	31 05       	cpc	r19, r1
 184:	89 f7       	brne	.-30     	; 0x168 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
 18c:	2b b1       	in	r18, 0x0b	; 11
 18e:	49 81       	ldd	r20, Y+1	; 0x01
 190:	30 e8       	ldi	r19, 0x80	; 128
 192:	43 9f       	mul	r20, r19
 194:	c0 01       	movw	r24, r0
 196:	11 24       	eor	r1, r1
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	30 e4       	ldi	r19, 0x40	; 64
 19c:	93 9f       	mul	r25, r19
 19e:	a0 01       	movw	r20, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	48 2b       	or	r20, r24
 1a4:	42 2b       	or	r20, r18
 1a6:	9b 81       	ldd	r25, Y+3	; 0x03
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	98 9f       	mul	r25, r24
 1ac:	90 01       	movw	r18, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	24 2b       	or	r18, r20
 1b2:	9c 81       	ldd	r25, Y+4	; 0x04
 1b4:	30 e1       	ldi	r19, 0x10	; 16
 1b6:	93 9f       	mul	r25, r19
 1b8:	c0 01       	movw	r24, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	82 2b       	or	r24, r18
 1be:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
 1c0:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_write_4+0x7c>
 1c8:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
 1ca:	5b 98       	cbi	0x0b, 3	; 11
 1cc:	35 e0       	ldi	r19, 0x05	; 5
 1ce:	3a 95       	dec	r19
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_write_4+0x86>
 1d2:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 1e6:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
 1e8:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 1ea:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
 1ec:	ad df       	rcall	.-166    	; 0x148 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
 1ee:	8c 2f       	mov	r24, r28
 1f0:	82 95       	swap	r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	a9 df       	rcall	.-174    	; 0x148 <lcd_write_4>
}
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 1fa:	cf 93       	push	r28
 1fc:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 1fe:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 200:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 202:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 204:	a1 df       	rcall	.-190    	; 0x148 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 206:	8c 2f       	mov	r24, r28
 208:	82 95       	swap	r24
 20a:	80 7f       	andi	r24, 0xF0	; 240
 20c:	9d df       	rcall	.-198    	; 0x148 <lcd_write_4>
}
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 212:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 214:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 216:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 218:	5b 9a       	sbi	0x0b, 3	; 11
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_check_BF_4+0xa>
 220:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 222:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 224:	5b 98       	cbi	0x0b, 3	; 11
 226:	95 e0       	ldi	r25, 0x05	; 5
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_check_BF_4+0x16>
 22c:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 22e:	5b 9a       	sbi	0x0b, 3	; 11
 230:	95 e0       	ldi	r25, 0x05	; 5
 232:	9a 95       	dec	r25
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_check_BF_4+0x20>
 236:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 238:	5b 98       	cbi	0x0b, 3	; 11
 23a:	95 e0       	ldi	r25, 0x05	; 5
 23c:	9a 95       	dec	r25
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_check_BF_4+0x2a>
 240:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
 242:	88 23       	and	r24, r24
 244:	4c f3       	brlt	.-46     	; 0x218 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 246:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 248:	57 9a       	sbi	0x0a, 7	; 10
 24a:	08 95       	ret

0000024c <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	81 ee       	ldi	r24, 0xE1	; 225
 250:	94 e0       	ldi	r25, 0x04	; 4
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <lcd_init_4f+0x6>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_init_4f+0x10>
 25c:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 25e:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 260:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 262:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	70 df       	rcall	.-288    	; 0x148 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	25 e3       	ldi	r18, 0x35	; 53
 26a:	2a 95       	dec	r18
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init_4f+0x1e>
 26e:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 270:	80 e3       	ldi	r24, 0x30	; 48
 272:	6a df       	rcall	.-300    	; 0x148 <lcd_write_4>
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_init_4f+0x2c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 27e:	00 00       	nop
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	62 df       	rcall	.-316    	; 0x148 <lcd_write_4>
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init_4f+0x3c>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 28e:	00 00       	nop
 290:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 292:	5a df       	rcall	.-332    	; 0x148 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 294:	be df       	rcall	.-132    	; 0x212 <lcd_check_BF_4>
 296:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 298:	b0 df       	rcall	.-160    	; 0x1fa <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 29a:	bb df       	rcall	.-138    	; 0x212 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
 29c:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 29e:	ad df       	rcall	.-166    	; 0x1fa <lcd_write_instruction_4f>
 2a0:	b8 df       	rcall	.-144    	; 0x212 <lcd_check_BF_4>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 2a4:	aa df       	rcall	.-172    	; 0x1fa <lcd_write_instruction_4f>
 2a6:	b5 df       	rcall	.-150    	; 0x212 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	a7 df       	rcall	.-178    	; 0x1fa <lcd_write_instruction_4f>
 2ac:	b2 df       	rcall	.-156    	; 0x212 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	a4 cf       	rjmp	.-184    	; 0x1fa <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 2b2:	08 95       	ret

000002b4 <initLCD>:
 2b4:	41 df       	rcall	.-382    	; 0x138 <configLCDPorts>
 2b6:	ca df       	rcall	.-108    	; 0x24c <lcd_init_4f>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	81 ee       	ldi	r24, 0xE1	; 225
 2bc:	94 e0       	ldi	r25, 0x04	; 4
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <initLCD+0xa>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <initLCD+0x14>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <lcd_write_string_4f>:
 2cc:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <lcd_write_string_4f+0xa>
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
 2dc:	1a 82       	std	Y+2, r1	; 0x02
 2de:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
 2e0:	e9 81       	ldd	r30, Y+1	; 0x01
 2e2:	fa 81       	ldd	r31, Y+2	; 0x02
 2e4:	e8 0f       	add	r30, r24
 2e6:	f9 1f       	adc	r31, r25
 2e8:	80 81       	ld	r24, Z
 2ea:	88 23       	and	r24, r24
 2ec:	99 f0       	breq	.+38     	; 0x314 <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
 2ee:	91 df       	rcall	.-222    	; 0x212 <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
 2f0:	e9 81       	ldd	r30, Y+1	; 0x01
 2f2:	fa 81       	ldd	r31, Y+2	; 0x02
 2f4:	e0 0f       	add	r30, r16
 2f6:	f1 1f       	adc	r31, r17
 2f8:	80 81       	ld	r24, Z
 2fa:	73 df       	rcall	.-282    	; 0x1e2 <lcd_write_character_4f>
        i++;
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	9a 83       	std	Y+2, r25	; 0x02
 304:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
 306:	e9 81       	ldd	r30, Y+1	; 0x01
 308:	fa 81       	ldd	r31, Y+2	; 0x02
 30a:	e0 0f       	add	r30, r16
 30c:	f1 1f       	adc	r31, r17
 30e:	80 81       	ld	r24, Z
 310:	81 11       	cpse	r24, r1
 312:	ed cf       	rjmp	.-38     	; 0x2ee <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	af 97       	sbiw	r28, 0x2f	; 47
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	18 2f       	mov	r17, r24
 342:	d6 2e       	mov	r13, r22
 344:	07 2f       	mov	r16, r23
 346:	84 2f       	mov	r24, r20
 348:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
 34a:	20 e2       	ldi	r18, 0x20	; 32
 34c:	30 e2       	ldi	r19, 0x20	; 32
 34e:	3a 83       	std	Y+2, r19	; 0x02
 350:	29 83       	std	Y+1, r18	; 0x01
 352:	20 e2       	ldi	r18, 0x20	; 32
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	3c 83       	std	Y+4, r19	; 0x04
 358:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
 35a:	96 e1       	ldi	r25, 0x16	; 22
 35c:	e4 e1       	ldi	r30, 0x14	; 20
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	de 01       	movw	r26, r28
 362:	5a 96       	adiw	r26, 0x1a	; 26
 364:	01 90       	ld	r0, Z+
 366:	0d 92       	st	X+, r0
 368:	9a 95       	dec	r25
 36a:	e1 f7       	brne	.-8      	; 0x364 <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
 36c:	4f 3f       	cpi	r20, 0xFF	; 255
 36e:	31 f0       	breq	.+12     	; 0x37c <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 370:	4a e0       	ldi	r20, 0x0A	; 10
 372:	be 01       	movw	r22, r28
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	21 d1       	rcall	.+578    	; 0x5be <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	71 e0       	ldi	r23, 0x01	; 1
 380:	8d 2d       	mov	r24, r13
 382:	90 2f       	mov	r25, r16
 384:	13 d1       	rcall	.+550    	; 0x5ac <strcmp>
 386:	89 2b       	or	r24, r25
 388:	09 f4       	brne	.+2      	; 0x38c <updateLCDScreen+0x6a>
 38a:	ac c0       	rjmp	.+344    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	71 e0       	ldi	r23, 0x01	; 1
 390:	c7 01       	movw	r24, r14
 392:	0c d1       	rcall	.+536    	; 0x5ac <strcmp>
 394:	89 2b       	or	r24, r25
 396:	31 f4       	brne	.+12     	; 0x3a4 <updateLCDScreen+0x82>
 398:	0f 2e       	mov	r0, r31
 39a:	f9 e2       	ldi	r31, 0x29	; 41
 39c:	ef 2e       	mov	r14, r31
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	ff 2e       	mov	r15, r31
 3a2:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 3a4:	ce 01       	movw	r24, r28
 3a6:	4a 96       	adiw	r24, 0x1a	; 26
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	ff 92       	push	r15
 3ae:	ef 92       	push	r14
 3b0:	49 97       	sbiw	r24, 0x19	; 25
 3b2:	9f 93       	push	r25
 3b4:	8f 93       	push	r24
 3b6:	0f 93       	push	r16
 3b8:	df 92       	push	r13
 3ba:	85 e0       	ldi	r24, 0x05	; 5
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	1f 92       	push	r1
 3c4:	85 e1       	ldi	r24, 0x15	; 21
 3c6:	8f 93       	push	r24
 3c8:	ce 01       	movw	r24, r28
 3ca:	05 96       	adiw	r24, 0x05	; 5
 3cc:	9f 93       	push	r25
 3ce:	8f 93       	push	r24
 3d0:	19 d1       	rcall	.+562    	; 0x604 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
 3d2:	6e e0       	ldi	r22, 0x0E	; 14
 3d4:	71 e0       	ldi	r23, 0x01	; 1
 3d6:	8d 2d       	mov	r24, r13
 3d8:	90 2f       	mov	r25, r16
 3da:	e8 d0       	rcall	.+464    	; 0x5ac <strcmp>
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	89 2b       	or	r24, r25
 3e8:	a9 f4       	brne	.+42     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ea:	ce 01       	movw	r24, r28
 3ec:	4a 96       	adiw	r24, 0x1a	; 26
 3ee:	9f 93       	push	r25
 3f0:	8f 93       	push	r24
 3f2:	8b e0       	ldi	r24, 0x0B	; 11
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	9f 93       	push	r25
 3f8:	8f 93       	push	r24
 3fa:	1f 92       	push	r1
 3fc:	85 e1       	ldi	r24, 0x15	; 21
 3fe:	8f 93       	push	r24
 400:	ce 01       	movw	r24, r28
 402:	05 96       	adiw	r24, 0x05	; 5
 404:	9f 93       	push	r25
 406:	8f 93       	push	r24
 408:	fd d0       	rcall	.+506    	; 0x604 <snprintf>
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
 414:	12 30       	cpi	r17, 0x02	; 2
 416:	a9 f0       	breq	.+42     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 418:	18 f4       	brcc	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41a:	11 30       	cpi	r17, 0x01	; 1
 41c:	31 f0       	breq	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41e:	34 c0       	rjmp	.+104    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 420:	13 30       	cpi	r17, 0x03	; 3
 422:	d9 f0       	breq	.+54     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 424:	14 30       	cpi	r17, 0x04	; 4
 426:	29 f1       	breq	.+74     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
 428:	2f c0       	rjmp	.+94     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 42a:	80 e8       	ldi	r24, 0x80	; 128
 42c:	e6 de       	rcall	.-564    	; 0x1fa <lcd_write_instruction_4f>
 42e:	9f ef       	ldi	r25, 0xFF	; 255
 430:	20 e7       	ldi	r18, 0x70	; 112
 432:	32 e0       	ldi	r19, 0x02	; 2
 434:	91 50       	subi	r25, 0x01	; 1
 436:	20 40       	sbci	r18, 0x00	; 0
 438:	30 40       	sbci	r19, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
 440:	23 c0       	rjmp	.+70     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 442:	80 ec       	ldi	r24, 0xC0	; 192
 444:	da de       	rcall	.-588    	; 0x1fa <lcd_write_instruction_4f>
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	90 e7       	ldi	r25, 0x70	; 112
 44a:	22 e0       	ldi	r18, 0x02	; 2
 44c:	81 50       	subi	r24, 0x01	; 1
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	20 40       	sbci	r18, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 456:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
 458:	17 c0       	rjmp	.+46     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 45a:	84 e9       	ldi	r24, 0x94	; 148
 45c:	ce de       	rcall	.-612    	; 0x1fa <lcd_write_instruction_4f>
 45e:	3f ef       	ldi	r19, 0xFF	; 255
 460:	80 e7       	ldi	r24, 0x70	; 112
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	31 50       	subi	r19, 0x01	; 1
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46e:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
 470:	0b c0       	rjmp	.+22     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 472:	84 ed       	ldi	r24, 0xD4	; 212
 474:	c2 de       	rcall	.-636    	; 0x1fa <lcd_write_instruction_4f>
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	30 e7       	ldi	r19, 0x70	; 112
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	30 40       	sbci	r19, 0x00	; 0
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
 486:	00 00       	nop
 488:	ce 01       	movw	r24, r28
 48a:	05 96       	adiw	r24, 0x05	; 5
 48c:	1f df       	rcall	.-450    	; 0x2cc <lcd_write_string_4f>
 48e:	9f ef       	ldi	r25, 0xFF	; 255
 490:	20 e7       	ldi	r18, 0x70	; 112
 492:	32 e0       	ldi	r19, 0x02	; 2
 494:	91 50       	subi	r25, 0x01	; 1
 496:	20 40       	sbci	r18, 0x00	; 0
 498:	30 40       	sbci	r19, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
}
 4a0:	46 c0       	rjmp	.+140    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 4a2:	ce 01       	movw	r24, r28
 4a4:	4a 96       	adiw	r24, 0x1a	; 26
 4a6:	9f 93       	push	r25
 4a8:	8f 93       	push	r24
 4aa:	89 e2       	ldi	r24, 0x29	; 41
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	9f 93       	push	r25
 4b0:	8f 93       	push	r24
 4b2:	9e 01       	movw	r18, r28
 4b4:	2f 5f       	subi	r18, 0xFF	; 255
 4b6:	3f 4f       	sbci	r19, 0xFF	; 255
 4b8:	3f 93       	push	r19
 4ba:	2f 93       	push	r18
 4bc:	9f 93       	push	r25
 4be:	8f 93       	push	r24
 4c0:	85 e0       	ldi	r24, 0x05	; 5
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	9f 93       	push	r25
 4c6:	8f 93       	push	r24
 4c8:	1f 92       	push	r1
 4ca:	85 e1       	ldi	r24, 0x15	; 21
 4cc:	8f 93       	push	r24
 4ce:	ce 01       	movw	r24, r28
 4d0:	05 96       	adiw	r24, 0x05	; 5
 4d2:	9f 93       	push	r25
 4d4:	8f 93       	push	r24
 4d6:	96 d0       	rcall	.+300    	; 0x604 <snprintf>
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 4e2:	98 cf       	rjmp	.-208    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	71 e0       	ldi	r23, 0x01	; 1
 4e8:	c7 01       	movw	r24, r14
 4ea:	60 d0       	rcall	.+192    	; 0x5ac <strcmp>
 4ec:	89 2b       	or	r24, r25
 4ee:	c9 f2       	breq	.-78     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 4f0:	ce 01       	movw	r24, r28
 4f2:	4a 96       	adiw	r24, 0x1a	; 26
 4f4:	9f 93       	push	r25
 4f6:	8f 93       	push	r24
 4f8:	ff 92       	push	r15
 4fa:	ef 92       	push	r14
 4fc:	49 97       	sbiw	r24, 0x19	; 25
 4fe:	9f 93       	push	r25
 500:	8f 93       	push	r24
 502:	89 e2       	ldi	r24, 0x29	; 41
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	9f 93       	push	r25
 508:	8f 93       	push	r24
 50a:	85 e0       	ldi	r24, 0x05	; 5
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	9f 93       	push	r25
 510:	8f 93       	push	r24
 512:	1f 92       	push	r1
 514:	85 e1       	ldi	r24, 0x15	; 21
 516:	8f 93       	push	r24
 518:	ce 01       	movw	r24, r28
 51a:	05 96       	adiw	r24, 0x05	; 5
 51c:	9f 93       	push	r25
 51e:	8f 93       	push	r24
 520:	71 d0       	rcall	.+226    	; 0x604 <snprintf>
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	73 cf       	rjmp	.-282    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
 52e:	af 96       	adiw	r28, 0x2f	; 47
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	df 90       	pop	r13
 548:	08 95       	ret

0000054a <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
 54a:	eb ce       	rjmp	.-554    	; 0x322 <updateLCDScreen>
 54c:	08 95       	ret

0000054e <main>:
#define IICDEBUG 0
#define READTIME 1

int main (void)
{
	initLCD();
 54e:	b2 de       	rcall	.-668    	; 0x2b4 <initLCD>
	i2c_init();
 550:	a7 dd       	rcall	.-1202   	; 0xa0 <i2c_init>
 552:	20 e0       	ldi	r18, 0x00	; 0
	displayLCD_main(1, "Hi", NONE, "NONE");
 554:	31 e0       	ldi	r19, 0x01	; 1
 556:	4f ef       	ldi	r20, 0xFF	; 255
 558:	6a e2       	ldi	r22, 0x2A	; 42
 55a:	71 e0       	ldi	r23, 0x01	; 1
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	f5 df       	rcall	.-22     	; 0x54a <displayLCD_main>

#if READTIME
		
	while(1)
	{
			i2c_start((I2C_DEVICE<<1)+I2C_WRITE);
 560:	80 ed       	ldi	r24, 0xD0	; 208
 562:	a4 dd       	rcall	.-1208   	; 0xac <i2c_start>
			i2c_write(DS3231_REG_SECOND);
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	cb dd       	rcall	.-1130   	; 0xfe <i2c_write>
			/* Send START condition with SLA+R */
			i2c_rep_start((I2C_DEVICE<<1)+I2C_READ);
 568:	81 ed       	ldi	r24, 0xD1	; 209
 56a:	c7 dd       	rcall	.-1138   	; 0xfa <i2c_rep_start>
			/* Receive data */
			myTime.second = i2c_readNak();
 56c:	da dd       	rcall	.-1100   	; 0x122 <i2c_readNak>
 56e:	c8 2f       	mov	r28, r24
			
			i2c_start((I2C_DEVICE<<1)+I2C_WRITE);
 570:	80 ed       	ldi	r24, 0xD0	; 208
 572:	9c dd       	rcall	.-1224   	; 0xac <i2c_start>
 574:	81 e0       	ldi	r24, 0x01	; 1
			i2c_write(DS3231_REG_MINUTE);
 576:	c3 dd       	rcall	.-1146   	; 0xfe <i2c_write>
 578:	81 ed       	ldi	r24, 0xD1	; 209
 57a:	bf dd       	rcall	.-1154   	; 0xfa <i2c_rep_start>
			/* Send START condition with SLA+R */
			i2c_rep_start((I2C_DEVICE<<1)+I2C_READ);
 57c:	d2 dd       	rcall	.-1116   	; 0x122 <i2c_readNak>
 57e:	d8 2f       	mov	r29, r24
			/* Receive data */
			myTime.minute = i2c_readNak();
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	31 e0       	ldi	r19, 0x01	; 1
 584:	4f ef       	ldi	r20, 0xFF	; 255
			
			displayLCD_main(1, "Current time", NONE, "NONE");
 586:	6d e2       	ldi	r22, 0x2D	; 45
 588:	71 e0       	ldi	r23, 0x01	; 1
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	de df       	rcall	.-68     	; 0x54a <displayLCD_main>
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	31 e0       	ldi	r19, 0x01	; 1
 592:	4d 2f       	mov	r20, r29
			displayLCD_main(2, "Minute: ", myTime.minute, "NONE");
 594:	6a e3       	ldi	r22, 0x3A	; 58
 596:	71 e0       	ldi	r23, 0x01	; 1
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	d7 df       	rcall	.-82     	; 0x54a <displayLCD_main>
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	31 e0       	ldi	r19, 0x01	; 1
 5a0:	4c 2f       	mov	r20, r28
			displayLCD_main(3, "Second:", myTime.second, "NONE");
 5a2:	63 e4       	ldi	r22, 0x43	; 67
 5a4:	71 e0       	ldi	r23, 0x01	; 1
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	d0 df       	rcall	.-96     	; 0x54a <displayLCD_main>
 5aa:	da cf       	rjmp	.-76     	; 0x560 <main+0x12>

000005ac <strcmp>:
 5ac:	fb 01       	movw	r30, r22
 5ae:	dc 01       	movw	r26, r24
 5b0:	8d 91       	ld	r24, X+
 5b2:	01 90       	ld	r0, Z+
 5b4:	80 19       	sub	r24, r0
 5b6:	01 10       	cpse	r0, r1
 5b8:	d9 f3       	breq	.-10     	; 0x5b0 <strcmp+0x4>
 5ba:	99 0b       	sbc	r25, r25
 5bc:	08 95       	ret

000005be <__itoa_ncheck>:
 5be:	bb 27       	eor	r27, r27
 5c0:	4a 30       	cpi	r20, 0x0A	; 10
 5c2:	31 f4       	brne	.+12     	; 0x5d0 <__itoa_ncheck+0x12>
 5c4:	99 23       	and	r25, r25
 5c6:	22 f4       	brpl	.+8      	; 0x5d0 <__itoa_ncheck+0x12>
 5c8:	bd e2       	ldi	r27, 0x2D	; 45
 5ca:	90 95       	com	r25
 5cc:	81 95       	neg	r24
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__utoa_common>

000005d2 <__utoa_ncheck>:
 5d2:	bb 27       	eor	r27, r27

000005d4 <__utoa_common>:
 5d4:	fb 01       	movw	r30, r22
 5d6:	55 27       	eor	r21, r21
 5d8:	aa 27       	eor	r26, r26
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	aa 1f       	adc	r26, r26
 5e0:	a4 17       	cp	r26, r20
 5e2:	10 f0       	brcs	.+4      	; 0x5e8 <__utoa_common+0x14>
 5e4:	a4 1b       	sub	r26, r20
 5e6:	83 95       	inc	r24
 5e8:	50 51       	subi	r21, 0x10	; 16
 5ea:	b9 f7       	brne	.-18     	; 0x5da <__utoa_common+0x6>
 5ec:	a0 5d       	subi	r26, 0xD0	; 208
 5ee:	aa 33       	cpi	r26, 0x3A	; 58
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__utoa_common+0x20>
 5f2:	a9 5d       	subi	r26, 0xD9	; 217
 5f4:	a1 93       	st	Z+, r26
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	79 f7       	brne	.-34     	; 0x5d8 <__utoa_common+0x4>
 5fa:	b1 11       	cpse	r27, r1
 5fc:	b1 93       	st	Z+, r27
 5fe:	11 92       	st	Z+, r1
 600:	cb 01       	movw	r24, r22
 602:	15 c2       	rjmp	.+1066   	; 0xa2e <strrev>

00000604 <snprintf>:
 604:	ae e0       	ldi	r26, 0x0E	; 14
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e7 e0       	ldi	r30, 0x07	; 7
 60a:	f3 e0       	ldi	r31, 0x03	; 3
 60c:	c8 c2       	rjmp	.+1424   	; 0xb9e <__prologue_saves__+0x1c>
 60e:	0d 89       	ldd	r16, Y+21	; 0x15
 610:	1e 89       	ldd	r17, Y+22	; 0x16
 612:	8f 89       	ldd	r24, Y+23	; 0x17
 614:	98 8d       	ldd	r25, Y+24	; 0x18
 616:	26 e0       	ldi	r18, 0x06	; 6
 618:	2c 83       	std	Y+4, r18	; 0x04
 61a:	1a 83       	std	Y+2, r17	; 0x02
 61c:	09 83       	std	Y+1, r16	; 0x01
 61e:	97 ff       	sbrs	r25, 7
 620:	02 c0       	rjmp	.+4      	; 0x626 <snprintf+0x22>
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e8       	ldi	r25, 0x80	; 128
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	9e 83       	std	Y+6, r25	; 0x06
 62a:	8d 83       	std	Y+5, r24	; 0x05
 62c:	ae 01       	movw	r20, r28
 62e:	45 5e       	subi	r20, 0xE5	; 229
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	69 8d       	ldd	r22, Y+25	; 0x19
 634:	7a 8d       	ldd	r23, Y+26	; 0x1a
 636:	ce 01       	movw	r24, r28
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	11 d0       	rcall	.+34     	; 0x65e <vfprintf>
 63c:	4d 81       	ldd	r20, Y+5	; 0x05
 63e:	5e 81       	ldd	r21, Y+6	; 0x06
 640:	57 fd       	sbrc	r21, 7
 642:	0a c0       	rjmp	.+20     	; 0x658 <snprintf+0x54>
 644:	2f 81       	ldd	r18, Y+7	; 0x07
 646:	38 85       	ldd	r19, Y+8	; 0x08
 648:	42 17       	cp	r20, r18
 64a:	53 07       	cpc	r21, r19
 64c:	0c f4       	brge	.+2      	; 0x650 <snprintf+0x4c>
 64e:	9a 01       	movw	r18, r20
 650:	f8 01       	movw	r30, r16
 652:	e2 0f       	add	r30, r18
 654:	f3 1f       	adc	r31, r19
 656:	10 82       	st	Z, r1
 658:	2e 96       	adiw	r28, 0x0e	; 14
 65a:	e4 e0       	ldi	r30, 0x04	; 4
 65c:	bc c2       	rjmp	.+1400   	; 0xbd6 <__epilogue_restores__+0x1c>

0000065e <vfprintf>:
 65e:	ab e0       	ldi	r26, 0x0B	; 11
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e4 e3       	ldi	r30, 0x34	; 52
 664:	f3 e0       	ldi	r31, 0x03	; 3
 666:	8d c2       	rjmp	.+1306   	; 0xb82 <__prologue_saves__>
 668:	6c 01       	movw	r12, r24
 66a:	7b 01       	movw	r14, r22
 66c:	8a 01       	movw	r16, r20
 66e:	fc 01       	movw	r30, r24
 670:	17 82       	std	Z+7, r1	; 0x07
 672:	16 82       	std	Z+6, r1	; 0x06
 674:	83 81       	ldd	r24, Z+3	; 0x03
 676:	81 ff       	sbrs	r24, 1
 678:	bf c1       	rjmp	.+894    	; 0x9f8 <__stack+0xf9>
 67a:	ce 01       	movw	r24, r28
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	3c 01       	movw	r6, r24
 680:	f6 01       	movw	r30, r12
 682:	93 81       	ldd	r25, Z+3	; 0x03
 684:	f7 01       	movw	r30, r14
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	7f 01       	movw	r14, r30
 690:	88 23       	and	r24, r24
 692:	09 f4       	brne	.+2      	; 0x696 <vfprintf+0x38>
 694:	ad c1       	rjmp	.+858    	; 0x9f0 <__stack+0xf1>
 696:	85 32       	cpi	r24, 0x25	; 37
 698:	39 f4       	brne	.+14     	; 0x6a8 <vfprintf+0x4a>
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	7f 01       	movw	r14, r30
 6a4:	85 32       	cpi	r24, 0x25	; 37
 6a6:	21 f4       	brne	.+8      	; 0x6b0 <vfprintf+0x52>
 6a8:	b6 01       	movw	r22, r12
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	d0 d1       	rcall	.+928    	; 0xa4e <fputc>
 6ae:	e8 cf       	rjmp	.-48     	; 0x680 <vfprintf+0x22>
 6b0:	91 2c       	mov	r9, r1
 6b2:	21 2c       	mov	r2, r1
 6b4:	31 2c       	mov	r3, r1
 6b6:	ff e1       	ldi	r31, 0x1F	; 31
 6b8:	f3 15       	cp	r31, r3
 6ba:	d8 f0       	brcs	.+54     	; 0x6f2 <vfprintf+0x94>
 6bc:	8b 32       	cpi	r24, 0x2B	; 43
 6be:	79 f0       	breq	.+30     	; 0x6de <vfprintf+0x80>
 6c0:	38 f4       	brcc	.+14     	; 0x6d0 <vfprintf+0x72>
 6c2:	80 32       	cpi	r24, 0x20	; 32
 6c4:	79 f0       	breq	.+30     	; 0x6e4 <vfprintf+0x86>
 6c6:	83 32       	cpi	r24, 0x23	; 35
 6c8:	a1 f4       	brne	.+40     	; 0x6f2 <vfprintf+0x94>
 6ca:	23 2d       	mov	r18, r3
 6cc:	20 61       	ori	r18, 0x10	; 16
 6ce:	1d c0       	rjmp	.+58     	; 0x70a <vfprintf+0xac>
 6d0:	8d 32       	cpi	r24, 0x2D	; 45
 6d2:	61 f0       	breq	.+24     	; 0x6ec <vfprintf+0x8e>
 6d4:	80 33       	cpi	r24, 0x30	; 48
 6d6:	69 f4       	brne	.+26     	; 0x6f2 <vfprintf+0x94>
 6d8:	23 2d       	mov	r18, r3
 6da:	21 60       	ori	r18, 0x01	; 1
 6dc:	16 c0       	rjmp	.+44     	; 0x70a <vfprintf+0xac>
 6de:	83 2d       	mov	r24, r3
 6e0:	82 60       	ori	r24, 0x02	; 2
 6e2:	38 2e       	mov	r3, r24
 6e4:	e3 2d       	mov	r30, r3
 6e6:	e4 60       	ori	r30, 0x04	; 4
 6e8:	3e 2e       	mov	r3, r30
 6ea:	2a c0       	rjmp	.+84     	; 0x740 <vfprintf+0xe2>
 6ec:	f3 2d       	mov	r31, r3
 6ee:	f8 60       	ori	r31, 0x08	; 8
 6f0:	1d c0       	rjmp	.+58     	; 0x72c <vfprintf+0xce>
 6f2:	37 fc       	sbrc	r3, 7
 6f4:	2d c0       	rjmp	.+90     	; 0x750 <vfprintf+0xf2>
 6f6:	20 ed       	ldi	r18, 0xD0	; 208
 6f8:	28 0f       	add	r18, r24
 6fa:	2a 30       	cpi	r18, 0x0A	; 10
 6fc:	40 f0       	brcs	.+16     	; 0x70e <vfprintf+0xb0>
 6fe:	8e 32       	cpi	r24, 0x2E	; 46
 700:	b9 f4       	brne	.+46     	; 0x730 <vfprintf+0xd2>
 702:	36 fc       	sbrc	r3, 6
 704:	75 c1       	rjmp	.+746    	; 0x9f0 <__stack+0xf1>
 706:	23 2d       	mov	r18, r3
 708:	20 64       	ori	r18, 0x40	; 64
 70a:	32 2e       	mov	r3, r18
 70c:	19 c0       	rjmp	.+50     	; 0x740 <vfprintf+0xe2>
 70e:	36 fe       	sbrs	r3, 6
 710:	06 c0       	rjmp	.+12     	; 0x71e <vfprintf+0xc0>
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	98 9e       	mul	r9, r24
 716:	20 0d       	add	r18, r0
 718:	11 24       	eor	r1, r1
 71a:	92 2e       	mov	r9, r18
 71c:	11 c0       	rjmp	.+34     	; 0x740 <vfprintf+0xe2>
 71e:	ea e0       	ldi	r30, 0x0A	; 10
 720:	2e 9e       	mul	r2, r30
 722:	20 0d       	add	r18, r0
 724:	11 24       	eor	r1, r1
 726:	22 2e       	mov	r2, r18
 728:	f3 2d       	mov	r31, r3
 72a:	f0 62       	ori	r31, 0x20	; 32
 72c:	3f 2e       	mov	r3, r31
 72e:	08 c0       	rjmp	.+16     	; 0x740 <vfprintf+0xe2>
 730:	8c 36       	cpi	r24, 0x6C	; 108
 732:	21 f4       	brne	.+8      	; 0x73c <vfprintf+0xde>
 734:	83 2d       	mov	r24, r3
 736:	80 68       	ori	r24, 0x80	; 128
 738:	38 2e       	mov	r3, r24
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0xe2>
 73c:	88 36       	cpi	r24, 0x68	; 104
 73e:	41 f4       	brne	.+16     	; 0x750 <vfprintf+0xf2>
 740:	f7 01       	movw	r30, r14
 742:	93 fd       	sbrc	r25, 3
 744:	85 91       	lpm	r24, Z+
 746:	93 ff       	sbrs	r25, 3
 748:	81 91       	ld	r24, Z+
 74a:	7f 01       	movw	r14, r30
 74c:	81 11       	cpse	r24, r1
 74e:	b3 cf       	rjmp	.-154    	; 0x6b6 <vfprintf+0x58>
 750:	98 2f       	mov	r25, r24
 752:	9f 7d       	andi	r25, 0xDF	; 223
 754:	95 54       	subi	r25, 0x45	; 69
 756:	93 30       	cpi	r25, 0x03	; 3
 758:	28 f4       	brcc	.+10     	; 0x764 <vfprintf+0x106>
 75a:	0c 5f       	subi	r16, 0xFC	; 252
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	9f e3       	ldi	r25, 0x3F	; 63
 760:	99 83       	std	Y+1, r25	; 0x01
 762:	0d c0       	rjmp	.+26     	; 0x77e <vfprintf+0x120>
 764:	83 36       	cpi	r24, 0x63	; 99
 766:	31 f0       	breq	.+12     	; 0x774 <vfprintf+0x116>
 768:	83 37       	cpi	r24, 0x73	; 115
 76a:	71 f0       	breq	.+28     	; 0x788 <vfprintf+0x12a>
 76c:	83 35       	cpi	r24, 0x53	; 83
 76e:	09 f0       	breq	.+2      	; 0x772 <vfprintf+0x114>
 770:	55 c0       	rjmp	.+170    	; 0x81c <vfprintf+0x1be>
 772:	20 c0       	rjmp	.+64     	; 0x7b4 <vfprintf+0x156>
 774:	f8 01       	movw	r30, r16
 776:	80 81       	ld	r24, Z
 778:	89 83       	std	Y+1, r24	; 0x01
 77a:	0e 5f       	subi	r16, 0xFE	; 254
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	88 24       	eor	r8, r8
 780:	83 94       	inc	r8
 782:	91 2c       	mov	r9, r1
 784:	53 01       	movw	r10, r6
 786:	12 c0       	rjmp	.+36     	; 0x7ac <vfprintf+0x14e>
 788:	28 01       	movw	r4, r16
 78a:	f2 e0       	ldi	r31, 0x02	; 2
 78c:	4f 0e       	add	r4, r31
 78e:	51 1c       	adc	r5, r1
 790:	f8 01       	movw	r30, r16
 792:	a0 80       	ld	r10, Z
 794:	b1 80       	ldd	r11, Z+1	; 0x01
 796:	36 fe       	sbrs	r3, 6
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <vfprintf+0x142>
 79a:	69 2d       	mov	r22, r9
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <vfprintf+0x146>
 7a0:	6f ef       	ldi	r22, 0xFF	; 255
 7a2:	7f ef       	ldi	r23, 0xFF	; 255
 7a4:	c5 01       	movw	r24, r10
 7a6:	38 d1       	rcall	.+624    	; 0xa18 <strnlen>
 7a8:	4c 01       	movw	r8, r24
 7aa:	82 01       	movw	r16, r4
 7ac:	f3 2d       	mov	r31, r3
 7ae:	ff 77       	andi	r31, 0x7F	; 127
 7b0:	3f 2e       	mov	r3, r31
 7b2:	15 c0       	rjmp	.+42     	; 0x7de <vfprintf+0x180>
 7b4:	28 01       	movw	r4, r16
 7b6:	22 e0       	ldi	r18, 0x02	; 2
 7b8:	42 0e       	add	r4, r18
 7ba:	51 1c       	adc	r5, r1
 7bc:	f8 01       	movw	r30, r16
 7be:	a0 80       	ld	r10, Z
 7c0:	b1 80       	ldd	r11, Z+1	; 0x01
 7c2:	36 fe       	sbrs	r3, 6
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x16e>
 7c6:	69 2d       	mov	r22, r9
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x172>
 7cc:	6f ef       	ldi	r22, 0xFF	; 255
 7ce:	7f ef       	ldi	r23, 0xFF	; 255
 7d0:	c5 01       	movw	r24, r10
 7d2:	17 d1       	rcall	.+558    	; 0xa02 <strnlen_P>
 7d4:	4c 01       	movw	r8, r24
 7d6:	f3 2d       	mov	r31, r3
 7d8:	f0 68       	ori	r31, 0x80	; 128
 7da:	3f 2e       	mov	r3, r31
 7dc:	82 01       	movw	r16, r4
 7de:	33 fc       	sbrc	r3, 3
 7e0:	19 c0       	rjmp	.+50     	; 0x814 <vfprintf+0x1b6>
 7e2:	82 2d       	mov	r24, r2
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	88 16       	cp	r8, r24
 7e8:	99 06       	cpc	r9, r25
 7ea:	a0 f4       	brcc	.+40     	; 0x814 <vfprintf+0x1b6>
 7ec:	b6 01       	movw	r22, r12
 7ee:	80 e2       	ldi	r24, 0x20	; 32
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	2d d1       	rcall	.+602    	; 0xa4e <fputc>
 7f4:	2a 94       	dec	r2
 7f6:	f5 cf       	rjmp	.-22     	; 0x7e2 <vfprintf+0x184>
 7f8:	f5 01       	movw	r30, r10
 7fa:	37 fc       	sbrc	r3, 7
 7fc:	85 91       	lpm	r24, Z+
 7fe:	37 fe       	sbrs	r3, 7
 800:	81 91       	ld	r24, Z+
 802:	5f 01       	movw	r10, r30
 804:	b6 01       	movw	r22, r12
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	22 d1       	rcall	.+580    	; 0xa4e <fputc>
 80a:	21 10       	cpse	r2, r1
 80c:	2a 94       	dec	r2
 80e:	21 e0       	ldi	r18, 0x01	; 1
 810:	82 1a       	sub	r8, r18
 812:	91 08       	sbc	r9, r1
 814:	81 14       	cp	r8, r1
 816:	91 04       	cpc	r9, r1
 818:	79 f7       	brne	.-34     	; 0x7f8 <vfprintf+0x19a>
 81a:	e1 c0       	rjmp	.+450    	; 0x9de <__stack+0xdf>
 81c:	84 36       	cpi	r24, 0x64	; 100
 81e:	11 f0       	breq	.+4      	; 0x824 <vfprintf+0x1c6>
 820:	89 36       	cpi	r24, 0x69	; 105
 822:	39 f5       	brne	.+78     	; 0x872 <vfprintf+0x214>
 824:	f8 01       	movw	r30, r16
 826:	37 fe       	sbrs	r3, 7
 828:	07 c0       	rjmp	.+14     	; 0x838 <vfprintf+0x1da>
 82a:	60 81       	ld	r22, Z
 82c:	71 81       	ldd	r23, Z+1	; 0x01
 82e:	82 81       	ldd	r24, Z+2	; 0x02
 830:	93 81       	ldd	r25, Z+3	; 0x03
 832:	0c 5f       	subi	r16, 0xFC	; 252
 834:	1f 4f       	sbci	r17, 0xFF	; 255
 836:	08 c0       	rjmp	.+16     	; 0x848 <vfprintf+0x1ea>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	07 2e       	mov	r0, r23
 83e:	00 0c       	add	r0, r0
 840:	88 0b       	sbc	r24, r24
 842:	99 0b       	sbc	r25, r25
 844:	0e 5f       	subi	r16, 0xFE	; 254
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	f3 2d       	mov	r31, r3
 84a:	ff 76       	andi	r31, 0x6F	; 111
 84c:	3f 2e       	mov	r3, r31
 84e:	97 ff       	sbrs	r25, 7
 850:	09 c0       	rjmp	.+18     	; 0x864 <vfprintf+0x206>
 852:	90 95       	com	r25
 854:	80 95       	com	r24
 856:	70 95       	com	r23
 858:	61 95       	neg	r22
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	f0 68       	ori	r31, 0x80	; 128
 862:	3f 2e       	mov	r3, r31
 864:	2a e0       	ldi	r18, 0x0A	; 10
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	a3 01       	movw	r20, r6
 86a:	2d d1       	rcall	.+602    	; 0xac6 <__ultoa_invert>
 86c:	88 2e       	mov	r8, r24
 86e:	86 18       	sub	r8, r6
 870:	44 c0       	rjmp	.+136    	; 0x8fa <vfprintf+0x29c>
 872:	85 37       	cpi	r24, 0x75	; 117
 874:	31 f4       	brne	.+12     	; 0x882 <vfprintf+0x224>
 876:	23 2d       	mov	r18, r3
 878:	2f 7e       	andi	r18, 0xEF	; 239
 87a:	b2 2e       	mov	r11, r18
 87c:	2a e0       	ldi	r18, 0x0A	; 10
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	25 c0       	rjmp	.+74     	; 0x8cc <vfprintf+0x26e>
 882:	93 2d       	mov	r25, r3
 884:	99 7f       	andi	r25, 0xF9	; 249
 886:	b9 2e       	mov	r11, r25
 888:	8f 36       	cpi	r24, 0x6F	; 111
 88a:	c1 f0       	breq	.+48     	; 0x8bc <vfprintf+0x25e>
 88c:	18 f4       	brcc	.+6      	; 0x894 <vfprintf+0x236>
 88e:	88 35       	cpi	r24, 0x58	; 88
 890:	79 f0       	breq	.+30     	; 0x8b0 <vfprintf+0x252>
 892:	ae c0       	rjmp	.+348    	; 0x9f0 <__stack+0xf1>
 894:	80 37       	cpi	r24, 0x70	; 112
 896:	19 f0       	breq	.+6      	; 0x89e <vfprintf+0x240>
 898:	88 37       	cpi	r24, 0x78	; 120
 89a:	21 f0       	breq	.+8      	; 0x8a4 <vfprintf+0x246>
 89c:	a9 c0       	rjmp	.+338    	; 0x9f0 <__stack+0xf1>
 89e:	e9 2f       	mov	r30, r25
 8a0:	e0 61       	ori	r30, 0x10	; 16
 8a2:	be 2e       	mov	r11, r30
 8a4:	b4 fe       	sbrs	r11, 4
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <vfprintf+0x264>
 8a8:	fb 2d       	mov	r31, r11
 8aa:	f4 60       	ori	r31, 0x04	; 4
 8ac:	bf 2e       	mov	r11, r31
 8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <vfprintf+0x264>
 8b0:	34 fe       	sbrs	r3, 4
 8b2:	0a c0       	rjmp	.+20     	; 0x8c8 <vfprintf+0x26a>
 8b4:	29 2f       	mov	r18, r25
 8b6:	26 60       	ori	r18, 0x06	; 6
 8b8:	b2 2e       	mov	r11, r18
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x26a>
 8bc:	28 e0       	ldi	r18, 0x08	; 8
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <vfprintf+0x26e>
 8c2:	20 e1       	ldi	r18, 0x10	; 16
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <vfprintf+0x26e>
 8c8:	20 e1       	ldi	r18, 0x10	; 16
 8ca:	32 e0       	ldi	r19, 0x02	; 2
 8cc:	f8 01       	movw	r30, r16
 8ce:	b7 fe       	sbrs	r11, 7
 8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <vfprintf+0x282>
 8d2:	60 81       	ld	r22, Z
 8d4:	71 81       	ldd	r23, Z+1	; 0x01
 8d6:	82 81       	ldd	r24, Z+2	; 0x02
 8d8:	93 81       	ldd	r25, Z+3	; 0x03
 8da:	0c 5f       	subi	r16, 0xFC	; 252
 8dc:	1f 4f       	sbci	r17, 0xFF	; 255
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <vfprintf+0x28e>
 8e0:	60 81       	ld	r22, Z
 8e2:	71 81       	ldd	r23, Z+1	; 0x01
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 5f       	subi	r16, 0xFE	; 254
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	a3 01       	movw	r20, r6
 8ee:	eb d0       	rcall	.+470    	; 0xac6 <__ultoa_invert>
 8f0:	88 2e       	mov	r8, r24
 8f2:	86 18       	sub	r8, r6
 8f4:	fb 2d       	mov	r31, r11
 8f6:	ff 77       	andi	r31, 0x7F	; 127
 8f8:	3f 2e       	mov	r3, r31
 8fa:	36 fe       	sbrs	r3, 6
 8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0x19>
 8fe:	23 2d       	mov	r18, r3
 900:	2e 7f       	andi	r18, 0xFE	; 254
 902:	a2 2e       	mov	r10, r18
 904:	89 14       	cp	r8, r9
 906:	58 f4       	brcc	.+22     	; 0x91e <__stack+0x1f>
 908:	34 fe       	sbrs	r3, 4
 90a:	0b c0       	rjmp	.+22     	; 0x922 <__stack+0x23>
 90c:	32 fc       	sbrc	r3, 2
 90e:	09 c0       	rjmp	.+18     	; 0x922 <__stack+0x23>
 910:	83 2d       	mov	r24, r3
 912:	8e 7e       	andi	r24, 0xEE	; 238
 914:	a8 2e       	mov	r10, r24
 916:	05 c0       	rjmp	.+10     	; 0x922 <__stack+0x23>
 918:	b8 2c       	mov	r11, r8
 91a:	a3 2c       	mov	r10, r3
 91c:	03 c0       	rjmp	.+6      	; 0x924 <__stack+0x25>
 91e:	b8 2c       	mov	r11, r8
 920:	01 c0       	rjmp	.+2      	; 0x924 <__stack+0x25>
 922:	b9 2c       	mov	r11, r9
 924:	a4 fe       	sbrs	r10, 4
 926:	0f c0       	rjmp	.+30     	; 0x946 <__stack+0x47>
 928:	fe 01       	movw	r30, r28
 92a:	e8 0d       	add	r30, r8
 92c:	f1 1d       	adc	r31, r1
 92e:	80 81       	ld	r24, Z
 930:	80 33       	cpi	r24, 0x30	; 48
 932:	21 f4       	brne	.+8      	; 0x93c <__stack+0x3d>
 934:	9a 2d       	mov	r25, r10
 936:	99 7e       	andi	r25, 0xE9	; 233
 938:	a9 2e       	mov	r10, r25
 93a:	09 c0       	rjmp	.+18     	; 0x94e <__stack+0x4f>
 93c:	a2 fe       	sbrs	r10, 2
 93e:	06 c0       	rjmp	.+12     	; 0x94c <__stack+0x4d>
 940:	b3 94       	inc	r11
 942:	b3 94       	inc	r11
 944:	04 c0       	rjmp	.+8      	; 0x94e <__stack+0x4f>
 946:	8a 2d       	mov	r24, r10
 948:	86 78       	andi	r24, 0x86	; 134
 94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0x4f>
 94c:	b3 94       	inc	r11
 94e:	a3 fc       	sbrc	r10, 3
 950:	10 c0       	rjmp	.+32     	; 0x972 <__stack+0x73>
 952:	a0 fe       	sbrs	r10, 0
 954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
 956:	b2 14       	cp	r11, r2
 958:	80 f4       	brcc	.+32     	; 0x97a <__stack+0x7b>
 95a:	28 0c       	add	r2, r8
 95c:	92 2c       	mov	r9, r2
 95e:	9b 18       	sub	r9, r11
 960:	0d c0       	rjmp	.+26     	; 0x97c <__stack+0x7d>
 962:	b2 14       	cp	r11, r2
 964:	58 f4       	brcc	.+22     	; 0x97c <__stack+0x7d>
 966:	b6 01       	movw	r22, r12
 968:	80 e2       	ldi	r24, 0x20	; 32
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	70 d0       	rcall	.+224    	; 0xa4e <fputc>
 96e:	b3 94       	inc	r11
 970:	f8 cf       	rjmp	.-16     	; 0x962 <__stack+0x63>
 972:	b2 14       	cp	r11, r2
 974:	18 f4       	brcc	.+6      	; 0x97c <__stack+0x7d>
 976:	2b 18       	sub	r2, r11
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
 97a:	98 2c       	mov	r9, r8
 97c:	21 2c       	mov	r2, r1
 97e:	a4 fe       	sbrs	r10, 4
 980:	0f c0       	rjmp	.+30     	; 0x9a0 <__stack+0xa1>
 982:	b6 01       	movw	r22, r12
 984:	80 e3       	ldi	r24, 0x30	; 48
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	62 d0       	rcall	.+196    	; 0xa4e <fputc>
 98a:	a2 fe       	sbrs	r10, 2
 98c:	16 c0       	rjmp	.+44     	; 0x9ba <__stack+0xbb>
 98e:	a1 fc       	sbrc	r10, 1
 990:	03 c0       	rjmp	.+6      	; 0x998 <__stack+0x99>
 992:	88 e7       	ldi	r24, 0x78	; 120
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x9d>
 998:	88 e5       	ldi	r24, 0x58	; 88
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	b6 01       	movw	r22, r12
 99e:	0c c0       	rjmp	.+24     	; 0x9b8 <__stack+0xb9>
 9a0:	8a 2d       	mov	r24, r10
 9a2:	86 78       	andi	r24, 0x86	; 134
 9a4:	51 f0       	breq	.+20     	; 0x9ba <__stack+0xbb>
 9a6:	a1 fe       	sbrs	r10, 1
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	8b e2       	ldi	r24, 0x2B	; 43
 9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <__stack+0xb1>
 9ae:	80 e2       	ldi	r24, 0x20	; 32
 9b0:	a7 fc       	sbrc	r10, 7
 9b2:	8d e2       	ldi	r24, 0x2D	; 45
 9b4:	b6 01       	movw	r22, r12
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	4a d0       	rcall	.+148    	; 0xa4e <fputc>
 9ba:	89 14       	cp	r8, r9
 9bc:	30 f4       	brcc	.+12     	; 0x9ca <__stack+0xcb>
 9be:	b6 01       	movw	r22, r12
 9c0:	80 e3       	ldi	r24, 0x30	; 48
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	44 d0       	rcall	.+136    	; 0xa4e <fputc>
 9c6:	9a 94       	dec	r9
 9c8:	f8 cf       	rjmp	.-16     	; 0x9ba <__stack+0xbb>
 9ca:	8a 94       	dec	r8
 9cc:	f3 01       	movw	r30, r6
 9ce:	e8 0d       	add	r30, r8
 9d0:	f1 1d       	adc	r31, r1
 9d2:	80 81       	ld	r24, Z
 9d4:	b6 01       	movw	r22, r12
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	3a d0       	rcall	.+116    	; 0xa4e <fputc>
 9da:	81 10       	cpse	r8, r1
 9dc:	f6 cf       	rjmp	.-20     	; 0x9ca <__stack+0xcb>
 9de:	22 20       	and	r2, r2
 9e0:	09 f4       	brne	.+2      	; 0x9e4 <__stack+0xe5>
 9e2:	4e ce       	rjmp	.-868    	; 0x680 <vfprintf+0x22>
 9e4:	b6 01       	movw	r22, r12
 9e6:	80 e2       	ldi	r24, 0x20	; 32
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	31 d0       	rcall	.+98     	; 0xa4e <fputc>
 9ec:	2a 94       	dec	r2
 9ee:	f7 cf       	rjmp	.-18     	; 0x9de <__stack+0xdf>
 9f0:	f6 01       	movw	r30, r12
 9f2:	86 81       	ldd	r24, Z+6	; 0x06
 9f4:	97 81       	ldd	r25, Z+7	; 0x07
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__stack+0xfd>
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	9f ef       	ldi	r25, 0xFF	; 255
 9fc:	2b 96       	adiw	r28, 0x0b	; 11
 9fe:	e2 e1       	ldi	r30, 0x12	; 18
 a00:	dc c0       	rjmp	.+440    	; 0xbba <__epilogue_restores__>

00000a02 <strnlen_P>:
 a02:	fc 01       	movw	r30, r24
 a04:	05 90       	lpm	r0, Z+
 a06:	61 50       	subi	r22, 0x01	; 1
 a08:	70 40       	sbci	r23, 0x00	; 0
 a0a:	01 10       	cpse	r0, r1
 a0c:	d8 f7       	brcc	.-10     	; 0xa04 <strnlen_P+0x2>
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	8e 0f       	add	r24, r30
 a14:	9f 1f       	adc	r25, r31
 a16:	08 95       	ret

00000a18 <strnlen>:
 a18:	fc 01       	movw	r30, r24
 a1a:	61 50       	subi	r22, 0x01	; 1
 a1c:	70 40       	sbci	r23, 0x00	; 0
 a1e:	01 90       	ld	r0, Z+
 a20:	01 10       	cpse	r0, r1
 a22:	d8 f7       	brcc	.-10     	; 0xa1a <strnlen+0x2>
 a24:	80 95       	com	r24
 a26:	90 95       	com	r25
 a28:	8e 0f       	add	r24, r30
 a2a:	9f 1f       	adc	r25, r31
 a2c:	08 95       	ret

00000a2e <strrev>:
 a2e:	dc 01       	movw	r26, r24
 a30:	fc 01       	movw	r30, r24
 a32:	67 2f       	mov	r22, r23
 a34:	71 91       	ld	r23, Z+
 a36:	77 23       	and	r23, r23
 a38:	e1 f7       	brne	.-8      	; 0xa32 <strrev+0x4>
 a3a:	32 97       	sbiw	r30, 0x02	; 2
 a3c:	04 c0       	rjmp	.+8      	; 0xa46 <strrev+0x18>
 a3e:	7c 91       	ld	r23, X
 a40:	6d 93       	st	X+, r22
 a42:	70 83       	st	Z, r23
 a44:	62 91       	ld	r22, -Z
 a46:	ae 17       	cp	r26, r30
 a48:	bf 07       	cpc	r27, r31
 a4a:	c8 f3       	brcs	.-14     	; 0xa3e <strrev+0x10>
 a4c:	08 95       	ret

00000a4e <fputc>:
 a4e:	0f 93       	push	r16
 a50:	1f 93       	push	r17
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	fb 01       	movw	r30, r22
 a58:	23 81       	ldd	r18, Z+3	; 0x03
 a5a:	21 fd       	sbrc	r18, 1
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <fputc+0x16>
 a5e:	8f ef       	ldi	r24, 0xFF	; 255
 a60:	9f ef       	ldi	r25, 0xFF	; 255
 a62:	2c c0       	rjmp	.+88     	; 0xabc <fputc+0x6e>
 a64:	22 ff       	sbrs	r18, 2
 a66:	16 c0       	rjmp	.+44     	; 0xa94 <fputc+0x46>
 a68:	46 81       	ldd	r20, Z+6	; 0x06
 a6a:	57 81       	ldd	r21, Z+7	; 0x07
 a6c:	24 81       	ldd	r18, Z+4	; 0x04
 a6e:	35 81       	ldd	r19, Z+5	; 0x05
 a70:	42 17       	cp	r20, r18
 a72:	53 07       	cpc	r21, r19
 a74:	44 f4       	brge	.+16     	; 0xa86 <fputc+0x38>
 a76:	a0 81       	ld	r26, Z
 a78:	b1 81       	ldd	r27, Z+1	; 0x01
 a7a:	9d 01       	movw	r18, r26
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	31 83       	std	Z+1, r19	; 0x01
 a82:	20 83       	st	Z, r18
 a84:	8c 93       	st	X, r24
 a86:	26 81       	ldd	r18, Z+6	; 0x06
 a88:	37 81       	ldd	r19, Z+7	; 0x07
 a8a:	2f 5f       	subi	r18, 0xFF	; 255
 a8c:	3f 4f       	sbci	r19, 0xFF	; 255
 a8e:	37 83       	std	Z+7, r19	; 0x07
 a90:	26 83       	std	Z+6, r18	; 0x06
 a92:	14 c0       	rjmp	.+40     	; 0xabc <fputc+0x6e>
 a94:	8b 01       	movw	r16, r22
 a96:	ec 01       	movw	r28, r24
 a98:	fb 01       	movw	r30, r22
 a9a:	00 84       	ldd	r0, Z+8	; 0x08
 a9c:	f1 85       	ldd	r31, Z+9	; 0x09
 a9e:	e0 2d       	mov	r30, r0
 aa0:	09 95       	icall
 aa2:	89 2b       	or	r24, r25
 aa4:	e1 f6       	brne	.-72     	; 0xa5e <fputc+0x10>
 aa6:	d8 01       	movw	r26, r16
 aa8:	16 96       	adiw	r26, 0x06	; 6
 aaa:	8d 91       	ld	r24, X+
 aac:	9c 91       	ld	r25, X
 aae:	17 97       	sbiw	r26, 0x07	; 7
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	17 96       	adiw	r26, 0x07	; 7
 ab4:	9c 93       	st	X, r25
 ab6:	8e 93       	st	-X, r24
 ab8:	16 97       	sbiw	r26, 0x06	; 6
 aba:	ce 01       	movw	r24, r28
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <__ultoa_invert>:
 ac6:	fa 01       	movw	r30, r20
 ac8:	aa 27       	eor	r26, r26
 aca:	28 30       	cpi	r18, 0x08	; 8
 acc:	51 f1       	breq	.+84     	; 0xb22 <__ultoa_invert+0x5c>
 ace:	20 31       	cpi	r18, 0x10	; 16
 ad0:	81 f1       	breq	.+96     	; 0xb32 <__ultoa_invert+0x6c>
 ad2:	e8 94       	clt
 ad4:	6f 93       	push	r22
 ad6:	6e 7f       	andi	r22, 0xFE	; 254
 ad8:	6e 5f       	subi	r22, 0xFE	; 254
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	af 4f       	sbci	r26, 0xFF	; 255
 ae2:	b1 e0       	ldi	r27, 0x01	; 1
 ae4:	3e d0       	rcall	.+124    	; 0xb62 <__ultoa_invert+0x9c>
 ae6:	b4 e0       	ldi	r27, 0x04	; 4
 ae8:	3c d0       	rcall	.+120    	; 0xb62 <__ultoa_invert+0x9c>
 aea:	67 0f       	add	r22, r23
 aec:	78 1f       	adc	r23, r24
 aee:	89 1f       	adc	r24, r25
 af0:	9a 1f       	adc	r25, r26
 af2:	a1 1d       	adc	r26, r1
 af4:	68 0f       	add	r22, r24
 af6:	79 1f       	adc	r23, r25
 af8:	8a 1f       	adc	r24, r26
 afa:	91 1d       	adc	r25, r1
 afc:	a1 1d       	adc	r26, r1
 afe:	6a 0f       	add	r22, r26
 b00:	71 1d       	adc	r23, r1
 b02:	81 1d       	adc	r24, r1
 b04:	91 1d       	adc	r25, r1
 b06:	a1 1d       	adc	r26, r1
 b08:	20 d0       	rcall	.+64     	; 0xb4a <__ultoa_invert+0x84>
 b0a:	09 f4       	brne	.+2      	; 0xb0e <__ultoa_invert+0x48>
 b0c:	68 94       	set
 b0e:	3f 91       	pop	r19
 b10:	2a e0       	ldi	r18, 0x0A	; 10
 b12:	26 9f       	mul	r18, r22
 b14:	11 24       	eor	r1, r1
 b16:	30 19       	sub	r19, r0
 b18:	30 5d       	subi	r19, 0xD0	; 208
 b1a:	31 93       	st	Z+, r19
 b1c:	de f6       	brtc	.-74     	; 0xad4 <__ultoa_invert+0xe>
 b1e:	cf 01       	movw	r24, r30
 b20:	08 95       	ret
 b22:	46 2f       	mov	r20, r22
 b24:	47 70       	andi	r20, 0x07	; 7
 b26:	40 5d       	subi	r20, 0xD0	; 208
 b28:	41 93       	st	Z+, r20
 b2a:	b3 e0       	ldi	r27, 0x03	; 3
 b2c:	0f d0       	rcall	.+30     	; 0xb4c <__ultoa_invert+0x86>
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__ultoa_invert+0x5c>
 b30:	f6 cf       	rjmp	.-20     	; 0xb1e <__ultoa_invert+0x58>
 b32:	46 2f       	mov	r20, r22
 b34:	4f 70       	andi	r20, 0x0F	; 15
 b36:	40 5d       	subi	r20, 0xD0	; 208
 b38:	4a 33       	cpi	r20, 0x3A	; 58
 b3a:	18 f0       	brcs	.+6      	; 0xb42 <__ultoa_invert+0x7c>
 b3c:	49 5d       	subi	r20, 0xD9	; 217
 b3e:	31 fd       	sbrc	r19, 1
 b40:	40 52       	subi	r20, 0x20	; 32
 b42:	41 93       	st	Z+, r20
 b44:	02 d0       	rcall	.+4      	; 0xb4a <__ultoa_invert+0x84>
 b46:	a9 f7       	brne	.-22     	; 0xb32 <__ultoa_invert+0x6c>
 b48:	ea cf       	rjmp	.-44     	; 0xb1e <__ultoa_invert+0x58>
 b4a:	b4 e0       	ldi	r27, 0x04	; 4
 b4c:	a6 95       	lsr	r26
 b4e:	97 95       	ror	r25
 b50:	87 95       	ror	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	ba 95       	dec	r27
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__ultoa_invert+0x86>
 b5a:	00 97       	sbiw	r24, 0x00	; 0
 b5c:	61 05       	cpc	r22, r1
 b5e:	71 05       	cpc	r23, r1
 b60:	08 95       	ret
 b62:	9b 01       	movw	r18, r22
 b64:	ac 01       	movw	r20, r24
 b66:	0a 2e       	mov	r0, r26
 b68:	06 94       	lsr	r0
 b6a:	57 95       	ror	r21
 b6c:	47 95       	ror	r20
 b6e:	37 95       	ror	r19
 b70:	27 95       	ror	r18
 b72:	ba 95       	dec	r27
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__ultoa_invert+0xa2>
 b76:	62 0f       	add	r22, r18
 b78:	73 1f       	adc	r23, r19
 b7a:	84 1f       	adc	r24, r20
 b7c:	95 1f       	adc	r25, r21
 b7e:	a0 1d       	adc	r26, r0
 b80:	08 95       	ret

00000b82 <__prologue_saves__>:
 b82:	2f 92       	push	r2
 b84:	3f 92       	push	r3
 b86:	4f 92       	push	r4
 b88:	5f 92       	push	r5
 b8a:	6f 92       	push	r6
 b8c:	7f 92       	push	r7
 b8e:	8f 92       	push	r8
 b90:	9f 92       	push	r9
 b92:	af 92       	push	r10
 b94:	bf 92       	push	r11
 b96:	cf 92       	push	r12
 b98:	df 92       	push	r13
 b9a:	ef 92       	push	r14
 b9c:	ff 92       	push	r15
 b9e:	0f 93       	push	r16
 ba0:	1f 93       	push	r17
 ba2:	cf 93       	push	r28
 ba4:	df 93       	push	r29
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
 baa:	ca 1b       	sub	r28, r26
 bac:	db 0b       	sbc	r29, r27
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	f8 94       	cli
 bb2:	de bf       	out	0x3e, r29	; 62
 bb4:	0f be       	out	0x3f, r0	; 63
 bb6:	cd bf       	out	0x3d, r28	; 61
 bb8:	09 94       	ijmp

00000bba <__epilogue_restores__>:
 bba:	2a 88       	ldd	r2, Y+18	; 0x12
 bbc:	39 88       	ldd	r3, Y+17	; 0x11
 bbe:	48 88       	ldd	r4, Y+16	; 0x10
 bc0:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc2:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc4:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc6:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc8:	9b 84       	ldd	r9, Y+11	; 0x0b
 bca:	aa 84       	ldd	r10, Y+10	; 0x0a
 bcc:	b9 84       	ldd	r11, Y+9	; 0x09
 bce:	c8 84       	ldd	r12, Y+8	; 0x08
 bd0:	df 80       	ldd	r13, Y+7	; 0x07
 bd2:	ee 80       	ldd	r14, Y+6	; 0x06
 bd4:	fd 80       	ldd	r15, Y+5	; 0x05
 bd6:	0c 81       	ldd	r16, Y+4	; 0x04
 bd8:	1b 81       	ldd	r17, Y+3	; 0x03
 bda:	aa 81       	ldd	r26, Y+2	; 0x02
 bdc:	b9 81       	ldd	r27, Y+1	; 0x01
 bde:	ce 0f       	add	r28, r30
 be0:	d1 1d       	adc	r29, r1
 be2:	0f b6       	in	r0, 0x3f	; 63
 be4:	f8 94       	cli
 be6:	de bf       	out	0x3e, r29	; 62
 be8:	0f be       	out	0x3f, r0	; 63
 bea:	cd bf       	out	0x3d, r28	; 61
 bec:	ed 01       	movw	r28, r26
 bee:	08 95       	ret

00000bf0 <_exit>:
 bf0:	f8 94       	cli

00000bf2 <__stop_program>:
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <__stop_program>
